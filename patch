From 947e3069064dce909358f2103900248ab6bb6c81 Mon Sep 17 00:00:00 2001
From: ColeHud <cmhudson11@gmail.com>
Date: Mon, 20 Jun 2016 17:20:44 -0400
Subject: [PATCH] created function to edit picture at (x,y)

---
 apps/eink-advanced/.DS_Store         | Bin 0 -> 6148 bytes
 apps/eink-advanced/Makefile          |  27 ++
 apps/eink-advanced/README.md         |  17 ++
 apps/eink-advanced/board.h           |   3 +
 apps/eink-advanced/convert_to_epd.py |  57 ++++
 apps/eink-advanced/main.c            | 517 +++++++++++++++++++++++++++++++++++
 apps/eink-advanced/nrf_drv_config.h  | 432 +++++++++++++++++++++++++++++
 7 files changed, 1053 insertions(+)

diff --git a/apps/eink-advanced/.DS_Store b/apps/eink-advanced/.DS_Store
new file mode 100644
index 0000000000000000000000000000000000000000..a4e9cf6e5de8cbe7c21cc238b9dbfbf5c8644dc6
GIT binary patch
literal 6148
zcmeHKOHKko5PgM2AZ~Eya+a(}yunDogasQo0LsTt9EA`xaW}`{P#(bB;H&BmnE~0V
zF;z+Ro9TH~UHy78Jq<uQud_>_37}3_tTfnsWBOeEz$&q)Mik32!Ws*#Fz;svZ14Ds
z3h3H3&_)*{jOn}eTTCa}V#23<HDpNKY|U&EHB7k9w_NENV;}lik&SC|S_Sqwrewe1
z4Rc1UIgXAp=H1fbmw4aH@UfTS6we&(kvZC!mbq42i+tH`t+qM_<UTR`9V0S*7mL-&
z=U(n6v#!V;vz8TW9LH)k`u@o5idr-<L=RU~a6oLc(ph;#=xjFhO03Yz^u`r%1zdq&
zRDgT7TKz1bx2}LI;0o*%(C<S+S4<=30qxVl#*P5QD!a{it!D|1Ng}2Z^MHIplMqS_
zp%RZ662jS^L|z&(4;aEB@$eyWWQivfvC)}7F*+m-=&dW@3X~N%3Aat%|9i*J|K%XR
za|K+1f2Dv_yQ6N0Q;K`*!Q^zWP3SjtHRa_2cOks6t(aWhiZAG9>`(N9m`2P4vWMnB
N0w#kuuE38f@C5^MX72z1

literal 0
HcmV?d00001

diff --git a/apps/eink-advanced/Makefile b/apps/eink-advanced/Makefile
new file mode 100644
index 0000000000000000000000000000000000000000..62e09141017d29ba4108f6e0d8e1c3eee3888f5e
--- /dev/null
+++ b/apps/eink-advanced/Makefile
@@ -0,0 +1,27 @@
+PROJECT_NAME = $(shell basename "$(realpath ./)")
+
+APPLICATION_SRCS = $(notdir $(wildcard ./*.c))
+APPLICATION_SRCS += softdevice_handler.c
+APPLICATION_SRCS += ble_advdata.c
+APPLICATION_SRCS += ble_conn_params.c
+APPLICATION_SRCS += app_timer.c
+APPLICATION_SRCS += app_error.c
+APPLICATION_SRCS += app_gpiote.c
+APPLICATION_SRCS += led.c
+
+APPLICATION_SRCS += nrf_drv_spi.c
+APPLICATION_SRCS += nrf_drv_common.c
+APPLICATION_SRCS += nrf_drv_gpiote.c
+APPLICATION_SRCS += nrf_delay.c
+
+# APPLICATION_SRCS += adxl362.c
+
+NRF_BASE_PATH ?= ../..
+LIBRARY_PATHS += . $(NRF_BASE_PATH)/devices ../../include
+SOURCE_PATHS += $(NRF_BASE_PATH)/devices ../../src
+
+SOFTDEVICE_MODEL = s130
+RAM_KB = 32
+
+
+include $(NRF_BASE_PATH)/make/Makefile
diff --git a/apps/eink-advanced/README.md b/apps/eink-advanced/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..fe77c627e5b017d4b65046901fe6bd02597be8d6
--- /dev/null
+++ b/apps/eink-advanced/README.md
@@ -0,0 +1,17 @@
+E-Ink Display Test
+==================
+
+This app displays an image on an TCM-P441-230_v1.0 module from pervasive
+displays.
+
+http://www.digikey.com/product-detail/en/ST044AS182/ST044AS182-ND/4898786
+
+Platform
+--------
+
+This app runs on the Nucleum board jumpered to the display.
+
+Install
+-------
+
+    make flash
diff --git a/apps/eink-advanced/board.h b/apps/eink-advanced/board.h
new file mode 100644
index 0000000000000000000000000000000000000000..22ec00b2ea6ee429e9da014812ebef52c767ad8d
--- /dev/null
+++ b/apps/eink-advanced/board.h
@@ -0,0 +1,3 @@
+#pragma once
+
+#define SPI_INSTANCE  0
diff --git a/apps/eink-advanced/convert_to_epd.py b/apps/eink-advanced/convert_to_epd.py
new file mode 100644
index 0000000000000000000000000000000000000000..453ddf38315a48b0c3648c1885c9a8c9477b1b41
--- /dev/null
+++ b/apps/eink-advanced/convert_to_epd.py
@@ -0,0 +1,57 @@
+from PIL import Image
+image_file = Image.open('lab11_eink_color.png') # open colour image
+image_file = image_file.convert('1') # convert image to black and white
+image_file.save('result.png')
+
+pixels = image_file.load()
+
+# print(len(pixels))
+print(image_file.size)
+
+out = []
+
+for y in range(0, 300):
+	for x in range(0, 400):
+		if x < image_file.size[0] and y < image_file.size[1]:
+			if pixels[x, y] == 255:
+				out.append(0)
+			else:
+				out.append(1)
+		else:
+			out.append(0)
+
+# print(out)
+
+compressed = []
+
+# compress to buts
+for i in range(0, 300*400, 8):
+	val = out[i]   * 0x80 + \
+	      out[i+1] * 0x40 + \
+	      out[i+2] * 0x20 + \
+	      out[i+3] * 0x10 + \
+	      out[i+4] * 0x08 + \
+	      out[i+5] * 0x04 + \
+	      out[i+6] * 0x02 + \
+	      out[i+7] * 0x01
+
+	compressed.append(val)
+
+# print(compressed)
+# print(len(compressed))
+
+
+def chunks(l, n):
+	"""Yield successive n-sized chunks from l."""
+	for i in range(0, len(l), n):
+		yield l[i:i+n]
+
+
+print('uint8_t img[15000] = {')
+for c in chunks(compressed, 50):
+	# print(c)
+	a = ','.join(map(str, c))
+	print(a + ',')
+	# print('{},'.format(','.join(c)))
+
+print('};')
\ No newline at end of file
diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
new file mode 100644
index 0000000000000000000000000000000000000000..cf46c77712cd7816ac69c09af9184a86f3679fe8
--- /dev/null
+++ b/apps/eink-advanced/main.c
@@ -0,0 +1,517 @@
+/* Blink with simple timer
+ */
+
+#include <stdbool.h>
+#include <stdint.h>
+#include "led.h"
+#include "nordic_common.h"
+#include "softdevice_handler.h"
+#include "nrf_drv_spi.h"
+#include "nrf_delay.h"
+#include "app_gpiote.h"
+#include "app_util_platform.h"
+
+#include "board.h"
+
+// Need pin number for LED
+#define LED0 18
+#define LED1 19
+#define LED2 20
+
+#define nTC_EN   24 // B3 on Atum Breakout
+#define nTC_BUSY 23 // B4 on Atum Breakout
+#define nTC_CS   22 // B5 on Atum Breakout
+
+static nrf_drv_spi_t _spi = NRF_DRV_SPI_INSTANCE(SPI_INSTANCE);
+
+
+
+
+static void spi_init () {
+    uint32_t err;
+
+    nrf_drv_spi_config_t spi_config = NRF_DRV_SPI_DEFAULT_CONFIG(SPI_INSTANCE);
+    // Datasheet says we can do 3 MHz, but 4 also seems to work.
+    spi_config.frequency = NRF_DRV_SPI_FREQ_4M;
+    // We do need CS pin
+    spi_config.ss_pin = nTC_CS;
+    // Datasheet claims we need CPOL=1 CPHA=1.
+    // However, I did not get that to work. MODE 2 does seem to work.
+    spi_config.mode = NRF_DRV_SPI_MODE_2;
+
+    // We want blocking mode
+    err = nrf_drv_spi_init(&_spi, &spi_config, NULL);
+    APP_ERROR_CHECK(err);
+}
+
+static void wait_for_not_busy () {
+    uint8_t found_busy_low = 0;
+    while (1) {
+        uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
+        if (found_busy_low && pin) {
+            break;
+        }
+        if (pin == 0) {
+            found_busy_low = 1;
+        }
+    }
+
+    // Then wait a little longer so we don't violate the T_NS time.
+    nrf_delay_us(5);
+}
+
+uint8_t lab11[15000] = {
+255,255,255,255,255,255,255,255,255,255,255,255,255,255,237,182,219,109,182,219,109,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+238,238,238,238,238,238,170,170,170,170,170,170,170,170,182,219,109,182,219,109,182,219,244,0,0,0,0,0,0,66,16,132,32,0,5,85,85,85,80,0,0,0,0,0,0,0,0,0,0,0,
+191,191,191,191,191,191,255,255,255,255,255,255,255,255,234,170,170,170,170,170,170,173,91,232,0,0,0,0,2,8,66,16,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+251,251,251,251,251,250,170,170,170,170,170,170,170,170,187,109,182,219,109,182,219,117,109,86,128,0,0,0,0,32,0,0,0,0,10,170,170,170,144,0,0,0,0,0,0,0,0,0,0,0,
+238,238,238,238,238,239,255,255,255,255,255,255,255,255,237,182,219,109,182,219,109,173,171,107,80,0,0,0,4,130,36,137,16,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,
+255,191,191,191,191,190,219,109,182,219,109,182,219,109,181,91,85,181,91,85,181,86,221,189,108,0,0,0,0,0,128,32,0,0,20,146,73,36,128,0,0,0,0,0,0,0,0,0,0,0,
+183,251,251,251,251,251,189,222,239,119,187,221,238,247,118,234,221,86,234,221,86,245,106,213,183,0,0,0,2,36,4,1,32,0,2,33,16,136,32,0,0,0,0,0,0,0,0,0,0,0,
+253,223,111,111,111,111,239,119,187,221,238,247,123,189,219,86,171,107,86,171,107,91,173,86,213,208,0,0,8,0,32,136,0,0,40,136,68,34,128,0,0,0,0,0,0,0,0,0,0,0,
+223,125,255,255,255,254,187,221,238,247,123,189,222,239,117,187,117,189,187,117,189,173,86,219,90,168,0,0,0,145,2,0,144,0,0,34,17,8,32,0,0,0,0,0,0,0,0,0,0,0,
+251,247,246,246,246,247,238,247,123,189,222,239,119,187,221,85,174,165,85,174,165,106,245,109,109,180,0,0,18,0,16,36,0,0,37,8,132,66,0,0,0,0,0,0,0,0,0,0,0,0,
+223,191,95,191,191,190,187,189,222,239,119,187,221,238,246,218,181,187,109,85,187,91,91,181,182,223,0,0,0,9,0,128,64,0,64,162,33,16,160,0,0,0,0,0,0,0,0,0,0,0,
+251,247,253,246,246,247,238,239,119,187,221,238,247,123,187,109,214,213,182,246,213,173,173,86,170,169,192,0,32,160,72,9,8,0,20,8,136,68,0,0,0,0,0,0,0,0,0,0,0,0,
+222,221,239,223,223,222,187,187,221,238,247,123,189,222,234,182,181,94,213,90,174,246,181,186,219,110,160,0,4,2,2,32,0,0,130,130,34,18,160,0,0,0,0,0,0,0,0,0,0,0,
+255,255,125,253,253,255,238,238,246,187,93,222,215,119,189,213,91,106,183,86,218,149,86,215,109,181,112,0,16,8,32,128,64,0,80,40,137,64,0,0,0,0,0,0,0,0,0,0,0,0,
+219,119,239,111,183,181,127,187,95,239,247,107,253,218,234,173,213,171,90,235,107,118,235,89,170,214,172,0,129,64,132,5,8,1,5,2,32,21,64,0,0,0,0,0,0,0,0,0,0,0,
+255,222,255,253,255,255,213,239,245,122,221,254,175,127,190,214,186,221,171,93,93,171,93,110,183,91,180,0,4,2,0,32,0,0,72,80,10,64,16,0,0,0,0,0,0,0,0,0,0,0,
+182,255,181,183,221,190,255,122,191,223,191,87,251,213,235,123,87,106,237,107,106,221,171,85,90,173,91,0,64,16,17,0,64,5,17,5,64,137,64,0,0,0,0,0,0,0,0,0,0,0,
+255,246,255,255,127,235,171,175,235,117,235,253,110,255,125,74,234,173,86,173,173,106,237,182,237,245,173,129,17,0,132,18,16,0,68,80,42,34,0,0,0,0,0,0,0,0,0,0,0,0,
+237,191,238,221,246,255,254,251,126,223,125,111,219,173,214,246,182,214,219,181,118,173,86,219,86,150,234,192,4,74,0,64,64,4,129,5,0,136,64,0,0,0,0,0,0,0,0,0,0,0,
+191,237,191,255,223,189,91,190,215,245,215,218,254,251,125,91,91,123,109,91,85,214,186,173,106,235,55,68,64,0,33,4,0,8,40,64,72,33,16,0,0,0,0,0,0,0,0,0,0,0,
+251,127,251,109,251,247,246,235,253,95,125,191,171,175,219,170,213,170,181,173,174,187,213,181,187,93,218,160,1,16,136,16,128,2,130,21,18,132,64,0,0,0,0,0,0,0,0,0,0,0,
+239,246,239,255,111,126,223,190,175,247,215,234,254,250,246,183,110,173,170,245,117,85,90,214,205,106,171,82,40,2,0,64,16,40,40,128,64,33,0,0,0,0,0,0,0,0,0,0,0,0,
+254,223,254,237,255,219,186,235,250,221,125,127,183,191,189,90,181,118,222,150,171,182,175,107,117,173,109,128,128,136,4,2,64,2,2,42,21,8,80,0,0,0,0,0,0,0,0,0,0,0,
+187,253,183,191,219,127,239,191,111,187,223,214,237,234,238,235,86,170,171,123,181,91,117,93,86,214,182,136,2,32,81,16,0,168,164,128,128,69,0,0,0,0,0,0,0,0,0,0,0,0,
+239,183,254,251,127,246,187,237,218,239,117,125,191,127,187,93,187,183,117,170,221,234,170,213,181,107,218,32,32,1,0,1,16,2,16,42,41,16,64,0,0,0,0,0,0,0,0,0,0,0,
+254,255,111,239,251,191,238,191,127,189,223,215,235,171,238,213,85,90,173,86,170,173,219,110,219,186,106,2,136,132,4,72,1,72,133,0,130,69,16,0,0,0,0,0,0,0,0,0,0,0,
+219,251,251,191,190,251,123,235,214,247,118,253,190,254,187,107,182,235,107,123,109,182,173,181,86,173,168,136,0,16,32,0,136,16,32,82,40,16,64,0,0,0,0,0,0,0,0,0,0,0,
+255,175,190,250,239,239,174,189,125,221,221,183,119,183,238,182,219,90,181,170,182,213,118,171,106,214,212,0,34,64,130,68,34,133,18,4,2,132,0,0,0,0,0,0,0,0,0,0,0,0,
+189,254,247,239,251,189,251,239,219,119,119,221,221,221,123,90,173,109,222,173,213,91,170,221,189,107,96,66,0,4,8,16,8,32,132,161,80,33,80,0,0,0,0,0,0,0,0,0,0,0,
+239,251,223,191,190,255,95,123,127,221,253,119,246,247,175,173,181,170,170,234,182,237,91,106,203,181,130,16,137,16,64,129,34,74,32,8,4,136,0,0,0,0,0,0,0,0,0,0,0,0,
+253,175,253,253,247,237,245,221,213,119,175,222,191,189,250,234,214,183,107,94,219,85,173,173,117,93,16,0,0,1,2,4,64,128,138,162,162,37,64,0,0,0,0,0,0,0,0,0,0,0,
+223,254,239,223,191,191,111,119,127,222,250,251,213,215,95,55,91,90,181,171,85,182,246,182,174,212,2,73,36,132,16,32,20,40,32,8,8,128,16,0,0,0,0,0,0,0,0,0,0,0,
+246,247,189,246,251,247,221,221,235,123,175,174,255,125,245,218,237,235,94,213,110,171,85,91,181,104,144,0,0,32,64,133,66,130,138,146,66,42,128,0,0,0,0,0,0,0,0,0,0,0,
+223,190,255,127,238,222,247,119,190,238,251,123,173,223,111,85,85,45,234,187,181,125,91,234,214,160,1,18,34,1,4,16,16,36,32,32,144,128,32,0,0,0,0,0,0,0,0,0,0,0,
+253,247,237,219,191,255,93,253,235,187,183,238,251,117,221,187,182,218,171,85,86,202,237,45,90,130,68,0,8,36,1,4,132,129,9,10,10,18,128,0,0,0,0,0,0,0,0,0,0,0,
+223,223,191,254,251,117,247,175,127,238,253,123,183,223,119,109,91,109,93,182,219,119,85,214,208,0,16,72,128,128,40,81,34,40,66,64,160,68,32,0,0,0,0,0,0,0,0,0,0,0,
+246,253,251,111,239,223,190,245,173,123,175,175,238,245,253,170,234,182,234,219,109,85,110,186,2,18,1,0,34,9,2,4,16,130,40,20,9,16,128,0,0,0,0,0,0,0,0,0,0,0,
+191,239,191,253,190,254,235,191,251,222,250,250,187,191,87,183,91,171,86,173,85,182,145,0,72,64,132,4,128,32,168,161,68,40,130,129,32,68,32,0,0,0,0,0,0,0,0,0,0,0,
+251,125,237,223,251,247,190,237,94,235,223,223,238,235,253,218,173,109,187,117,186,219,64,1,0,4,32,64,21,10,2,20,17,2,32,40,138,17,0,0,0,0,0,0,0,0,0,0,0,0,
+239,239,191,123,191,190,239,187,247,191,117,117,123,190,175,85,213,181,85,170,215,85,132,80,2,32,1,18,64,64,144,129,4,72,138,130,33,68,64,0,0,0,0,0,0,0,0,0,0,0,
+190,253,251,254,246,247,186,239,93,237,223,223,222,235,251,186,186,214,218,183,90,218,129,4,72,130,72,0,21,20,10,36,81,17,16,40,132,17,16,0,0,0,0,0,0,0,0,0,0,0,
+251,223,239,219,255,222,239,189,247,119,117,187,119,190,221,215,87,91,110,218,235,110,144,0,0,8,0,68,128,65,64,136,132,68,66,66,17,4,64,0,0,0,0,0,0,0,0,0,0,0,
+239,246,190,255,183,127,186,239,125,189,223,238,221,247,183,106,234,170,169,85,45,171,4,73,34,32,34,0,41,20,40,34,17,16,17,8,68,80,0,0,0,0,0,0,0,0,0,0,0,0,
+254,223,251,221,253,246,239,187,175,215,122,187,247,93,253,221,93,224,0,0,0,53,144,0,8,1,0,34,66,33,2,136,68,5,68,34,17,5,80,0,0,0,0,0,0,0,0,0,0,0,
+187,253,239,247,183,255,189,238,245,125,239,239,93,247,87,107,170,160,0,0,0,6,129,33,0,136,18,8,16,132,72,33,16,160,17,8,132,80,0,0,0,0,0,0,0,0,0,0,0,0,
+239,183,190,223,255,109,239,123,191,223,122,221,247,109,253,213,109,160,0,0,0,1,68,4,34,1,0,128,132,33,18,132,66,21,68,66,33,2,144,0,0,0,0,0,0,0,0,0,0,0,
+254,255,251,253,187,255,123,174,237,117,223,183,125,255,111,110,182,160,0,0,0,0,0,16,0,36,72,34,34,136,64,33,16,128,17,16,148,40,32,0,0,0,0,0,0,0,0,0,0,0,
+219,237,191,119,239,182,221,251,187,223,117,253,215,85,219,218,218,224,0,0,0,0,33,65,36,0,1,0,16,34,20,136,68,73,4,68,1,2,64,0,0,0,0,0,0,0,0,0,0,0,
+255,191,239,223,126,255,238,190,239,119,223,87,125,255,126,235,107,80,0,0,0,0,8,0,0,144,36,17,68,136,129,34,18,16,160,17,80,80,128,0,0,0,0,0,0,0,0,0,0,0,
+222,253,251,125,251,237,119,235,251,221,117,253,215,183,215,109,173,160,0,0,0,0,0,18,34,2,128,68,17,2,40,9,64,132,10,132,5,4,32,0,0,0,0,0,0,0,0,0,0,0,
+247,239,111,247,223,191,221,190,174,247,223,111,126,237,125,214,182,160,0,0,0,0,34,64,128,32,1,0,68,80,130,160,20,81,64,81,80,81,0,0,0,0,0,0,0,0,0,0,0,0,
+190,253,254,255,123,251,119,107,251,189,119,187,219,191,219,122,218,224,0,0,0,0,0,4,8,132,36,1,16,10,40,10,129,4,21,4,5,4,64,0,0,0,0,0,0,0,0,0,0,0,
+251,223,219,221,238,223,221,255,110,239,221,238,246,234,247,214,171,80,0,0,0,0,18,32,32,0,128,36,5,64,130,64,40,65,64,65,32,65,16,0,0,0,0,0,0,0,0,0,0,0,
+239,247,127,247,255,250,247,173,223,186,247,123,191,191,189,235,117,160,0,0,0,0,0,129,2,34,8,128,160,20,33,20,130,40,20,20,74,20,64,0,0,0,0,0,0,0,0,0,0,0,
+190,221,253,191,119,111,189,251,117,239,189,222,234,246,239,122,218,208,0,0,0,0,34,8,8,136,32,8,10,129,8,65,17,5,65,65,0,129,0,0,0,0,0,0,0,0,0,0,0,0,
+251,255,215,251,223,254,239,95,222,185,215,119,191,187,187,173,87,96,0,0,0,0,0,1,32,0,2,33,32,40,165,18,68,80,18,20,42,40,80,0,0,0,0,0,0,0,0,0,0,0,
+239,183,127,111,125,187,187,245,123,235,125,218,237,238,237,247,106,160,0,0,0,0,16,144,2,17,8,0,9,2,0,64,17,2,64,129,0,133,0,0,0,0,0,0,0,0,0,0,0,0,
+254,255,253,253,247,239,238,191,222,249,223,127,187,123,190,181,187,96,0,0,0,0,4,4,64,64,64,136,162,80,148,21,68,72,138,40,82,32,64,0,0,0,0,0,0,0,0,0,0,0,
+187,237,183,223,222,254,187,213,235,169,245,214,239,175,235,237,85,160,0,0,0,0,16,64,8,4,2,34,8,10,33,64,17,18,32,130,8,137,16,0,0,0,0,0,0,0,0,0,0,0,
+239,191,255,123,255,223,238,255,126,249,95,125,250,250,191,118,218,160,0,0,0,0,1,9,34,32,144,0,66,160,132,18,64,64,138,36,162,34,32,0,0,0,0,0,0,0,0,0,0,0,
+254,251,109,254,237,245,123,173,175,177,245,239,95,223,237,219,111,96,0,0,0,0,32,0,0,130,1,8,40,4,33,68,21,10,0,128,8,8,128,0,0,0,0,0,0,0,0,0,0,0,
+219,239,255,219,191,127,222,251,250,233,191,117,245,117,123,122,169,160,0,0,0,0,4,68,68,8,16,33,2,81,8,17,64,64,168,42,161,66,16,0,0,0,0,0,0,0,0,0,0,0,
+255,190,238,255,251,222,235,182,175,176,235,223,95,223,223,219,118,208,0,0,0,0,17,16,0,32,132,128,80,132,69,64,18,20,2,128,8,40,64,0,0,0,0,0,0,0,0,0,0,0,
+222,251,251,221,223,251,190,255,250,241,190,247,246,246,234,237,171,96,0,0,0,0,0,1,34,0,0,9,4,17,16,21,68,129,80,37,34,130,0,0,0,0,0,0,0,0,0,0,0,0,
+247,239,191,247,253,190,239,170,223,176,237,189,111,95,127,186,181,64,0,0,0,0,4,68,8,68,72,32,73,68,68,128,16,84,5,8,68,32,160,0,0,0,0,0,0,0,0,0,0,0,
+191,126,238,223,111,239,186,255,181,224,251,215,219,245,214,238,222,224,0,0,0,0,32,0,32,1,1,0,16,16,17,37,5,1,32,161,16,138,0,0,0,0,0,0,0,0,0,0,0,0,
+251,251,251,253,253,189,239,182,255,112,222,253,126,223,125,187,107,80,0,0,0,0,2,34,2,72,16,10,133,66,132,16,80,72,74,8,66,32,160,0,0,0,0,0,0,0,0,0,0,0,
+239,111,191,119,183,255,123,221,213,208,235,175,215,118,239,237,170,160,0,0,0,0,16,136,136,0,66,64,32,16,81,69,4,18,0,133,8,138,0,0,0,0,0,0,0,0,0,0,0,0,
+189,254,247,255,255,109,221,119,127,96,190,250,253,223,186,189,91,96,0,0,0,0,2,0,0,68,0,0,138,69,4,0,81,65,84,32,66,32,144,0,0,0,0,0,0,0,0,0,0,0,
+255,219,254,221,187,255,119,223,219,224,239,183,183,117,239,246,237,160,0,0,0,0,32,2,34,1,18,72,32,136,65,42,4,20,1,20,40,132,32,0,0,0,0,0,0,0,0,0,0,0,
+238,255,183,247,239,183,221,245,118,160,122,238,237,255,123,93,86,160,0,0,0,0,4,80,8,36,0,2,10,33,20,0,161,64,148,65,2,17,0,0,0,0,0,0,0,0,0,0,0,0,
+251,238,254,222,254,253,119,95,223,224,111,187,191,85,221,247,106,224,0,0,0,0,0,23,213,170,249,16,128,4,0,164,8,18,33,20,168,68,64,0,0,0,0,0,0,0,0,0,0,0,
+191,191,239,255,219,239,221,246,245,96,122,254,235,255,111,125,183,80,0,0,0,0,0,44,182,221,168,0,32,128,66,0,2,132,132,64,2,17,16,0,0,0,0,0,0,0,0,0,0,0,
+238,246,251,119,127,190,247,93,191,192,111,171,190,173,251,214,170,160,0,0,0,0,0,55,91,106,172,146,8,17,16,9,72,32,33,18,144,132,64,0,0,0,0,0,0,0,0,0,0,0,
+251,255,191,253,246,251,189,247,214,192,123,254,247,251,93,125,189,208,0,0,0,0,0,21,173,87,112,0,130,64,0,128,2,74,136,64,36,81,0,0,0,0,0,0,0,0,0,0,0,0,
+223,182,237,183,223,239,111,190,253,192,93,87,221,111,247,214,213,96,0,0,0,0,0,45,117,186,172,68,16,4,68,34,16,128,34,21,2,4,32,0,0,0,0,0,0,0,0,0,0,0,
+253,255,255,255,127,127,250,235,175,64,111,253,119,221,93,191,86,160,0,0,0,0,0,22,173,107,180,0,64,145,0,128,66,41,8,128,80,160,128,0,0,0,0,0,0,0,0,0,0,0,
+183,183,119,109,245,246,175,190,251,192,58,183,221,183,247,245,107,96,0,0,0,0,0,59,107,173,88,146,4,0,18,9,4,2,66,42,10,10,32,0,0,0,0,0,0,0,0,0,0,0,
+255,253,253,255,223,223,251,119,174,192,63,237,247,253,189,95,189,160,0,0,0,0,0,21,181,106,232,0,16,4,64,0,1,80,40,128,160,160,128,0,0,0,0,0,0,0,0,0,0,0,
+237,191,223,222,255,125,93,221,251,128,53,191,93,87,215,245,85,96,0,0,0,0,0,45,93,183,84,136,129,80,4,72,72,5,2,36,8,9,32,0,0,0,0,0,0,0,0,0,0,0,
+191,237,247,123,247,247,247,247,94,192,62,235,247,253,125,191,107,80,0,0,0,0,0,22,230,170,184,0,4,1,16,1,2,160,80,137,66,160,0,0,0,0,0,0,0,0,0,0,0,0,
+253,191,125,255,125,190,221,93,247,128,43,190,189,183,223,107,181,160,0,0,0,0,0,59,91,118,212,73,32,4,1,36,16,10,4,32,16,10,160,0,0,0,0,0,0,0,0,0,0,0,
+239,251,223,219,223,251,247,247,93,128,62,247,215,221,245,254,174,208,0,0,0,0,0,21,109,171,105,0,1,32,68,0,69,32,162,133,69,64,0,0,0,0,0,0,0,0,0,0,0,0,
+253,223,247,127,246,223,93,189,246,128,27,221,125,119,95,87,106,160,0,0,0,0,0,45,181,93,172,17,20,1,0,33,0,74,8,32,16,21,32,0,0,0,0,0,0,0,0,0,0,0,
+183,125,189,246,223,253,247,215,191,128,55,119,223,221,245,253,182,224,0,0,0,0,0,22,214,234,176,64,64,36,17,4,9,0,162,10,133,64,64,0,0,0,0,0,0,0,0,0,0,0,
+255,247,255,223,253,183,93,125,235,0,29,221,117,127,95,111,91,64,0,0,0,0,0,58,171,86,220,4,1,0,64,16,32,82,8,160,32,18,0,0,0,0,0,0,0,0,0,0,0,0,
+221,222,219,125,183,255,247,223,125,128,31,119,223,213,247,219,213,96,0,0,0,0,0,22,221,107,104,129,16,17,4,128,133,4,66,10,138,65,80,0,0,0,0,0,0,0,0,0,0,0,
+247,255,255,247,255,109,125,245,175,0,21,222,246,255,122,253,110,160,0,0,0,0,0,43,107,93,168,16,4,128,16,4,0,81,16,160,32,136,0,0,0,0,0,0,0,0,0,0,0,0,
+223,109,183,191,119,255,215,95,251,0,31,123,189,173,223,87,181,224,0,0,0,0,0,26,181,181,90,66,64,8,65,32,37,4,68,9,10,37,32,0,0,0,0,0,0,0,0,0,0,0,
+253,255,253,251,222,221,189,245,93,0,23,222,239,251,107,253,170,160,0,0,0,0,0,45,218,214,232,0,8,66,0,4,128,65,17,66,64,128,64,0,0,0,0,0,0,0,0,0,0,0,
+239,182,223,191,127,247,239,95,247,0,13,119,186,175,254,215,222,160,0,0,0,0,0,22,174,181,89,18,33,0,18,32,10,20,4,16,40,42,0,0,0,0,0,0,0,0,0,0,0,0,
+190,255,251,237,246,254,187,246,189,0,31,221,239,251,91,189,107,96,0,0,0,0,0,58,213,219,168,0,0,18,64,2,32,129,81,69,2,128,160,0,0,0,0,0,0,0,0,0,0,0,
+251,247,110,255,223,187,238,189,239,0,10,246,186,222,246,247,181,160,0,0,0,0,0,22,182,173,116,145,18,64,4,144,4,84,4,16,80,36,0,0,0,0,0,0,0,0,0,0,0,0,
+239,189,255,183,125,239,123,239,186,0,15,191,239,183,191,189,214,160,0,0,0,0,0,43,90,214,168,4,64,4,64,1,17,1,33,5,5,9,64,0,0,0,0,0,0,0,0,0,0,0,
+190,247,221,253,247,255,174,218,239,0,10,234,187,125,234,239,106,224,0,0,0,0,0,26,235,107,108,128,2,16,8,136,64,72,72,80,80,64,16,0,0,0,0,0,0,0,0,0,0,0,
+251,255,127,223,223,109,251,255,186,0,15,191,239,215,127,187,221,80,0,0,0,0,0,45,173,181,176,33,16,65,32,0,5,18,5,4,5,21,64,0,0,0,0,0,0,0,0,0,0,0,
+239,187,246,251,125,255,94,170,238,0,6,235,122,253,214,238,235,160,0,0,0,0,0,54,182,174,220,8,1,4,2,73,16,65,80,81,64,64,0,0,0,0,0,0,0,0,0,0,0,0,
+254,239,223,223,247,182,247,255,190,0,13,190,223,175,125,251,85,96,0,0,0,0,0,43,90,213,81,0,136,0,8,0,66,20,4,4,42,20,160,0,0,0,0,0,0,0,0,0,0,0,
+187,254,251,125,223,255,221,86,244,0,7,237,245,251,215,95,251,80,0,0,0,0,0,45,171,118,220,68,32,72,160,136,4,128,145,81,0,129,0,0,0,0,0,0,0,0,0,0,0,0,
+239,187,223,247,253,219,119,253,222,0,6,191,95,93,125,234,173,160,0,0,0,0,0,53,117,155,104,16,2,0,2,2,16,82,34,4,84,84,32,0,0,0,0,0,0,0,0,0,0,0,
+254,255,125,223,119,127,221,183,116,0,7,235,246,247,223,127,234,224,0,0,0,0,0,45,174,237,84,1,16,68,128,32,130,4,136,65,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
+219,237,247,253,223,246,247,221,222,0,5,126,189,221,235,218,219,64,0,0,0,0,0,106,213,85,184,136,65,0,16,132,8,160,33,20,72,72,80,0,0,0,0,0,0,0,0,0,0,0,
+255,191,223,111,253,223,93,119,244,0,7,215,239,119,126,239,181,96,0,0,0,0,0,55,109,182,212,32,4,18,4,0,66,10,132,65,5,18,0,0,0,0,0,0,0,0,0,0,0,0,
+222,251,253,253,183,253,247,222,188,0,3,125,117,221,171,187,110,160,0,0,0,0,0,90,182,219,88,2,16,64,64,73,0,160,17,20,32,65,64,0,0,0,0,0,0,0,0,0,0,0,
+247,239,119,183,255,119,189,247,212,0,6,239,223,127,254,239,245,224,0,0,0,0,0,109,171,85,105,16,128,4,18,0,20,9,68,64,149,8,16,0,0,0,0,0,0,0,0,0,0,0,
+191,127,223,255,125,222,239,93,124,0,3,186,247,213,91,186,182,160,0,0,0,0,0,182,221,109,172,64,4,128,128,34,1,66,17,18,0,69,64,0,0,0,0,0,0,0,0,0,0,0,
+251,246,253,187,239,255,187,247,216,0,3,239,93,127,246,239,235,80,0,0,0,0,0,170,170,182,216,4,80,18,8,128,68,16,68,4,169,16,0,0,0,0,0,0,0,0,0,0,0,0,
+239,127,239,239,189,182,238,189,248,0,2,187,247,218,223,189,189,96,0,0,0,0,0,219,119,171,104,129,1,0,32,8,17,69,16,160,2,34,80,0,0,0,0,0,0,0,0,0,0,0,
+189,219,125,254,247,255,187,238,172,0,3,238,221,127,186,247,106,160,0,0,0,0,1,109,170,221,88,16,4,32,130,33,2,16,66,21,72,136,128,0,0,0,0,0,0,0,0,0,0,0,
+255,255,223,119,255,118,238,187,248,0,2,187,191,213,239,221,247,208,0,0,0,0,1,85,90,170,212,132,64,10,0,128,68,68,136,128,16,34,16,0,0,0,0,0,0,0,0,0,0,0,
+238,237,247,223,109,255,187,238,216,0,1,238,234,255,123,119,90,96,0,0,0,0,2,219,183,119,104,0,17,0,18,9,1,16,34,41,69,8,64,0,0,0,0,0,0,0,0,0,0,0,
+251,191,125,253,255,218,254,219,176,0,3,127,191,171,174,221,251,160,0,0,0,0,3,109,90,170,186,73,0,64,128,0,20,69,8,130,16,66,0,0,0,0,0,0,0,0,0,0,0,0,
+191,251,239,119,183,127,171,254,248,0,1,213,237,254,251,247,181,80,0,0,0,0,5,181,171,109,168,0,36,18,8,146,1,0,66,36,66,40,160,0,0,0,0,0,0,0,0,0,0,0,
+238,239,191,223,253,238,254,171,208,0,1,190,187,91,190,190,238,224,0,0,0,0,10,173,117,182,217,16,128,128,32,0,68,42,40,129,8,130,0,0,0,0,0,0,0,0,0,0,0,0,
+251,254,251,125,191,251,219,254,248,0,1,247,239,246,235,235,187,64,0,0,0,0,13,182,222,218,168,2,4,8,130,68,16,128,130,20,66,32,160,0,0,0,0,0,0,0,0,0,0,0,
+223,183,239,247,238,223,119,91,160,0,0,187,122,191,190,222,250,160,0,0,0,0,22,213,82,171,116,144,32,64,8,0,130,42,32,65,16,138,0,0,0,0,0,0,0,0,0,0,0,0,
+253,255,125,223,123,253,221,247,112,0,1,238,223,234,235,251,173,224,0,0,0,0,123,91,189,181,168,1,2,4,64,34,8,128,138,20,68,32,144,0,0,0,0,0,0,0,0,0,0,0,
+183,183,247,253,255,183,119,109,240,0,0,219,246,191,190,174,250,160,0,0,0,0,149,109,86,222,186,68,16,33,2,136,34,36,33,65,18,138,0,0,0,0,0,0,0,0,0,0,0,0,
+255,253,191,119,219,255,223,223,80,0,0,255,93,237,247,251,223,80,0,0,0,1,109,181,213,101,212,0,65,0,16,0,128,130,136,16,0,32,160,0,0,0,0,0,0,0,0,0,0,0,
+237,191,251,223,126,221,122,247,240,0,0,213,247,187,93,111,117,96,0,0,0,7,182,214,187,90,168,36,4,18,0,34,4,40,34,138,170,132,0,0,0,0,0,0,0,0,0,0,0,0,
+191,237,175,125,247,247,239,93,96,0,0,255,93,239,247,221,221,160,0,0,0,58,171,91,85,173,106,0,128,64,73,0,17,2,8,32,0,33,64,0,0,0,0,0,0,0,0,0,0,0,
+251,127,255,247,223,127,123,247,160,0,0,173,247,122,221,183,118,208,0,0,2,213,186,173,182,247,184,144,17,4,0,16,132,80,162,69,84,136,16,0,0,0,0,0,0,0,0,0,0,0,
+239,246,251,127,125,237,221,125,224,0,0,251,189,223,191,125,222,171,109,182,253,174,214,245,91,42,168,2,68,16,146,66,1,4,8,16,1,18,128,0,0,0,0,0,0,0,0,0,0,0,
+254,223,191,221,247,255,111,215,96,0,0,110,239,117,235,219,246,221,182,219,74,213,91,86,237,218,218,32,0,0,0,0,36,73,66,132,148,64,32,0,0,0,0,0,0,0,0,0,0,0,
+187,251,237,247,223,111,250,253,224,0,0,223,187,223,125,126,189,106,213,85,119,118,234,171,85,109,104,4,136,132,136,146,1,0,16,33,0,21,0,0,0,0,0,0,0,0,0,0,0,0,
+239,191,127,127,125,250,175,175,64,0,0,117,238,245,215,215,215,182,173,182,170,171,91,125,109,87,89,16,0,32,0,0,72,85,69,20,82,128,80,0,0,0,0,0,0,0,0,0,0,0,
+254,247,247,239,247,223,250,251,224,0,0,126,187,191,125,253,125,91,118,219,182,221,109,165,182,218,212,64,68,132,68,68,2,0,16,65,4,41,0,0,0,0,0,0,0,0,0,0,0,0,
+219,253,189,189,223,126,175,174,192,0,0,87,238,235,223,87,222,213,171,108,219,107,85,90,213,107,104,4,16,1,17,0,136,170,69,16,81,2,64,0,0,0,0,0,0,0,0,0,0,0,
+255,183,247,255,127,247,251,251,64,0,0,125,123,190,235,253,247,109,90,171,109,85,182,239,91,181,89,17,1,16,0,18,2,0,144,69,4,80,16,0,0,0,0,0,0,0,0,0,0,0,
+222,255,127,109,246,221,190,175,192,0,0,55,222,235,189,87,90,182,237,182,171,110,219,85,109,91,172,0,32,4,32,64,32,146,4,16,65,5,64,0,0,0,0,0,0,0,0,0,0,0,
+247,237,237,255,223,255,107,250,192,0,0,109,183,190,239,253,255,171,86,219,109,181,85,186,181,173,112,68,4,64,133,0,138,32,161,69,20,80,0,0,0,0,0,0,0,0,0,0,0,0,
+191,127,255,238,253,183,254,191,192,0,0,63,125,239,187,95,85,109,107,85,181,91,110,215,214,214,172,0,145,8,0,18,0,138,8,16,65,5,32,0,0,0,0,0,0,0,0,0,0,0,
+251,239,110,251,247,253,87,234,128,0,0,53,215,122,238,245,255,181,181,109,91,109,181,90,91,117,217,34,0,1,16,64,36,32,146,132,16,32,64,0,0,0,0,0,0,0,0,0,0,0,
+239,123,251,191,191,119,253,127,192,0,0,63,125,223,187,223,106,214,221,182,237,170,171,107,173,90,168,8,32,72,4,4,1,9,0,33,69,10,0,0,0,0,0,0,0,0,0,0,0,0,
+189,255,111,238,247,223,111,213,128,0,0,45,239,117,239,117,223,91,86,219,85,118,221,173,117,174,208,128,133,0,145,16,136,160,85,20,16,160,160,0,0,0,0,0,0,0,0,0,0,0,
+255,219,254,251,221,253,218,255,64,0,0,59,187,222,189,223,123,173,106,170,182,171,106,181,173,107,98,4,0,18,0,0,34,10,0,65,68,10,0,0,0,0,0,0,0,0,0,0,0,0,
+238,255,119,223,255,119,127,85,128,0,0,30,238,247,247,119,222,245,183,109,219,181,173,218,182,181,0,32,32,64,32,132,128,129,85,18,17,64,144,0,0,0,0,0,0,0,0,0,0,0,
+251,219,223,126,221,255,213,255,128,0,0,55,187,187,93,221,119,86,218,182,170,221,118,174,213,218,128,2,9,0,132,32,10,40,0,64,68,20,32,0,0,0,0,0,0,0,0,0,0,0,
+191,255,125,247,247,221,127,109,0,0,0,29,238,222,247,123,221,171,85,218,221,86,170,213,109,84,1,32,128,18,0,130,0,130,146,21,1,33,0,0,0,0,0,0,0,0,0,0,0,0,
+238,221,247,222,223,119,237,247,128,0,0,27,123,247,221,239,119,221,110,171,107,107,109,118,182,224,0,8,18,64,36,8,72,40,33,64,84,4,64,0,0,0,0,0,0,0,0,0,0,0,
+251,247,223,123,253,254,187,189,0,0,0,31,174,186,247,187,221,107,85,109,173,181,183,91,213,80,0,129,0,4,0,32,2,130,72,18,1,81,16,0,0,0,0,0,0,0,0,0,0,0,
+223,127,125,255,191,223,238,215,128,0,0,21,251,239,189,238,247,181,187,182,181,90,213,170,91,186,0,16,33,16,145,2,72,33,5,4,168,4,64,0,0,0,0,0,0,0,0,0,0,0,
+253,237,255,221,247,123,123,253,0,0,0,31,95,122,239,123,189,218,213,85,91,110,182,219,173,85,2,66,8,0,0,8,2,136,80,80,2,161,0,0,0,0,0,0,0,0,0,0,0,0,
+183,255,237,247,221,255,175,95,0,0,0,13,245,223,187,174,239,110,182,219,213,181,170,173,118,219,128,0,128,132,137,32,136,37,2,5,72,8,80,0,0,0,0,0,0,0,0,0,0,0,
+255,110,255,127,127,218,253,245,0,0,0,27,111,107,110,251,187,171,91,109,110,214,221,181,171,109,96,136,18,16,0,2,2,0,40,160,18,69,0,0,0,0,0,0,0,0,0,0,0,0,
+237,251,183,221,247,127,183,95,0,0,0,15,221,254,251,190,238,245,213,170,181,90,170,218,218,181,186,1,0,1,36,136,32,170,130,10,64,144,64,0,0,0,0,0,0,0,0,0,0,0,
+191,223,253,247,223,238,253,245,0,0,0,13,119,91,174,235,187,173,110,183,86,214,238,175,109,173,84,36,32,144,0,0,10,0,32,160,138,4,16,0,0,0,0,0,0,0,0,0,0,0,
+254,254,223,191,125,191,175,110,0,0,0,15,223,247,251,190,254,235,85,90,219,107,85,213,86,214,239,0,4,4,68,68,128,169,10,10,32,161,64,0,0,0,0,0,0,0,0,0,0,0,
+235,235,246,253,247,250,245,251,0,0,0,10,250,189,94,235,215,181,187,213,109,93,118,186,218,187,85,145,16,128,16,16,18,2,64,144,8,8,0,0,0,0,0,0,0,0,0,0,0,0,
+255,191,191,239,222,239,191,94,0,0,0,15,175,239,247,190,250,238,213,111,181,181,170,215,107,85,118,192,64,34,65,0,128,144,42,2,162,162,160,0,0,0,0,0,0,0,0,0,0,0,
+190,254,251,190,255,254,237,246,0,0,0,5,250,186,186,247,175,181,90,180,170,214,183,89,93,219,170,178,4,128,0,68,10,37,0,168,8,8,0,0,0,0,0,0,0,0,0,0,0,0,
+235,239,239,247,237,183,187,186,0,0,0,15,95,239,239,221,251,235,111,87,111,107,90,215,106,173,93,216,16,9,9,0,64,128,82,2,162,146,160,0,0,0,0,0,0,0,0,0,0,0,
+255,187,126,222,255,254,238,238,0,0,0,5,245,187,123,119,94,181,169,186,181,93,213,109,173,117,170,168,129,0,32,18,9,21,4,80,8,32,0,0,0,0,0,0,0,0,0,0,0,0,
+222,255,247,255,182,219,251,186,0,0,0,15,95,125,222,221,247,238,222,213,218,213,111,85,118,214,238,222,4,36,130,0,32,64,81,5,33,10,64,0,0,0,0,0,0,0,0,0,0,0,
+251,237,190,237,255,255,94,236,0,0,0,5,245,215,119,247,90,181,106,174,171,109,85,187,85,171,53,106,32,0,8,72,133,18,4,72,8,160,144,0,0,0,0,0,0,0,0,0,0,0,
+191,191,247,191,219,110,247,188,0,0,0,15,127,125,218,189,255,246,171,117,109,182,237,85,174,189,214,181,129,34,32,0,0,68,144,33,68,4,0,0,0,0,0,0,0,0,0,0,0,0,
+237,251,190,251,127,251,221,236,0,0,0,5,213,239,127,239,106,181,221,171,182,171,86,238,218,213,91,174,136,8,1,34,37,16,66,132,33,34,160,0,0,0,0,0,0,0,0,0,0,0,
+255,222,251,239,247,127,119,124,0,0,0,15,127,187,214,187,223,238,170,181,90,218,187,85,107,107,108,213,65,0,136,0,128,66,16,33,8,136,0,0,0,0,0,0,0,0,0,0,0,0,
+221,255,239,190,223,221,221,212,0,0,0,5,214,238,253,238,246,181,118,221,171,109,213,109,181,173,183,118,200,34,0,136,10,8,138,136,162,34,64,0,0,0,0,0,0,0,0,0,0,0,
+247,107,190,251,251,119,119,124,0,0,0,7,125,187,175,187,189,251,171,102,221,170,173,182,218,182,170,171,96,128,36,2,32,162,32,36,8,136,32,0,0,0,0,0,0,0,0,0,0,0,
+223,255,251,255,191,255,221,216,0,0,0,11,223,238,250,238,239,173,93,186,170,183,118,218,174,218,219,93,178,8,128,72,4,8,137,1,34,34,128,0,0,0,0,0,0,0,0,0,0,0,
+253,189,191,219,246,237,127,116,0,0,0,6,245,123,175,191,186,250,234,171,118,218,171,86,213,107,109,181,80,32,2,0,129,66,32,168,136,128,32,0,0,0,0,0,0,0,0,0,0,0,
+223,247,238,254,223,191,235,216,0,0,0,11,191,222,251,234,239,183,86,213,171,109,218,181,109,173,170,214,216,130,40,34,20,16,138,2,34,21,0,0,0,0,0,0,0,0,0,0,0,0,
+247,126,251,219,253,253,189,120,0,0,0,6,234,235,222,191,187,218,187,110,221,86,173,219,182,214,182,181,108,0,128,128,1,36,32,144,128,64,64,0,0,0,0,0,0,0,0,0,0,0,
+189,239,191,127,183,239,239,216,0,0,0,11,191,191,119,237,238,251,85,85,107,181,118,173,91,122,219,91,180,36,2,8,144,130,132,36,42,21,16,0,0,0,0,0,0,0,0,0,0,0,
+255,251,239,246,255,125,118,240,0,0,0,6,234,237,221,123,123,88,0,0,0,91,170,213,170,171,106,237,85,0,32,32,4,40,17,2,128,128,64,0,0,0,0,0,0,0,0,0,0,0,
+238,222,251,191,251,239,187,184,0,0,0,11,191,187,119,175,175,248,0,0,0,5,91,110,219,85,173,85,182,17,4,2,66,129,68,80,36,84,0,0,0,0,0,0,0,0,0,0,0,0,
+187,255,222,251,175,189,238,232,0,0,0,6,246,239,221,250,250,216,0,0,0,0,173,181,109,186,183,110,218,64,16,136,8,20,17,10,137,1,80,0,0,0,0,0,0,0,0,0,0,0,
+255,182,255,223,254,255,123,176,0,0,0,11,189,250,247,111,223,184,0,0,0,0,54,171,86,215,90,181,87,4,128,32,129,65,4,64,32,72,0,0,0,0,0,0,0,0,0,0,0,0,
+238,255,237,251,123,237,222,240,0,0,0,5,239,95,189,221,118,236,0,0,0,0,10,221,186,170,235,91,106,128,4,130,20,16,81,18,10,34,160,0,0,0,0,0,0,0,0,0,0,0,
+251,237,191,111,223,191,119,176,0,0,0,13,181,246,239,119,221,220,0,0,0,0,3,106,213,189,90,237,187,18,64,0,1,5,4,68,160,136,0,0,0,0,0,0,0,0,0,0,0,0,
+191,191,247,254,253,247,221,224,0,0,0,6,255,93,187,221,247,116,0,0,0,0,1,173,90,214,215,85,85,128,18,16,132,80,80,16,9,2,144,0,0,0,0,0,0,0,0,0,0,0,
+238,251,125,219,239,221,119,112,0,0,0,11,173,247,238,247,93,252,0,0,0,0,0,182,239,107,106,182,218,145,0,68,33,5,5,69,66,80,32,0,0,0,0,0,0,0,0,0,0,0,
+251,239,223,127,189,255,221,208,0,0,0,5,123,189,123,189,247,172,0,0,0,0,0,213,169,90,187,91,110,192,34,0,4,80,64,16,16,10,128,0,0,0,0,0,0,0,0,0,0,0,
+223,190,251,253,247,118,247,96,0,0,0,11,222,239,222,239,94,246,0,0,0,0,0,54,183,109,173,237,85,68,128,34,65,4,149,66,69,64,16,0,0,0,0,0,0,0,0,0,0,0,
+254,251,239,215,223,223,189,224,0,0,0,5,119,186,235,187,247,188,0,0,0,0,0,43,90,182,213,43,109,160,9,0,20,33,0,8,144,20,128,0,0,0,0,0,0,0,0,0,0,0,
+183,239,190,255,125,253,215,96,0,0,0,14,237,239,190,238,189,214,0,0,0,0,0,61,173,213,109,218,182,196,32,18,1,8,84,162,4,129,32,0,0,0,0,0,0,0,0,0,0,0,
+254,254,251,221,247,183,125,224,0,0,0,5,190,186,239,187,238,254,0,0,0,0,0,10,246,173,182,173,219,96,128,128,132,69,1,8,162,40,0,0,0,0,0,0,0,0,0,0,0,0,
+239,187,239,127,223,255,223,64,0,0,0,6,235,239,186,238,219,170,0,0,0,0,0,22,149,118,170,246,170,162,8,8,33,16,72,34,8,130,160,0,0,0,0,0,0,0,0,0,0,0,
+187,239,191,246,253,186,245,224,0,0,0,10,255,123,239,187,254,254,0,0,0,0,0,11,109,171,109,85,109,176,2,65,4,68,18,136,66,40,0,0,0,0,0,0,0,0,0,0,0,0,
+254,254,251,191,239,239,191,64,0,0,0,7,85,222,186,254,171,182,0,0,0,0,0,13,182,218,183,91,182,208,144,4,17,17,64,33,16,130,64,0,0,0,0,0,0,0,0,0,0,0,
+239,219,238,251,126,254,235,224,0,0,0,10,255,119,239,171,254,239,0,0,0,0,0,5,91,86,218,237,90,162,1,32,64,68,21,8,68,16,144,0,0,0,0,0,0,0,0,0,0,0,
+253,255,255,239,239,187,190,192,0,0,0,5,91,221,123,254,215,186,0,0,0,0,0,6,234,187,107,85,171,112,36,1,5,1,64,66,17,68,0,0,0,0,0,0,0,0,0,0,0,0,
+183,189,187,190,251,255,235,128,0,0,0,14,246,247,222,175,125,239,0,0,0,0,0,3,86,213,173,110,237,168,128,16,0,84,18,40,132,17,64,0,0,0,0,0,0,0,0,0,0,0,
+255,239,239,251,190,218,190,192,0,0,0,5,95,93,119,251,219,125,0,0,0,0,0,5,109,109,107,85,86,178,1,4,74,1,4,130,81,68,32,0,0,0,0,0,0,0,0,0,0,0,
+221,189,190,223,239,255,237,192,0,0,0,6,245,247,221,93,119,175,0,0,0,0,0,3,182,182,181,187,106,208,20,65,0,168,80,32,4,17,0,0,0,0,0,0,0,0,0,0,0,0,
+247,247,251,253,251,110,247,128,0,0,0,11,95,189,247,247,221,251,0,0,0,0,0,2,171,213,221,109,187,104,128,8,18,2,5,10,161,4,64,0,0,0,0,0,0,0,0,0,0,0,
+222,255,127,111,111,251,189,128,0,0,0,5,186,239,93,93,247,111,128,0,0,0,0,2,218,90,171,170,173,180,1,0,64,145,80,64,8,81,16,0,0,0,0,0,0,0,0,0,0,0,
+255,187,237,253,254,239,215,128,0,0,0,13,111,187,247,247,94,250,128,0,0,0,0,3,109,238,213,109,181,88,72,36,4,68,4,149,69,4,64,0,0,0,0,0,0,0,0,0,0,0,
+237,239,191,239,223,190,253,128,0,0,0,6,251,238,189,189,247,175,128,0,0,0,0,1,86,171,110,182,214,209,0,129,17,17,33,0,16,80,0,0,0,0,0,0,0,0,0,0,0,0,
+191,254,247,126,251,251,175,128,0,0,0,11,94,187,215,111,93,250,128,0,0,0,0,2,219,90,181,170,181,108,18,8,4,68,72,85,68,2,160,0,0,0,0,0,0,0,0,0,0,0,
+251,119,255,239,238,239,122,128,0,0,0,5,107,238,253,251,247,95,128,0,0,0,0,1,109,109,173,109,175,176,64,32,129,17,5,0,17,80,0,0,0,0,0,0,0,0,0,0,0,0,
+239,222,219,123,127,191,223,128,0,0,0,11,94,187,175,93,125,245,128,0,0,0,0,1,181,182,214,182,212,172,1,2,36,64,80,73,4,5,64,0,0,0,0,0,0,0,0,0,0,0,
+190,251,255,239,237,250,245,0,0,0,0,5,187,238,251,247,215,95,192,0,0,0,0,1,170,213,123,219,119,116,136,8,1,10,2,16,161,80,16,0,0,0,0,0,0,0,0,0,0,0,
+251,239,182,254,255,239,191,128,0,0,0,14,222,251,182,221,125,245,64,0,0,0,0,1,111,91,74,85,90,168,0,128,20,33,72,132,20,5,64,0,0,0,0,0,0,0,0,0,0,0,
+239,190,255,187,183,126,235,0,0,0,0,5,107,175,239,119,215,191,192,0,0,0,0,1,181,109,187,182,213,220,72,34,64,136,18,34,129,32,0,0,0,0,0,0,0,0,0,0,0,0,
+254,255,237,239,253,247,189,0,0,0,0,6,190,250,187,221,253,214,192,0,0,0,0,1,90,181,109,91,91,105,2,0,4,34,64,136,36,20,160,0,0,0,0,0,0,0,0,0,0,0,
+187,237,191,254,239,190,239,0,0,0,0,11,91,175,238,247,87,125,128,0,0,0,0,1,173,214,170,237,109,84,16,146,33,8,138,34,65,65,0,0,0,0,0,0,0,0,0,0,0,0,
+239,191,251,119,191,247,187,0,0,0,0,5,222,253,189,189,253,219,224,0,0,0,0,1,118,181,219,85,181,184,64,0,132,162,32,136,20,16,32,0,0,0,0,0,0,0,0,0,0,0,
+254,251,111,223,250,222,238,0,0,0,0,13,107,215,119,215,95,126,192,0,0,0,0,1,170,219,109,182,214,213,4,68,0,8,136,34,129,5,0,0,0,0,0,0,0,0,0,0,0,0,
+219,239,254,253,223,255,187,0,0,0,0,6,190,253,221,125,245,215,160,0,0,0,0,1,91,85,86,219,91,88,1,0,37,66,5,8,40,160,160,0,0,0,0,0,0,0,0,0,0,0,
+255,190,247,239,127,117,238,0,0,0,0,11,87,175,119,239,191,125,224,0,0,0,0,1,109,187,181,85,109,108,72,17,0,16,80,65,4,20,0,0,0,0,0,0,0,0,0,0,0,0,
+222,251,223,125,245,255,122,0,0,0,0,5,186,251,222,186,235,219,96,0,0,0,0,1,181,86,219,109,181,170,0,64,21,69,5,20,81,65,64,0,0,0,0,0,0,0,0,0,0,0,
+247,239,253,247,223,221,222,0,0,0,0,10,207,174,251,239,190,247,160,0,0,0,0,0,214,234,173,182,214,216,68,4,128,16,80,65,4,8,16,0,0,0,0,0,0,0,0,0,0,0,
+191,126,223,191,127,119,118,0,0,0,0,13,123,123,174,251,235,189,224,0,0,0,0,1,91,93,181,91,91,108,17,16,4,133,2,20,81,34,128,0,0,0,0,0,0,0,0,0,0,0,
+251,251,246,251,245,255,223,255,255,255,255,247,221,238,251,174,190,239,96,0,0,0,0,1,173,106,214,234,173,85,0,1,33,32,72,129,4,8,64,0,0,0,0,0,0,0,0,0,0,0,
+239,111,191,239,191,221,117,251,239,187,182,222,239,123,182,251,237,187,176,0,0,0,0,1,117,173,107,86,245,180,32,136,4,20,18,40,65,66,16,0,0,0,0,0,0,0,0,0,0,0,
+189,254,251,190,255,119,223,94,186,238,255,247,123,222,255,174,191,237,224,0,0,0,0,1,174,215,93,187,86,216,132,32,145,65,64,130,20,40,128,0,0,0,0,0,0,0,0,0,0,0,
+255,219,239,251,235,255,123,235,239,187,170,187,221,119,170,251,234,191,112,0,0,0,0,0,179,106,234,213,90,172,0,130,0,8,20,40,129,2,32,0,0,0,0,0,0,0,0,0,0,0,
+238,255,189,191,191,123,221,126,187,126,255,222,239,221,255,190,255,235,176,0,0,0,0,1,221,93,86,173,214,212,36,0,10,162,129,2,40,72,128,0,0,0,0,0,0,0,0,0,0,0,
+251,238,255,237,253,222,247,215,239,215,181,119,117,183,86,235,170,254,240,0,0,0,0,1,85,171,187,118,187,116,128,36,64,8,40,160,130,34,32,0,0,0,0,0,0,0,0,0,0,0,
+191,191,237,191,223,251,189,125,122,250,255,221,223,125,253,222,255,171,176,0,0,0,0,1,109,117,85,170,213,172,9,0,9,34,130,10,40,136,128,0,0,0,0,0,0,0,0,0,0,0,
+238,246,255,251,119,111,215,215,223,175,171,119,118,239,111,123,173,254,248,0,0,0,0,1,182,219,109,91,90,180,64,18,66,8,40,144,130,34,16,0,0,0,0,0,0,0,0,0,0,0,
+251,255,182,239,253,254,253,253,117,253,254,253,223,187,187,222,251,87,168,0,0,0,0,1,85,85,182,237,173,170,2,64,8,162,2,34,36,128,64,0,0,0,0,0,0,0,0,0,0,0,
+223,182,255,190,223,219,175,87,223,87,91,175,117,238,238,247,183,253,248,0,0,0,0,1,110,222,213,86,214,216,32,1,32,8,168,136,128,42,16,0,0,0,0,0,0,0,0,0,0,0,
+253,255,237,251,251,127,123,253,245,253,247,245,255,123,187,186,253,87,88,0,0,0,0,1,181,106,183,106,187,108,136,136,5,66,2,2,42,129,64,0,0,0,0,0,0,0,0,0,0,0,
+183,183,127,239,191,253,238,175,95,111,109,95,85,222,254,223,175,253,232,0,0,0,0,0,214,181,170,187,85,84,2,1,0,16,160,168,0,36,0,0,0,0,0,0,0,0,0,0,0,0,
+255,253,247,126,246,215,187,251,247,187,223,251,255,107,171,245,250,223,120,0,0,0,0,1,91,214,221,213,219,108,64,36,37,68,10,2,169,8,160,0,0,0,0,0,0,0,0,0,0,0,
+237,191,223,239,255,254,238,174,189,238,246,174,173,254,254,191,95,181,220,0,0,0,0,1,173,91,106,174,173,180,8,128,0,17,64,144,2,66,0,0,0,0,0,0,0,0,0,0,0,0,
+191,238,251,123,183,127,187,251,238,187,93,251,251,91,215,235,245,255,116,0,0,0,0,1,117,109,87,117,118,170,32,1,37,36,20,37,72,16,144,0,0,0,0,0,0,0,0,0,0,0,
+253,187,239,239,253,234,238,222,183,239,247,190,223,247,125,125,95,85,220,0,0,0,0,1,171,170,218,171,170,220,2,40,0,65,65,0,17,68,32,0,0,0,0,0,0,0,0,0,0,0,
+239,255,190,254,223,255,191,183,253,122,222,235,234,221,219,215,245,255,116,0,0,0,0,0,182,183,109,181,91,104,136,1,21,20,20,84,132,17,0,0,0,0,0,0,0,0,0,0,0,0,
+253,221,251,187,247,110,245,250,175,223,187,190,191,191,119,125,191,107,220,0,0,0,0,1,218,218,182,221,173,172,32,132,0,64,129,1,33,68,160,0,0,0,0,0,0,0,0,0,0,0,
+183,127,191,239,125,255,222,175,250,234,238,235,237,235,221,215,215,190,244,0,0,0,0,1,86,171,85,86,246,180,2,16,68,10,40,84,20,16,0,0,0,0,0,0,0,0,0,0,0,0,
+255,246,238,255,223,182,247,251,111,127,187,190,190,189,127,125,125,235,190,0,0,0,0,1,107,117,219,106,149,90,64,0,17,64,130,1,65,5,32,0,0,0,0,0,0,0,0,0,0,0,
+221,223,251,219,123,255,93,111,187,214,254,247,235,239,213,239,219,126,236,0,0,0,0,1,186,174,173,182,237,232,8,146,64,41,17,72,8,80,64,0,0,0,0,0,0,0,0,0,0,0,
+247,251,191,127,254,219,247,221,238,253,215,189,190,251,127,122,247,175,186,0,0,0,0,0,205,213,118,171,86,172,130,0,5,2,68,18,66,5,0,0,0,0,0,0,0,0,0,0,0,0,
+223,111,247,251,183,254,189,118,187,175,122,238,239,174,235,223,189,250,238,0,0,0,0,1,118,187,170,221,122,180,16,33,16,168,17,33,17,80,64,0,0,0,0,0,0,0,0,0,0,0,
+253,254,222,222,255,119,239,255,238,251,223,187,186,251,190,234,239,95,190,0,0,0,0,1,171,85,91,107,171,172,64,132,2,2,68,8,72,4,32,0,0,0,0,0,0,0,0,0,0,0,
+239,187,255,251,237,254,218,170,251,174,246,238,239,174,237,191,187,245,234,0,0,0,0,1,90,237,173,181,85,116,4,0,72,144,145,66,5,65,0,0,0,0,0,0,0,0,0,0,0,0,
+190,255,118,239,191,183,191,255,175,251,187,187,250,251,251,237,238,190,191,0,0,0,0,1,109,86,246,173,187,84,128,34,2,4,4,17,80,20,160,0,0,0,0,0,0,0,0,0,0,0,
+251,237,255,190,251,254,235,86,250,174,222,254,175,190,174,187,123,215,237,0,0,0,0,1,182,219,42,214,213,180,18,8,32,162,160,136,4,128,0,0,0,0,0,0,0,0,0,0,0,0,
+239,191,219,251,239,111,190,253,175,251,247,171,251,235,251,239,174,253,123,0,0,0,0,1,85,109,219,107,94,218,0,128,132,16,10,34,144,85,64,0,0,0,0,0,0,0,0,0,0,0,
+190,251,126,239,255,250,247,219,251,94,186,254,222,190,222,250,251,175,222,0,0,0,0,1,183,181,109,189,106,172,72,34,2,133,32,136,34,0,16,0,0,0,0,0,0,0,0,0,0,0,
+251,239,239,191,109,191,186,238,222,247,239,215,183,235,183,175,222,250,235,0,0,0,0,1,90,171,85,85,171,104,1,0,36,32,73,34,137,85,64,0,0,0,0,0,0,0,0,0,0,0,
+239,191,189,251,255,238,239,191,119,221,123,125,250,190,253,251,119,183,191,0,0,0,0,1,234,221,109,170,221,181,36,17,0,138,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+254,250,255,239,109,191,187,117,221,119,221,219,95,239,174,174,221,238,237,128,0,0,0,2,173,107,182,222,170,172,0,64,18,32,168,130,85,36,160,0,0,0,0,0,0,0,0,0,0,0,
+187,239,237,191,255,250,239,223,119,221,183,119,245,122,251,251,247,123,191,0,0,0,0,2,183,172,171,107,118,212,17,4,128,138,2,40,0,66,0,0,0,0,0,0,0,0,0,0,0,0,
+239,191,191,251,110,239,189,117,253,119,253,221,95,223,183,94,189,174,235,128,0,0,0,2,218,183,109,85,171,120,128,0,10,32,144,130,170,16,144,0,0,0,0,0,0,0,0,0,0,0,
+254,253,251,111,251,254,247,223,87,222,175,127,246,234,253,247,239,251,253,0,0,0,0,3,106,213,181,186,181,168,8,72,128,132,36,40,0,138,0,0,0,0,0,0,0,0,0,0,0,0,
+219,247,223,253,191,111,221,123,253,251,245,234,221,191,175,109,186,190,175,128,0,0,0,2,173,109,90,214,221,84,130,2,18,34,129,2,82,32,160,0,0,0,0,0,0,0,0,0,0,0,
+255,222,251,119,247,251,119,222,175,94,191,127,183,237,245,222,239,235,251,128,0,0,0,3,119,86,239,91,107,104,32,32,0,136,40,160,132,136,0,0,0,0,0,0,0,0,0,0,0,0,
+222,255,223,223,126,223,221,235,251,235,235,213,253,123,95,119,186,190,221,128,0,0,0,5,170,235,85,109,173,186,4,132,74,34,2,10,16,34,160,0,0,0,0,0,0,0,0,0,0,0,
+247,219,125,253,239,253,119,126,221,126,190,255,87,223,251,221,239,235,183,192,0,0,0,6,181,93,106,181,85,80,64,0,0,136,168,144,133,8,0,0,0,0,0,0,0,0,0,0,0,0,
+190,255,247,191,251,111,223,183,247,219,247,173,254,234,174,247,123,126,253,64,0,0,0,5,175,107,93,214,238,217,8,73,36,33,2,4,32,66,144,0,0,0,0,0,0,0,0,0,0,0,
+251,237,222,247,111,253,104,170,42,85,84,183,87,127,251,189,222,215,215,192,0,0,0,14,213,173,170,181,91,104,2,0,1,4,36,81,21,16,32,0,0,0,0,0,0,0,0,0,0,0,
+239,191,127,253,254,223,128,0,0,0,0,5,106,171,110,239,119,253,125,64,0,0,0,10,186,181,119,91,170,176,72,34,36,81,17,4,64,69,0,0,0,0,0,0,0,0,0,0,0,0,
+190,251,247,111,187,246,128,0,0,0,0,11,187,126,251,187,221,87,215,192,0,0,0,27,86,219,90,237,118,212,0,128,1,4,64,81,18,16,64,0,0,0,0,0,0,0,0,0,0,0,
+251,239,221,254,255,191,0,0,0,0,0,5,85,171,174,238,247,253,190,192,0,0,0,21,219,109,171,85,171,81,34,9,36,81,21,4,68,133,16,0,0,0,0,0,0,0,0,0,0,0,
+239,190,255,219,237,251,0,0,0,0,0,14,218,222,251,251,189,111,119,96,0,0,0,58,173,85,109,110,181,176,0,32,1,4,64,65,16,80,64,0,0,0,0,0,0,0,0,0,0,0,
+254,251,219,127,191,223,0,0,0,0,0,5,110,187,223,94,215,219,221,192,0,0,0,87,117,182,182,181,174,210,16,129,20,65,10,20,5,4,0,0,0,0,0,0,0,0,0,0,0,0,
+187,239,127,246,246,251,0,0,0,0,0,11,85,175,117,235,253,190,247,96,0,0,0,218,170,219,219,86,218,160,68,4,1,20,32,129,80,33,80,0,0,0,0,0,0,0,0,0,0,0,
+239,191,247,191,255,223,0,0,0,0,0,5,182,221,223,126,175,119,93,224,0,0,1,109,183,106,106,234,171,105,0,32,68,32,137,40,4,136,0,0,0,0,0,0,0,0,0,0,0,0,
+254,251,190,247,109,250,0,0,0,0,0,13,90,183,117,215,251,221,247,160,0,0,3,86,218,173,173,93,221,160,17,2,1,10,34,5,80,34,160,0,0,0,0,0,0,0,0,0,0,0,
+219,238,251,223,255,111,0,0,0,0,0,6,237,221,223,125,110,247,125,224,0,0,13,181,107,118,215,106,170,208,64,16,36,64,136,160,5,8,0,0,0,0,0,0,0,0,0,0,0,0,
+255,191,239,253,183,254,0,0,0,0,0,11,86,175,123,219,219,189,215,96,0,0,54,219,93,171,106,183,118,162,4,129,1,18,32,10,64,162,160,0,0,0,0,0,0,0,0,0,0,0,
+222,253,190,239,254,218,0,0,0,0,0,5,106,219,222,247,126,239,125,240,0,2,218,173,170,181,93,218,171,64,16,16,36,68,10,160,148,8,0,0,0,0,0,0,0,0,0,0,0,0,
+247,247,251,189,187,255,247,118,219,109,182,223,255,189,119,93,215,181,215,85,85,109,171,117,109,219,170,171,109,201,65,4,129,17,64,9,1,66,64,0,0,0,0,0,0,0,0,0,0,0,
+191,127,223,255,239,191,191,255,255,255,255,253,182,247,221,247,125,255,125,251,182,182,221,173,182,173,119,109,182,64,4,32,8,68,21,32,84,16,144,0,0,0,0,0,0,0,0,0,0,0,
+251,219,125,219,126,245,251,183,119,187,187,183,255,253,247,125,238,171,223,109,91,171,106,182,213,106,170,182,171,132,16,1,2,16,128,74,1,68,0,0,0,0,0,0,0,0,0,0,0,0,
+239,127,239,127,247,255,174,253,254,254,254,255,109,183,93,215,187,254,245,218,237,117,86,213,91,183,109,213,186,144,128,136,36,130,41,0,164,17,64,0,0,0,0,0,0,0,0,0,0,0,
+189,246,253,246,223,110,255,223,219,239,239,237,255,253,247,125,238,215,95,119,85,174,219,109,173,90,182,182,214,128,4,32,128,80,130,42,8,132,32,0,0,0,0,0,0,0,0,0,0,0,
+255,223,183,223,253,251,251,251,127,187,187,191,219,183,93,215,123,189,245,250,182,181,109,86,245,171,218,218,171,4,144,2,10,4,40,128,162,33,0,0,0,0,0,0,0,0,0,0,0,0,
+238,253,255,125,183,223,190,223,246,254,254,254,254,255,247,253,222,247,127,91,90,215,181,187,86,221,86,171,117,32,1,8,32,162,130,36,8,136,160,0,0,0,0,0,0,0,0,0,0,0,
+251,247,221,247,255,125,239,251,223,239,239,235,223,237,125,95,119,189,215,237,237,106,173,106,171,106,181,181,174,2,32,64,2,8,32,130,130,34,0,0,0,0,0,0,0,0,0,0,0,0,
+191,191,127,223,123,247,251,111,125,189,189,191,247,127,175,245,221,239,122,186,171,186,214,214,221,86,218,222,181,16,4,4,136,162,138,40,40,8,144,0,0,0,0,0,0,0,0,0,0,0,
+238,247,247,125,239,191,111,255,247,255,255,254,221,245,245,191,119,117,223,253,90,173,107,91,107,107,111,106,212,65,33,32,2,8,32,130,66,162,0,0,0,0,0,0,0,0,0,0,0,0,
+251,222,221,255,253,247,254,246,223,219,219,219,255,223,95,107,221,191,117,171,173,183,93,173,90,189,169,85,108,4,0,2,72,130,10,16,136,8,160,0,0,0,0,0,0,0,0,0,0,0,
+223,255,255,219,111,189,187,223,253,126,254,255,119,125,251,253,119,235,223,125,118,213,181,117,173,213,94,219,180,128,72,136,2,40,160,68,33,66,0,0,0,0,0,0,0,0,0,0,0,0,
+253,182,238,255,254,255,239,251,119,247,219,221,253,247,110,175,221,126,246,237,171,90,214,174,246,171,107,109,88,17,2,0,32,130,9,17,8,16,144,0,0,0,0,0,0,0,0,0,0,0,
+183,255,187,237,183,237,190,223,223,223,127,119,223,223,187,250,255,215,95,190,218,173,107,181,85,117,181,86,208,68,8,34,132,40,162,68,69,68,32,0,0,0,0,0,0,0,0,0,0,0,
+255,118,255,191,254,255,251,253,253,253,247,255,119,125,238,223,170,251,245,234,173,246,181,86,173,174,214,219,100,0,64,8,2,130,8,17,16,17,0,0,0,0,0,0,0,0,0,0,0,0,
+237,223,238,251,111,182,239,183,183,111,222,239,253,247,123,181,255,174,223,126,234,149,221,219,118,213,91,109,81,17,2,64,36,16,66,132,68,132,64,0,0,0,0,0,0,0,0,0,0,0,
+191,253,191,239,251,255,190,254,255,253,255,251,111,222,222,255,86,251,187,171,93,238,170,173,171,109,173,85,160,0,16,2,0,133,16,33,16,81,16,0,0,0,0,0,0,0,0,0,0,0,
+254,247,251,126,239,109,251,239,251,183,109,191,255,127,235,213,253,174,238,254,170,181,109,181,90,182,245,186,194,72,65,16,146,32,68,136,69,4,64,0,0,0,0,0,0,0,0,0,0,0,
+235,223,223,247,191,255,239,189,175,255,255,237,187,246,190,255,111,251,251,182,238,171,182,219,109,171,86,215,8,2,4,0,0,149,17,34,16,65,0,0,0,0,0,0,0,0,0,0,0,0,
+255,253,123,191,251,118,254,255,254,221,219,127,239,191,239,171,186,190,174,239,85,221,85,109,182,218,171,90,128,32,16,73,10,0,68,8,130,20,80,0,0,0,0,0,0,0,0,0,0,0,
+189,183,254,246,239,223,187,237,251,247,255,246,253,250,186,254,239,235,251,186,186,170,219,170,213,109,189,107,34,4,129,0,32,169,1,66,40,129,0,0,0,0,0,0,0,0,0,0,0,0,
+239,255,219,223,190,253,239,191,95,127,109,191,223,191,239,171,187,126,222,255,107,109,109,91,91,86,213,180,0,144,4,18,4,2,40,16,130,40,64,0,0,0,0,0,0,0,0,0,0,0,
+253,187,127,253,251,239,254,251,251,221,255,247,123,238,250,254,253,215,183,171,173,183,85,173,109,186,170,220,18,0,80,64,65,72,133,68,40,130,16,0,0,0,0,0,0,0,0,0,0,0,
+223,239,238,239,223,190,219,239,239,247,183,125,254,251,175,183,215,125,250,254,182,213,186,246,182,214,239,81,64,4,0,1,8,16,32,18,130,40,128,0,0,0,0,0,0,0,0,0,0,0,
+246,254,251,189,253,251,255,190,190,223,253,223,219,223,251,237,125,215,95,215,90,182,215,85,213,91,85,104,4,81,4,136,2,133,18,64,32,130,32,0,0,0,0,0,0,0,0,0,0,0,
+191,187,223,255,111,223,110,251,251,253,191,247,127,253,94,191,215,253,235,125,214,218,170,173,91,106,186,160,16,0,64,0,144,80,132,20,138,16,128,0,0,0,0,0,0,0,0,0,0,0,
+251,239,126,237,253,251,255,239,239,191,238,253,246,223,247,235,125,87,126,219,107,86,221,182,237,182,215,196,129,4,18,36,5,4,33,65,32,138,32,0,0,0,0,0,0,0,0,0,0,0,
+239,127,247,191,223,111,182,254,254,246,251,183,223,247,93,126,239,253,219,247,93,107,106,219,86,171,106,0,4,32,0,0,64,65,20,20,10,32,128,0,0,0,0,0,0,0,0,0,0,0,
+191,251,190,251,119,254,255,187,187,255,191,255,125,189,247,171,186,183,119,93,171,93,87,106,181,186,182,146,64,2,136,146,10,20,65,65,64,136,32,0,0,0,0,0,0,0,0,0,0,0,
+251,110,247,239,253,187,237,255,239,182,246,221,247,247,189,254,239,239,221,247,218,234,237,91,90,215,90,0,17,32,32,0,32,129,16,8,18,34,128,0,0,0,0,0,0,0,0,0,0,0,
+239,255,255,126,239,239,191,219,190,255,255,255,223,127,238,219,251,122,247,126,173,87,85,173,237,90,232,34,4,8,2,68,132,84,69,34,68,8,32,0,0,0,0,0,0,0,0,0,0,0,
+253,183,109,247,254,254,251,126,251,237,183,109,253,237,187,190,175,175,189,215,215,106,186,214,171,171,80,128,64,65,8,0,1,1,16,136,145,66,128,0,0,0,0,0,0,0,0,0,0,0,
+183,253,255,223,111,187,239,239,239,191,253,255,119,255,238,235,250,250,239,122,186,189,215,117,93,117,128,9,8,4,64,145,20,72,68,34,4,16,32,0,0,0,0,0,0,0,0,0,0,0,
+255,119,219,125,251,239,190,253,190,251,183,219,255,110,187,254,223,191,187,223,213,213,90,173,170,174,1,0,1,16,2,4,1,5,1,8,80,138,0,0,0,0,0,0,0,0,0,0,0,0,
+221,255,127,247,190,254,251,223,255,239,255,127,183,251,238,171,181,235,110,245,110,171,107,86,237,217,0,36,68,64,144,16,68,80,84,66,4,64,160,0,0,0,0,0,0,0,0,0,0,0,
+255,221,246,223,239,219,239,246,237,190,221,251,253,191,251,254,255,125,251,191,181,109,181,235,86,168,1,0,16,2,0,128,1,4,1,17,81,20,0,0,0,0,0,0,0,0,0,0,0,0,
+219,119,223,253,189,255,190,223,255,251,247,222,223,238,175,91,213,215,174,214,214,182,174,189,107,64,0,17,0,136,10,4,148,33,84,68,4,65,64,0,0,0,0,0,0,0,0,0,0,0,
+255,255,125,239,255,110,255,253,182,239,127,123,246,251,251,247,127,125,251,253,235,218,213,74,189,0,2,64,68,0,128,32,0,136,1,17,33,18,16,0,0,0,0,0,0,0,0,0,0,0,
+219,187,247,189,219,255,246,239,255,255,221,255,191,223,222,189,219,215,94,175,93,87,118,247,96,0,0,4,0,68,32,130,36,34,164,68,8,64,128,0,0,0,0,0,0,0,0,0,0,0,
+254,239,223,247,127,182,223,190,219,109,255,221,251,126,247,239,118,253,247,251,234,181,91,85,128,0,0,33,36,16,8,8,1,8,8,17,69,20,32,0,0,0,0,0,0,0,0,0,0,0,
+183,254,253,191,246,255,251,251,255,255,109,247,223,247,221,117,223,95,93,110,182,218,213,180,0,0,2,128,1,1,2,32,136,162,162,132,32,1,0,0,0,0,0,0,0,0,0,0,0,0,
+255,187,223,253,223,237,222,239,183,109,255,127,123,222,247,223,123,245,247,219,219,109,182,64,0,0,0,8,136,32,64,2,34,8,0,80,138,168,160,0,0,0,0,0,0,0,0,0,0,0,
+237,239,123,111,253,191,127,190,253,255,239,221,239,123,221,119,221,95,125,126,234,170,136,0,0,0,0,34,0,132,17,16,0,162,85,2,32,2,0,0,0,0,0,0,0,0,0,0,0,0,
+};
+
+//set pixel value at x and y coordinate
+static void changePixel(int x, int y, int value){
+    int height = 300;
+    int width = 400;
+
+    if(x > width || x < 0){
+        printf("x must be between 0 and 300");
+        return;
+    }
+    if(y > height || y < 0){
+        printf("y must be between 0 and 400");
+    }
+
+    int index = (width * y) + x;
+    lab11[index] = value;
+}
+
+
+
+int main(void) {
+    //perform changes on the image
+    changePixel(0, 0, 0);
+
+    // Initialize.
+    led_init(LED0);
+    led_off(LED0);
+
+    // Setup input for busy
+    nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
+
+    // Assert ENABLE
+    nrf_gpio_cfg_output(nTC_EN);
+    nrf_gpio_pin_clear(nTC_EN);
+
+    // Need to wait 6.5 ms per datasheet (section 5.5)
+    // Up that a little to be safe and who cares about a couple ms
+    nrf_delay_ms(10);
+
+    // Setup SPI
+    spi_init();
+
+    uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
+    uint8_t rx[256] = {0};
+
+    // Get device id to check that we can comm with this display
+    // Send the command
+    nrf_drv_spi_transfer(&_spi, tx, 4, NULL, 0);
+
+    // Wait until no longer busy
+    wait_for_not_busy();
+
+    // Receive response
+    nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 28);
+
+    // Not sure, sometimes busy signal, sometimes not?
+    // Just wait for a hot sec for now
+    nrf_delay_ms(1);
+
+
+    uint8_t pic[255];
+
+    // Setup spi comm header
+    pic[0] = 0x20;
+    pic[1] = 0x01;
+    pic[2] = 0x00;
+
+    // How many bytes we want to send.
+    pic[3] = 16;
+
+    // Pic header
+    pic[4] = 0x33; // 4.41"
+    pic[5] = 0x01; // 400px
+    pic[6] = 0x90;
+    pic[7] = 0x01; // 300px
+    pic[8] = 0x2c;
+    pic[9] = 0x01; // 1 bit
+    // pic[10] = 0x02; // image pixel data format type 2
+    pic[10] = 0x00; // image pixel data format type 0
+    pic[11] = 0; // reserved
+    pic[12] = 0;
+    pic[13] = 0;
+    pic[14] = 0;
+    pic[15] = 0;
+    pic[16] = 0;
+    pic[17] = 0;
+    pic[18] = 0;
+    pic[19] = 0;
+
+    // Send header
+    nrf_drv_spi_transfer(&_spi, pic, 20, NULL, 0);
+    wait_for_not_busy();
+    nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+    wait_for_not_busy();
+
+    uint8_t i;
+
+    // // display a pattern
+    // pic[3] = 250;
+    // // pic[3] = 150;
+    // for (i=4; i<254; i++) {
+    //     if (i % 2 == 0) {
+    //         pic[i] = 0x80;
+    //     } else {
+    //         pic[i] = 0x0C;
+    //     }
+    //     // pic[i] = i;
+    // }
+    //
+    // // Display a lot more
+    // for (i=0; i<30; i++) {
+    //     nrf_drv_spi_transfer(&_spi, pic, 254, NULL, 0);
+    //     wait_for_not_busy();
+    //     nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+    //     wait_for_not_busy();
+    // }
+
+
+    // display an image
+    pic[3] = 250;
+    for (i=0; i<60; i++) {
+        memcpy(pic+4, lab11+(i*250), 250); // Lab11 logo
+        //memset(pic+4, 0xFF, 250); // Black screen
+        //memset(pic+4, 0x00, 250); // White screen
+
+        nrf_drv_spi_transfer(&_spi, pic, 254, NULL, 0);
+        wait_for_not_busy();
+        nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+        wait_for_not_busy();
+    }
+
+
+    // Actually render the image
+    tx[0] = 0x24;
+    tx[1] = 0x01;
+    tx[2] = 0x00;
+
+    nrf_drv_spi_transfer(&_spi, tx, 3, NULL, 0);
+    wait_for_not_busy();
+    nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+    wait_for_not_busy();
+
+
+    nrf_gpio_pin_set(nTC_EN);
+
+    // led_on(LED0);
+
+
+    // Enter main loop.
+    while (1) {
+        sd_app_evt_wait();
+    }
+}
diff --git a/apps/eink-advanced/nrf_drv_config.h b/apps/eink-advanced/nrf_drv_config.h
new file mode 100644
index 0000000000000000000000000000000000000000..23c8a47848fd385197fb2f880c2e691962e32ed9
--- /dev/null
+++ b/apps/eink-advanced/nrf_drv_config.h
@@ -0,0 +1,432 @@
+/* Copyright (c) 2015 Nordic Semiconductor. All Rights Reserved.
+ *
+ * The information contained herein is property of Nordic Semiconductor ASA.
+ * Terms and conditions of usage are described in detail in NORDIC
+ * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
+ *
+ * Licensees are granted free, non-transferable use of the information. NO
+ * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
+ * the file.
+ *
+ */
+
+#ifndef NRF_DRV_CONFIG_H
+#define NRF_DRV_CONFIG_H
+
+/**
+ * Provide a non-zero value here in applications that need to use several
+ * peripherals with the same ID that are sharing certain resources
+ * (for example, SPI0 and TWI0). Obviously, such peripherals cannot be used
+ * simultaneously. Therefore, this definition allows to initialize the driver
+ * for another peripheral from a given group only after the previously used one
+ * is uninitialized. Normally, this is not possible, because interrupt handlers
+ * are implemented in individual drivers.
+ * This functionality requires a more complicated interrupt handling and driver
+ * initialization, hence it is not always desirable to use it.
+ */
+#define PERIPHERAL_RESOURCE_SHARING_ENABLED  0
+
+/* CLOCK */
+#define CLOCK_ENABLED 0
+
+#if (CLOCK_ENABLED == 1)
+#define CLOCK_CONFIG_XTAL_FREQ          NRF_CLOCK_XTALFREQ_Default
+#define CLOCK_CONFIG_LF_SRC             NRF_CLOCK_LF_SRC_Xtal
+#define CLOCK_CONFIG_IRQ_PRIORITY       APP_IRQ_PRIORITY_LOW
+#endif
+
+/* GPIOTE */
+#define GPIOTE_ENABLED 1
+
+#if (GPIOTE_ENABLED == 1)
+#define GPIOTE_CONFIG_USE_SWI_EGU false
+#define GPIOTE_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+#define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 1
+#endif
+
+/* TIMER */
+#define TIMER0_ENABLED 0
+
+#if (TIMER0_ENABLED == 1)
+#define TIMER0_CONFIG_FREQUENCY    NRF_TIMER_FREQ_16MHz
+#define TIMER0_CONFIG_MODE         TIMER_MODE_MODE_Timer
+#define TIMER0_CONFIG_BIT_WIDTH    TIMER_BITMODE_BITMODE_32Bit
+#define TIMER0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+#define TIMER0_INSTANCE_INDEX      0
+#endif
+
+#define TIMER1_ENABLED 0
+
+#if (TIMER1_ENABLED == 1)
+#define TIMER1_CONFIG_FREQUENCY    NRF_TIMER_FREQ_16MHz
+#define TIMER1_CONFIG_MODE         TIMER_MODE_MODE_Timer
+#define TIMER1_CONFIG_BIT_WIDTH    TIMER_BITMODE_BITMODE_16Bit
+#define TIMER1_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+#define TIMER1_INSTANCE_INDEX      (TIMER0_ENABLED)
+#endif
+
+#define TIMER2_ENABLED 0
+
+#if (TIMER2_ENABLED == 1)
+#define TIMER2_CONFIG_FREQUENCY    NRF_TIMER_FREQ_16MHz
+#define TIMER2_CONFIG_MODE         TIMER_MODE_MODE_Timer
+#define TIMER2_CONFIG_BIT_WIDTH    TIMER_BITMODE_BITMODE_16Bit
+#define TIMER2_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+#define TIMER2_INSTANCE_INDEX      (TIMER1_ENABLED+TIMER0_ENABLED)
+#endif
+
+#define TIMER3_ENABLED 0
+
+#if (TIMER3_ENABLED == 1)
+#define TIMER3_CONFIG_FREQUENCY    NRF_TIMER_FREQ_16MHz
+#define TIMER3_CONFIG_MODE         TIMER_MODE_MODE_Timer
+#define TIMER3_CONFIG_BIT_WIDTH    TIMER_BITMODE_BITMODE_16Bit
+#define TIMER3_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+#define TIMER3_INSTANCE_INDEX      (TIMER2_ENABLED+TIMER1_ENABLED+TIMER0_ENABLED)
+#endif
+
+#define TIMER4_ENABLED 0
+
+#if (TIMER4_ENABLED == 1)
+#define TIMER4_CONFIG_FREQUENCY    NRF_TIMER_FREQ_16MHz
+#define TIMER4_CONFIG_MODE         TIMER_MODE_MODE_Timer
+#define TIMER4_CONFIG_BIT_WIDTH    TIMER_BITMODE_BITMODE_16Bit
+#define TIMER4_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+#define TIMER4_INSTANCE_INDEX      (TIMER3_ENABLED+TIMER2_ENABLED+TIMER1_ENABLED+TIMER0_ENABLED)
+#endif
+
+
+#define TIMER_COUNT (TIMER0_ENABLED + TIMER1_ENABLED + TIMER2_ENABLED + TIMER3_ENABLED + TIMER4_ENABLED)
+
+/* RTC */
+#define RTC0_ENABLED 0
+
+#if (RTC0_ENABLED == 1)
+#define RTC0_CONFIG_FREQUENCY    32678
+#define RTC0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+#define RTC0_CONFIG_RELIABLE     false
+
+#define RTC0_INSTANCE_INDEX      0
+#endif
+
+#define RTC1_ENABLED 0
+
+#if (RTC1_ENABLED == 1)
+#define RTC1_CONFIG_FREQUENCY    32768
+#define RTC1_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+#define RTC1_CONFIG_RELIABLE     false
+
+#define RTC1_INSTANCE_INDEX      (RTC0_ENABLED)
+#endif
+
+#define RTC_COUNT                (RTC0_ENABLED+RTC1_ENABLED)
+
+#define NRF_MAXIMUM_LATENCY_US 2000
+
+/* RNG */
+#define RNG_ENABLED 0
+
+#if (RNG_ENABLED == 1)
+#define RNG_CONFIG_ERROR_CORRECTION true
+#define RNG_CONFIG_POOL_SIZE        8
+#define RNG_CONFIG_IRQ_PRIORITY     APP_IRQ_PRIORITY_LOW
+#endif
+
+/* PWM */
+
+#define PWM0_ENABLED 0
+
+#if (PWM0_ENABLED == 1)
+#define PWM0_CONFIG_OUT0_PIN        2
+#define PWM0_CONFIG_OUT1_PIN        3
+#define PWM0_CONFIG_OUT2_PIN        4
+#define PWM0_CONFIG_OUT3_PIN        5
+#define PWM0_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+#define PWM0_CONFIG_BASE_CLOCK      NRF_PWM_CLK_1MHz
+#define PWM0_CONFIG_COUNT_MODE      NRF_PWM_MODE_UP
+#define PWM0_CONFIG_TOP_VALUE       1000
+#define PWM0_CONFIG_LOAD_MODE       NRF_PWM_LOAD_COMMON
+#define PWM0_CONFIG_STEP_MODE       NRF_PWM_STEP_AUTO
+
+#define PWM0_INSTANCE_INDEX 0
+#endif
+
+#define PWM1_ENABLED 0
+
+#if (PWM1_ENABLED == 1)
+#define PWM1_CONFIG_OUT0_PIN        2
+#define PWM1_CONFIG_OUT1_PIN        3
+#define PWM1_CONFIG_OUT2_PIN        4
+#define PWM1_CONFIG_OUT3_PIN        5
+#define PWM1_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+#define PWM1_CONFIG_BASE_CLOCK      NRF_PWM_CLK_1MHz
+#define PWM1_CONFIG_COUNT_MODE      NRF_PWM_MODE_UP
+#define PWM1_CONFIG_TOP_VALUE       1000
+#define PWM1_CONFIG_LOAD_MODE       NRF_PWM_LOAD_COMMON
+#define PWM1_CONFIG_STEP_MODE       NRF_PWM_STEP_AUTO
+
+#define PWM1_INSTANCE_INDEX (PWM0_ENABLED)
+#endif
+
+#define PWM2_ENABLED 0
+
+#if (PWM2_ENABLED == 1)
+#define PWM2_CONFIG_OUT0_PIN        2
+#define PWM2_CONFIG_OUT1_PIN        3
+#define PWM2_CONFIG_OUT2_PIN        4
+#define PWM2_CONFIG_OUT3_PIN        5
+#define PWM2_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+#define PWM2_CONFIG_BASE_CLOCK      NRF_PWM_CLK_1MHz
+#define PWM2_CONFIG_COUNT_MODE      NRF_PWM_MODE_UP
+#define PWM2_CONFIG_TOP_VALUE       1000
+#define PWM2_CONFIG_LOAD_MODE       NRF_PWM_LOAD_COMMON
+#define PWM2_CONFIG_STEP_MODE       NRF_PWM_STEP_AUTO
+
+#define PWM2_INSTANCE_INDEX (PWM0_ENABLED + PWM1_ENABLED)
+#endif
+
+#define PWM_COUNT   (PWM0_ENABLED + PWM1_ENABLED + PWM2_ENABLED)
+
+/* SPI */
+#define SPI0_ENABLED 1
+
+#if (SPI0_ENABLED == 1)
+#define SPI0_USE_EASY_DMA 0
+
+#define SPI0_CONFIG_SCK_PIN         0  // Nucleum
+#define SPI0_CONFIG_MOSI_PIN        30 // Nucleum
+#define SPI0_CONFIG_MISO_PIN        29 // Nucleum
+#define SPI0_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+
+#define SPI0_INSTANCE_INDEX 0
+#endif
+
+#define SPI1_ENABLED 0
+
+#if (SPI1_ENABLED == 1)
+#define SPI1_USE_EASY_DMA 0
+
+#define SPI1_CONFIG_SCK_PIN         2
+#define SPI1_CONFIG_MOSI_PIN        3
+#define SPI1_CONFIG_MISO_PIN        4
+#define SPI1_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+
+#define SPI1_INSTANCE_INDEX (SPI0_ENABLED)
+#endif
+
+#define SPI2_ENABLED 0
+
+#if (SPI2_ENABLED == 1)
+#define SPI2_USE_EASY_DMA 0
+
+#define SPI2_CONFIG_SCK_PIN         2
+#define SPI2_CONFIG_MOSI_PIN        3
+#define SPI2_CONFIG_MISO_PIN        4
+#define SPI2_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+
+#define SPI2_INSTANCE_INDEX (SPI0_ENABLED + SPI1_ENABLED)
+#endif
+
+#define SPI_COUNT   (SPI0_ENABLED + SPI1_ENABLED + SPI2_ENABLED)
+
+/* SPIS */
+#define SPIS0_ENABLED 0
+
+#if (SPIS0_ENABLED == 1)
+#define SPIS0_CONFIG_SCK_PIN         2
+#define SPIS0_CONFIG_MOSI_PIN        3
+#define SPIS0_CONFIG_MISO_PIN        4
+#define SPIS0_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+
+#define SPIS0_INSTANCE_INDEX 0
+#endif
+
+#define SPIS1_ENABLED 0
+
+#if (SPIS1_ENABLED == 1)
+#define SPIS1_CONFIG_SCK_PIN         2
+#define SPIS1_CONFIG_MOSI_PIN        3
+#define SPIS1_CONFIG_MISO_PIN        4
+#define SPIS1_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+
+#define SPIS1_INSTANCE_INDEX SPIS0_ENABLED
+#endif
+
+#define SPIS2_ENABLED 0
+
+#if (SPIS2_ENABLED == 1)
+#define SPIS2_CONFIG_SCK_PIN         2
+#define SPIS2_CONFIG_MOSI_PIN        3
+#define SPIS2_CONFIG_MISO_PIN        4
+#define SPIS2_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+
+#define SPIS2_INSTANCE_INDEX (SPIS0_ENABLED + SPIS1_ENABLED)
+#endif
+
+#define SPIS_COUNT   (SPIS0_ENABLED + SPIS1_ENABLED + SPIS2_ENABLED)
+
+/* UART */
+#define UART0_ENABLED 0
+
+#if (UART0_ENABLED == 1)
+#define UART0_CONFIG_HWFC         NRF_UART_HWFC_DISABLED
+#define UART0_CONFIG_PARITY       NRF_UART_PARITY_EXCLUDED
+#define UART0_CONFIG_BAUDRATE     NRF_UART_BAUDRATE_38400
+#define UART0_CONFIG_PSEL_TXD     0
+#define UART0_CONFIG_PSEL_RXD     0
+#define UART0_CONFIG_PSEL_CTS     0
+#define UART0_CONFIG_PSEL_RTS     0
+#define UART0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+#ifdef NRF52
+#define UART0_CONFIG_USE_EASY_DMA false
+//Compile time flag
+#define UART_EASY_DMA_SUPPORT     1
+#define UART_LEGACY_SUPPORT       1
+#endif //NRF52
+#endif
+
+#define TWI0_ENABLED 0
+
+#if (TWI0_ENABLED == 1)
+#define TWI0_USE_EASY_DMA 0
+
+#define TWI0_CONFIG_FREQUENCY    NRF_TWI_FREQ_100K
+#define TWI0_CONFIG_SCL          0
+#define TWI0_CONFIG_SDA          1
+#define TWI0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+#define TWI0_INSTANCE_INDEX      0
+#endif
+
+#define TWI1_ENABLED 0
+
+#if (TWI1_ENABLED == 1)
+#define TWI1_USE_EASY_DMA 0
+
+#define TWI1_CONFIG_FREQUENCY    NRF_TWI_FREQ_100K
+#define TWI1_CONFIG_SCL          0
+#define TWI1_CONFIG_SDA          1
+#define TWI1_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+#define TWI1_INSTANCE_INDEX      (TWI0_ENABLED)
+#endif
+
+#define TWI_COUNT                (TWI0_ENABLED + TWI1_ENABLED)
+
+/* TWIS */
+#define TWIS0_ENABLED 0
+
+#if (TWIS0_ENABLED == 1)
+    #define TWIS0_CONFIG_ADDR0        0
+    #define TWIS0_CONFIG_ADDR1        0 /* 0: Disabled */
+    #define TWIS0_CONFIG_SCL          0
+    #define TWIS0_CONFIG_SDA          1
+    #define TWIS0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+    #define TWIS0_INSTANCE_INDEX      0
+#endif
+
+#define TWIS1_ENABLED 0
+
+#if (TWIS1_ENABLED ==  1)
+    #define TWIS1_CONFIG_ADDR0        0
+    #define TWIS1_CONFIG_ADDR1        0 /* 0: Disabled */
+    #define TWIS1_CONFIG_SCL          0
+    #define TWIS1_CONFIG_SDA          1
+    #define TWIS1_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+
+    #define TWIS1_INSTANCE_INDEX      (TWIS0_ENABLED)
+#endif
+
+#define TWIS_COUNT (TWIS0_ENABLED + TWIS1_ENABLED)
+/* For more documentation see nrf_drv_twis.h file */
+#define TWIS_ASSUME_INIT_AFTER_RESET_ONLY 0
+/* For more documentation see nrf_drv_twis.h file */
+#define TWIS_NO_SYNC_MODE 0
+
+/* QDEC */
+#define QDEC_ENABLED 0
+
+#if (QDEC_ENABLED == 1)
+#define QDEC_CONFIG_REPORTPER    NRF_QDEC_REPORTPER_10
+#define QDEC_CONFIG_SAMPLEPER    NRF_QDEC_SAMPLEPER_16384us
+#define QDEC_CONFIG_PIO_A        1
+#define QDEC_CONFIG_PIO_B        2
+#define QDEC_CONFIG_PIO_LED      3
+#define QDEC_CONFIG_LEDPRE       511
+#define QDEC_CONFIG_LEDPOL       NRF_QDEC_LEPOL_ACTIVE_HIGH
+#define QDEC_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+#define QDEC_CONFIG_DBFEN        false
+#define QDEC_CONFIG_SAMPLE_INTEN false
+#endif
+
+/* SAADC */
+#define SAADC_ENABLED 0
+
+#if (SAADC_ENABLED == 1)
+#define SAADC_CONFIG_RESOLUTION      NRF_SAADC_RESOLUTION_10BIT
+#define SAADC_CONFIG_OVERSAMPLE      NRF_SAADC_OVERSAMPLE_DISABLED
+#define SAADC_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+#endif
+
+/* PDM */
+#define PDM_ENABLED 0
+
+#if (PDM_ENABLED == 1)
+#define PDM_CONFIG_MODE            NRF_PDM_MODE_MONO
+#define PDM_CONFIG_EDGE            NRF_PDM_EDGE_LEFTFALLING
+#define PDM_CONFIG_CLOCK_FREQ      NRF_PDM_FREQ_1032K
+#define PDM_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
+#endif
+
+/* LPCOMP */
+#define LPCOMP_ENABLED 0
+
+#if (LPCOMP_ENABLED == 1)
+#define LPCOMP_CONFIG_REFERENCE    NRF_LPCOMP_REF_SUPPLY_4_8
+#define LPCOMP_CONFIG_DETECTION    NRF_LPCOMP_DETECT_DOWN
+#define LPCOMP_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW
+#define LPCOMP_CONFIG_INPUT        NRF_LPCOMP_INPUT_0
+#endif
+
+/* WDT */
+#define WDT_ENABLED 0
+
+#if (WDT_ENABLED == 1)
+#define WDT_CONFIG_BEHAVIOUR     NRF_WDT_BEHAVIOUR_RUN_SLEEP
+#define WDT_CONFIG_RELOAD_VALUE  2000
+#define WDT_CONFIG_IRQ_PRIORITY  APP_IRQ_PRIORITY_HIGH
+#endif
+
+/* SWI EGU */
+#ifdef NRF52
+    #define EGU_ENABLED 0
+#endif
+
+/* I2S */
+#define I2S_ENABLED 0
+
+#if (I2S_ENABLED == 1)
+#define I2S_CONFIG_SCK_PIN      22
+#define I2S_CONFIG_LRCK_PIN     23
+#define I2S_CONFIG_MCK_PIN      NRF_DRV_I2S_PIN_NOT_USED
+#define I2S_CONFIG_SDOUT_PIN    24
+#define I2S_CONFIG_SDIN_PIN     25
+#define I2S_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_HIGH
+#define I2S_CONFIG_MASTER       NRF_I2S_MODE_MASTER
+#define I2S_CONFIG_FORMAT       NRF_I2S_FORMAT_I2S
+#define I2S_CONFIG_ALIGN        NRF_I2S_ALIGN_LEFT
+#define I2S_CONFIG_SWIDTH       NRF_I2S_SWIDTH_16BIT
+#define I2S_CONFIG_CHANNELS     NRF_I2S_CHANNELS_STEREO
+#define I2S_CONFIG_MCK_SETUP    NRF_I2S_MCK_32MDIV8
+#define I2S_CONFIG_RATIO        NRF_I2S_RATIO_256X
+#endif
+
+#include "nrf_drv_config_validation.h"
+
+#endif // NRF_DRV_CONFIG_H

From 5accaf1dc7dc77ee96d606354b189e20474a9867 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Mon, 20 Jun 2016 22:01:18 -0400
Subject: [PATCH] The pixel change function is much more precise

---
 apps/eink-advanced/convert_to_epd.py |   6 +-
 apps/eink-advanced/friends.jpg       | Bin 0 -> 110166 bytes
 apps/eink-advanced/main.c            | 621 +++++++++++++++++------------------
 apps/eink-advanced/result.jpg        | Bin 0 -> 70866 bytes
 4 files changed, 313 insertions(+), 314 deletions(-)

diff --git a/apps/eink-advanced/convert_to_epd.py b/apps/eink-advanced/convert_to_epd.py
index 453ddf38315a48b0c3648c1885c9a8c9477b1b41..19e1688adebad9f6e67bed53d9dcbe997c7db4bb 100644
--- a/apps/eink-advanced/convert_to_epd.py
+++ b/apps/eink-advanced/convert_to_epd.py
@@ -1,7 +1,7 @@
 from PIL import Image
-image_file = Image.open('lab11_eink_color.png') # open colour image
+image_file = Image.open('friends.jpg') # open colour image
 image_file = image_file.convert('1') # convert image to black and white
-image_file.save('result.png')
+image_file.save('result.jpg')
 
 pixels = image_file.load()
 
@@ -54,4 +54,4 @@ for c in chunks(compressed, 50):
 	print(a + ',')
 	# print('{},'.format(','.join(c)))
 
-print('};')
\ No newline at end of file
+print('};')
diff --git a/apps/eink-advanced/friends.jpg b/apps/eink-advanced/friends.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..c7d7ea65d58582b2cfa085efccbced43b2d62ef9
GIT binary patch
literal 110166
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%0AhAVO^3*0eH6u2tl(Ha&h{B<e
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
K;;ZmD>;KvEaO}ze

literal 0
HcmV?d00001

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index cf46c77712cd7816ac69c09af9184a86f3679fe8..3a233b379c991269e689a36c6653f730323a8b73 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -61,330 +61,329 @@ static void wait_for_not_busy () {
 }
 
 uint8_t lab11[15000] = {
-255,255,255,255,255,255,255,255,255,255,255,255,255,255,237,182,219,109,182,219,109,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-238,238,238,238,238,238,170,170,170,170,170,170,170,170,182,219,109,182,219,109,182,219,244,0,0,0,0,0,0,66,16,132,32,0,5,85,85,85,80,0,0,0,0,0,0,0,0,0,0,0,
-191,191,191,191,191,191,255,255,255,255,255,255,255,255,234,170,170,170,170,170,170,173,91,232,0,0,0,0,2,8,66,16,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-251,251,251,251,251,250,170,170,170,170,170,170,170,170,187,109,182,219,109,182,219,117,109,86,128,0,0,0,0,32,0,0,0,0,10,170,170,170,144,0,0,0,0,0,0,0,0,0,0,0,
-238,238,238,238,238,239,255,255,255,255,255,255,255,255,237,182,219,109,182,219,109,173,171,107,80,0,0,0,4,130,36,137,16,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,
-255,191,191,191,191,190,219,109,182,219,109,182,219,109,181,91,85,181,91,85,181,86,221,189,108,0,0,0,0,0,128,32,0,0,20,146,73,36,128,0,0,0,0,0,0,0,0,0,0,0,
-183,251,251,251,251,251,189,222,239,119,187,221,238,247,118,234,221,86,234,221,86,245,106,213,183,0,0,0,2,36,4,1,32,0,2,33,16,136,32,0,0,0,0,0,0,0,0,0,0,0,
-253,223,111,111,111,111,239,119,187,221,238,247,123,189,219,86,171,107,86,171,107,91,173,86,213,208,0,0,8,0,32,136,0,0,40,136,68,34,128,0,0,0,0,0,0,0,0,0,0,0,
-223,125,255,255,255,254,187,221,238,247,123,189,222,239,117,187,117,189,187,117,189,173,86,219,90,168,0,0,0,145,2,0,144,0,0,34,17,8,32,0,0,0,0,0,0,0,0,0,0,0,
-251,247,246,246,246,247,238,247,123,189,222,239,119,187,221,85,174,165,85,174,165,106,245,109,109,180,0,0,18,0,16,36,0,0,37,8,132,66,0,0,0,0,0,0,0,0,0,0,0,0,
-223,191,95,191,191,190,187,189,222,239,119,187,221,238,246,218,181,187,109,85,187,91,91,181,182,223,0,0,0,9,0,128,64,0,64,162,33,16,160,0,0,0,0,0,0,0,0,0,0,0,
-251,247,253,246,246,247,238,239,119,187,221,238,247,123,187,109,214,213,182,246,213,173,173,86,170,169,192,0,32,160,72,9,8,0,20,8,136,68,0,0,0,0,0,0,0,0,0,0,0,0,
-222,221,239,223,223,222,187,187,221,238,247,123,189,222,234,182,181,94,213,90,174,246,181,186,219,110,160,0,4,2,2,32,0,0,130,130,34,18,160,0,0,0,0,0,0,0,0,0,0,0,
-255,255,125,253,253,255,238,238,246,187,93,222,215,119,189,213,91,106,183,86,218,149,86,215,109,181,112,0,16,8,32,128,64,0,80,40,137,64,0,0,0,0,0,0,0,0,0,0,0,0,
-219,119,239,111,183,181,127,187,95,239,247,107,253,218,234,173,213,171,90,235,107,118,235,89,170,214,172,0,129,64,132,5,8,1,5,2,32,21,64,0,0,0,0,0,0,0,0,0,0,0,
-255,222,255,253,255,255,213,239,245,122,221,254,175,127,190,214,186,221,171,93,93,171,93,110,183,91,180,0,4,2,0,32,0,0,72,80,10,64,16,0,0,0,0,0,0,0,0,0,0,0,
-182,255,181,183,221,190,255,122,191,223,191,87,251,213,235,123,87,106,237,107,106,221,171,85,90,173,91,0,64,16,17,0,64,5,17,5,64,137,64,0,0,0,0,0,0,0,0,0,0,0,
-255,246,255,255,127,235,171,175,235,117,235,253,110,255,125,74,234,173,86,173,173,106,237,182,237,245,173,129,17,0,132,18,16,0,68,80,42,34,0,0,0,0,0,0,0,0,0,0,0,0,
-237,191,238,221,246,255,254,251,126,223,125,111,219,173,214,246,182,214,219,181,118,173,86,219,86,150,234,192,4,74,0,64,64,4,129,5,0,136,64,0,0,0,0,0,0,0,0,0,0,0,
-191,237,191,255,223,189,91,190,215,245,215,218,254,251,125,91,91,123,109,91,85,214,186,173,106,235,55,68,64,0,33,4,0,8,40,64,72,33,16,0,0,0,0,0,0,0,0,0,0,0,
-251,127,251,109,251,247,246,235,253,95,125,191,171,175,219,170,213,170,181,173,174,187,213,181,187,93,218,160,1,16,136,16,128,2,130,21,18,132,64,0,0,0,0,0,0,0,0,0,0,0,
-239,246,239,255,111,126,223,190,175,247,215,234,254,250,246,183,110,173,170,245,117,85,90,214,205,106,171,82,40,2,0,64,16,40,40,128,64,33,0,0,0,0,0,0,0,0,0,0,0,0,
-254,223,254,237,255,219,186,235,250,221,125,127,183,191,189,90,181,118,222,150,171,182,175,107,117,173,109,128,128,136,4,2,64,2,2,42,21,8,80,0,0,0,0,0,0,0,0,0,0,0,
-187,253,183,191,219,127,239,191,111,187,223,214,237,234,238,235,86,170,171,123,181,91,117,93,86,214,182,136,2,32,81,16,0,168,164,128,128,69,0,0,0,0,0,0,0,0,0,0,0,0,
-239,183,254,251,127,246,187,237,218,239,117,125,191,127,187,93,187,183,117,170,221,234,170,213,181,107,218,32,32,1,0,1,16,2,16,42,41,16,64,0,0,0,0,0,0,0,0,0,0,0,
-254,255,111,239,251,191,238,191,127,189,223,215,235,171,238,213,85,90,173,86,170,173,219,110,219,186,106,2,136,132,4,72,1,72,133,0,130,69,16,0,0,0,0,0,0,0,0,0,0,0,
-219,251,251,191,190,251,123,235,214,247,118,253,190,254,187,107,182,235,107,123,109,182,173,181,86,173,168,136,0,16,32,0,136,16,32,82,40,16,64,0,0,0,0,0,0,0,0,0,0,0,
-255,175,190,250,239,239,174,189,125,221,221,183,119,183,238,182,219,90,181,170,182,213,118,171,106,214,212,0,34,64,130,68,34,133,18,4,2,132,0,0,0,0,0,0,0,0,0,0,0,0,
-189,254,247,239,251,189,251,239,219,119,119,221,221,221,123,90,173,109,222,173,213,91,170,221,189,107,96,66,0,4,8,16,8,32,132,161,80,33,80,0,0,0,0,0,0,0,0,0,0,0,
-239,251,223,191,190,255,95,123,127,221,253,119,246,247,175,173,181,170,170,234,182,237,91,106,203,181,130,16,137,16,64,129,34,74,32,8,4,136,0,0,0,0,0,0,0,0,0,0,0,0,
-253,175,253,253,247,237,245,221,213,119,175,222,191,189,250,234,214,183,107,94,219,85,173,173,117,93,16,0,0,1,2,4,64,128,138,162,162,37,64,0,0,0,0,0,0,0,0,0,0,0,
-223,254,239,223,191,191,111,119,127,222,250,251,213,215,95,55,91,90,181,171,85,182,246,182,174,212,2,73,36,132,16,32,20,40,32,8,8,128,16,0,0,0,0,0,0,0,0,0,0,0,
-246,247,189,246,251,247,221,221,235,123,175,174,255,125,245,218,237,235,94,213,110,171,85,91,181,104,144,0,0,32,64,133,66,130,138,146,66,42,128,0,0,0,0,0,0,0,0,0,0,0,
-223,190,255,127,238,222,247,119,190,238,251,123,173,223,111,85,85,45,234,187,181,125,91,234,214,160,1,18,34,1,4,16,16,36,32,32,144,128,32,0,0,0,0,0,0,0,0,0,0,0,
-253,247,237,219,191,255,93,253,235,187,183,238,251,117,221,187,182,218,171,85,86,202,237,45,90,130,68,0,8,36,1,4,132,129,9,10,10,18,128,0,0,0,0,0,0,0,0,0,0,0,
-223,223,191,254,251,117,247,175,127,238,253,123,183,223,119,109,91,109,93,182,219,119,85,214,208,0,16,72,128,128,40,81,34,40,66,64,160,68,32,0,0,0,0,0,0,0,0,0,0,0,
-246,253,251,111,239,223,190,245,173,123,175,175,238,245,253,170,234,182,234,219,109,85,110,186,2,18,1,0,34,9,2,4,16,130,40,20,9,16,128,0,0,0,0,0,0,0,0,0,0,0,
-191,239,191,253,190,254,235,191,251,222,250,250,187,191,87,183,91,171,86,173,85,182,145,0,72,64,132,4,128,32,168,161,68,40,130,129,32,68,32,0,0,0,0,0,0,0,0,0,0,0,
-251,125,237,223,251,247,190,237,94,235,223,223,238,235,253,218,173,109,187,117,186,219,64,1,0,4,32,64,21,10,2,20,17,2,32,40,138,17,0,0,0,0,0,0,0,0,0,0,0,0,
-239,239,191,123,191,190,239,187,247,191,117,117,123,190,175,85,213,181,85,170,215,85,132,80,2,32,1,18,64,64,144,129,4,72,138,130,33,68,64,0,0,0,0,0,0,0,0,0,0,0,
-190,253,251,254,246,247,186,239,93,237,223,223,222,235,251,186,186,214,218,183,90,218,129,4,72,130,72,0,21,20,10,36,81,17,16,40,132,17,16,0,0,0,0,0,0,0,0,0,0,0,
-251,223,239,219,255,222,239,189,247,119,117,187,119,190,221,215,87,91,110,218,235,110,144,0,0,8,0,68,128,65,64,136,132,68,66,66,17,4,64,0,0,0,0,0,0,0,0,0,0,0,
-239,246,190,255,183,127,186,239,125,189,223,238,221,247,183,106,234,170,169,85,45,171,4,73,34,32,34,0,41,20,40,34,17,16,17,8,68,80,0,0,0,0,0,0,0,0,0,0,0,0,
-254,223,251,221,253,246,239,187,175,215,122,187,247,93,253,221,93,224,0,0,0,53,144,0,8,1,0,34,66,33,2,136,68,5,68,34,17,5,80,0,0,0,0,0,0,0,0,0,0,0,
-187,253,239,247,183,255,189,238,245,125,239,239,93,247,87,107,170,160,0,0,0,6,129,33,0,136,18,8,16,132,72,33,16,160,17,8,132,80,0,0,0,0,0,0,0,0,0,0,0,0,
-239,183,190,223,255,109,239,123,191,223,122,221,247,109,253,213,109,160,0,0,0,1,68,4,34,1,0,128,132,33,18,132,66,21,68,66,33,2,144,0,0,0,0,0,0,0,0,0,0,0,
-254,255,251,253,187,255,123,174,237,117,223,183,125,255,111,110,182,160,0,0,0,0,0,16,0,36,72,34,34,136,64,33,16,128,17,16,148,40,32,0,0,0,0,0,0,0,0,0,0,0,
-219,237,191,119,239,182,221,251,187,223,117,253,215,85,219,218,218,224,0,0,0,0,33,65,36,0,1,0,16,34,20,136,68,73,4,68,1,2,64,0,0,0,0,0,0,0,0,0,0,0,
-255,191,239,223,126,255,238,190,239,119,223,87,125,255,126,235,107,80,0,0,0,0,8,0,0,144,36,17,68,136,129,34,18,16,160,17,80,80,128,0,0,0,0,0,0,0,0,0,0,0,
-222,253,251,125,251,237,119,235,251,221,117,253,215,183,215,109,173,160,0,0,0,0,0,18,34,2,128,68,17,2,40,9,64,132,10,132,5,4,32,0,0,0,0,0,0,0,0,0,0,0,
-247,239,111,247,223,191,221,190,174,247,223,111,126,237,125,214,182,160,0,0,0,0,34,64,128,32,1,0,68,80,130,160,20,81,64,81,80,81,0,0,0,0,0,0,0,0,0,0,0,0,
-190,253,254,255,123,251,119,107,251,189,119,187,219,191,219,122,218,224,0,0,0,0,0,4,8,132,36,1,16,10,40,10,129,4,21,4,5,4,64,0,0,0,0,0,0,0,0,0,0,0,
-251,223,219,221,238,223,221,255,110,239,221,238,246,234,247,214,171,80,0,0,0,0,18,32,32,0,128,36,5,64,130,64,40,65,64,65,32,65,16,0,0,0,0,0,0,0,0,0,0,0,
-239,247,127,247,255,250,247,173,223,186,247,123,191,191,189,235,117,160,0,0,0,0,0,129,2,34,8,128,160,20,33,20,130,40,20,20,74,20,64,0,0,0,0,0,0,0,0,0,0,0,
-190,221,253,191,119,111,189,251,117,239,189,222,234,246,239,122,218,208,0,0,0,0,34,8,8,136,32,8,10,129,8,65,17,5,65,65,0,129,0,0,0,0,0,0,0,0,0,0,0,0,
-251,255,215,251,223,254,239,95,222,185,215,119,191,187,187,173,87,96,0,0,0,0,0,1,32,0,2,33,32,40,165,18,68,80,18,20,42,40,80,0,0,0,0,0,0,0,0,0,0,0,
-239,183,127,111,125,187,187,245,123,235,125,218,237,238,237,247,106,160,0,0,0,0,16,144,2,17,8,0,9,2,0,64,17,2,64,129,0,133,0,0,0,0,0,0,0,0,0,0,0,0,
-254,255,253,253,247,239,238,191,222,249,223,127,187,123,190,181,187,96,0,0,0,0,4,4,64,64,64,136,162,80,148,21,68,72,138,40,82,32,64,0,0,0,0,0,0,0,0,0,0,0,
-187,237,183,223,222,254,187,213,235,169,245,214,239,175,235,237,85,160,0,0,0,0,16,64,8,4,2,34,8,10,33,64,17,18,32,130,8,137,16,0,0,0,0,0,0,0,0,0,0,0,
-239,191,255,123,255,223,238,255,126,249,95,125,250,250,191,118,218,160,0,0,0,0,1,9,34,32,144,0,66,160,132,18,64,64,138,36,162,34,32,0,0,0,0,0,0,0,0,0,0,0,
-254,251,109,254,237,245,123,173,175,177,245,239,95,223,237,219,111,96,0,0,0,0,32,0,0,130,1,8,40,4,33,68,21,10,0,128,8,8,128,0,0,0,0,0,0,0,0,0,0,0,
-219,239,255,219,191,127,222,251,250,233,191,117,245,117,123,122,169,160,0,0,0,0,4,68,68,8,16,33,2,81,8,17,64,64,168,42,161,66,16,0,0,0,0,0,0,0,0,0,0,0,
-255,190,238,255,251,222,235,182,175,176,235,223,95,223,223,219,118,208,0,0,0,0,17,16,0,32,132,128,80,132,69,64,18,20,2,128,8,40,64,0,0,0,0,0,0,0,0,0,0,0,
-222,251,251,221,223,251,190,255,250,241,190,247,246,246,234,237,171,96,0,0,0,0,0,1,34,0,0,9,4,17,16,21,68,129,80,37,34,130,0,0,0,0,0,0,0,0,0,0,0,0,
-247,239,191,247,253,190,239,170,223,176,237,189,111,95,127,186,181,64,0,0,0,0,4,68,8,68,72,32,73,68,68,128,16,84,5,8,68,32,160,0,0,0,0,0,0,0,0,0,0,0,
-191,126,238,223,111,239,186,255,181,224,251,215,219,245,214,238,222,224,0,0,0,0,32,0,32,1,1,0,16,16,17,37,5,1,32,161,16,138,0,0,0,0,0,0,0,0,0,0,0,0,
-251,251,251,253,253,189,239,182,255,112,222,253,126,223,125,187,107,80,0,0,0,0,2,34,2,72,16,10,133,66,132,16,80,72,74,8,66,32,160,0,0,0,0,0,0,0,0,0,0,0,
-239,111,191,119,183,255,123,221,213,208,235,175,215,118,239,237,170,160,0,0,0,0,16,136,136,0,66,64,32,16,81,69,4,18,0,133,8,138,0,0,0,0,0,0,0,0,0,0,0,0,
-189,254,247,255,255,109,221,119,127,96,190,250,253,223,186,189,91,96,0,0,0,0,2,0,0,68,0,0,138,69,4,0,81,65,84,32,66,32,144,0,0,0,0,0,0,0,0,0,0,0,
-255,219,254,221,187,255,119,223,219,224,239,183,183,117,239,246,237,160,0,0,0,0,32,2,34,1,18,72,32,136,65,42,4,20,1,20,40,132,32,0,0,0,0,0,0,0,0,0,0,0,
-238,255,183,247,239,183,221,245,118,160,122,238,237,255,123,93,86,160,0,0,0,0,4,80,8,36,0,2,10,33,20,0,161,64,148,65,2,17,0,0,0,0,0,0,0,0,0,0,0,0,
-251,238,254,222,254,253,119,95,223,224,111,187,191,85,221,247,106,224,0,0,0,0,0,23,213,170,249,16,128,4,0,164,8,18,33,20,168,68,64,0,0,0,0,0,0,0,0,0,0,0,
-191,191,239,255,219,239,221,246,245,96,122,254,235,255,111,125,183,80,0,0,0,0,0,44,182,221,168,0,32,128,66,0,2,132,132,64,2,17,16,0,0,0,0,0,0,0,0,0,0,0,
-238,246,251,119,127,190,247,93,191,192,111,171,190,173,251,214,170,160,0,0,0,0,0,55,91,106,172,146,8,17,16,9,72,32,33,18,144,132,64,0,0,0,0,0,0,0,0,0,0,0,
-251,255,191,253,246,251,189,247,214,192,123,254,247,251,93,125,189,208,0,0,0,0,0,21,173,87,112,0,130,64,0,128,2,74,136,64,36,81,0,0,0,0,0,0,0,0,0,0,0,0,
-223,182,237,183,223,239,111,190,253,192,93,87,221,111,247,214,213,96,0,0,0,0,0,45,117,186,172,68,16,4,68,34,16,128,34,21,2,4,32,0,0,0,0,0,0,0,0,0,0,0,
-253,255,255,255,127,127,250,235,175,64,111,253,119,221,93,191,86,160,0,0,0,0,0,22,173,107,180,0,64,145,0,128,66,41,8,128,80,160,128,0,0,0,0,0,0,0,0,0,0,0,
-183,183,119,109,245,246,175,190,251,192,58,183,221,183,247,245,107,96,0,0,0,0,0,59,107,173,88,146,4,0,18,9,4,2,66,42,10,10,32,0,0,0,0,0,0,0,0,0,0,0,
-255,253,253,255,223,223,251,119,174,192,63,237,247,253,189,95,189,160,0,0,0,0,0,21,181,106,232,0,16,4,64,0,1,80,40,128,160,160,128,0,0,0,0,0,0,0,0,0,0,0,
-237,191,223,222,255,125,93,221,251,128,53,191,93,87,215,245,85,96,0,0,0,0,0,45,93,183,84,136,129,80,4,72,72,5,2,36,8,9,32,0,0,0,0,0,0,0,0,0,0,0,
-191,237,247,123,247,247,247,247,94,192,62,235,247,253,125,191,107,80,0,0,0,0,0,22,230,170,184,0,4,1,16,1,2,160,80,137,66,160,0,0,0,0,0,0,0,0,0,0,0,0,
-253,191,125,255,125,190,221,93,247,128,43,190,189,183,223,107,181,160,0,0,0,0,0,59,91,118,212,73,32,4,1,36,16,10,4,32,16,10,160,0,0,0,0,0,0,0,0,0,0,0,
-239,251,223,219,223,251,247,247,93,128,62,247,215,221,245,254,174,208,0,0,0,0,0,21,109,171,105,0,1,32,68,0,69,32,162,133,69,64,0,0,0,0,0,0,0,0,0,0,0,0,
-253,223,247,127,246,223,93,189,246,128,27,221,125,119,95,87,106,160,0,0,0,0,0,45,181,93,172,17,20,1,0,33,0,74,8,32,16,21,32,0,0,0,0,0,0,0,0,0,0,0,
-183,125,189,246,223,253,247,215,191,128,55,119,223,221,245,253,182,224,0,0,0,0,0,22,214,234,176,64,64,36,17,4,9,0,162,10,133,64,64,0,0,0,0,0,0,0,0,0,0,0,
-255,247,255,223,253,183,93,125,235,0,29,221,117,127,95,111,91,64,0,0,0,0,0,58,171,86,220,4,1,0,64,16,32,82,8,160,32,18,0,0,0,0,0,0,0,0,0,0,0,0,
-221,222,219,125,183,255,247,223,125,128,31,119,223,213,247,219,213,96,0,0,0,0,0,22,221,107,104,129,16,17,4,128,133,4,66,10,138,65,80,0,0,0,0,0,0,0,0,0,0,0,
-247,255,255,247,255,109,125,245,175,0,21,222,246,255,122,253,110,160,0,0,0,0,0,43,107,93,168,16,4,128,16,4,0,81,16,160,32,136,0,0,0,0,0,0,0,0,0,0,0,0,
-223,109,183,191,119,255,215,95,251,0,31,123,189,173,223,87,181,224,0,0,0,0,0,26,181,181,90,66,64,8,65,32,37,4,68,9,10,37,32,0,0,0,0,0,0,0,0,0,0,0,
-253,255,253,251,222,221,189,245,93,0,23,222,239,251,107,253,170,160,0,0,0,0,0,45,218,214,232,0,8,66,0,4,128,65,17,66,64,128,64,0,0,0,0,0,0,0,0,0,0,0,
-239,182,223,191,127,247,239,95,247,0,13,119,186,175,254,215,222,160,0,0,0,0,0,22,174,181,89,18,33,0,18,32,10,20,4,16,40,42,0,0,0,0,0,0,0,0,0,0,0,0,
-190,255,251,237,246,254,187,246,189,0,31,221,239,251,91,189,107,96,0,0,0,0,0,58,213,219,168,0,0,18,64,2,32,129,81,69,2,128,160,0,0,0,0,0,0,0,0,0,0,0,
-251,247,110,255,223,187,238,189,239,0,10,246,186,222,246,247,181,160,0,0,0,0,0,22,182,173,116,145,18,64,4,144,4,84,4,16,80,36,0,0,0,0,0,0,0,0,0,0,0,0,
-239,189,255,183,125,239,123,239,186,0,15,191,239,183,191,189,214,160,0,0,0,0,0,43,90,214,168,4,64,4,64,1,17,1,33,5,5,9,64,0,0,0,0,0,0,0,0,0,0,0,
-190,247,221,253,247,255,174,218,239,0,10,234,187,125,234,239,106,224,0,0,0,0,0,26,235,107,108,128,2,16,8,136,64,72,72,80,80,64,16,0,0,0,0,0,0,0,0,0,0,0,
-251,255,127,223,223,109,251,255,186,0,15,191,239,215,127,187,221,80,0,0,0,0,0,45,173,181,176,33,16,65,32,0,5,18,5,4,5,21,64,0,0,0,0,0,0,0,0,0,0,0,
-239,187,246,251,125,255,94,170,238,0,6,235,122,253,214,238,235,160,0,0,0,0,0,54,182,174,220,8,1,4,2,73,16,65,80,81,64,64,0,0,0,0,0,0,0,0,0,0,0,0,
-254,239,223,223,247,182,247,255,190,0,13,190,223,175,125,251,85,96,0,0,0,0,0,43,90,213,81,0,136,0,8,0,66,20,4,4,42,20,160,0,0,0,0,0,0,0,0,0,0,0,
-187,254,251,125,223,255,221,86,244,0,7,237,245,251,215,95,251,80,0,0,0,0,0,45,171,118,220,68,32,72,160,136,4,128,145,81,0,129,0,0,0,0,0,0,0,0,0,0,0,0,
-239,187,223,247,253,219,119,253,222,0,6,191,95,93,125,234,173,160,0,0,0,0,0,53,117,155,104,16,2,0,2,2,16,82,34,4,84,84,32,0,0,0,0,0,0,0,0,0,0,0,
-254,255,125,223,119,127,221,183,116,0,7,235,246,247,223,127,234,224,0,0,0,0,0,45,174,237,84,1,16,68,128,32,130,4,136,65,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
-219,237,247,253,223,246,247,221,222,0,5,126,189,221,235,218,219,64,0,0,0,0,0,106,213,85,184,136,65,0,16,132,8,160,33,20,72,72,80,0,0,0,0,0,0,0,0,0,0,0,
-255,191,223,111,253,223,93,119,244,0,7,215,239,119,126,239,181,96,0,0,0,0,0,55,109,182,212,32,4,18,4,0,66,10,132,65,5,18,0,0,0,0,0,0,0,0,0,0,0,0,
-222,251,253,253,183,253,247,222,188,0,3,125,117,221,171,187,110,160,0,0,0,0,0,90,182,219,88,2,16,64,64,73,0,160,17,20,32,65,64,0,0,0,0,0,0,0,0,0,0,0,
-247,239,119,183,255,119,189,247,212,0,6,239,223,127,254,239,245,224,0,0,0,0,0,109,171,85,105,16,128,4,18,0,20,9,68,64,149,8,16,0,0,0,0,0,0,0,0,0,0,0,
-191,127,223,255,125,222,239,93,124,0,3,186,247,213,91,186,182,160,0,0,0,0,0,182,221,109,172,64,4,128,128,34,1,66,17,18,0,69,64,0,0,0,0,0,0,0,0,0,0,0,
-251,246,253,187,239,255,187,247,216,0,3,239,93,127,246,239,235,80,0,0,0,0,0,170,170,182,216,4,80,18,8,128,68,16,68,4,169,16,0,0,0,0,0,0,0,0,0,0,0,0,
-239,127,239,239,189,182,238,189,248,0,2,187,247,218,223,189,189,96,0,0,0,0,0,219,119,171,104,129,1,0,32,8,17,69,16,160,2,34,80,0,0,0,0,0,0,0,0,0,0,0,
-189,219,125,254,247,255,187,238,172,0,3,238,221,127,186,247,106,160,0,0,0,0,1,109,170,221,88,16,4,32,130,33,2,16,66,21,72,136,128,0,0,0,0,0,0,0,0,0,0,0,
-255,255,223,119,255,118,238,187,248,0,2,187,191,213,239,221,247,208,0,0,0,0,1,85,90,170,212,132,64,10,0,128,68,68,136,128,16,34,16,0,0,0,0,0,0,0,0,0,0,0,
-238,237,247,223,109,255,187,238,216,0,1,238,234,255,123,119,90,96,0,0,0,0,2,219,183,119,104,0,17,0,18,9,1,16,34,41,69,8,64,0,0,0,0,0,0,0,0,0,0,0,
-251,191,125,253,255,218,254,219,176,0,3,127,191,171,174,221,251,160,0,0,0,0,3,109,90,170,186,73,0,64,128,0,20,69,8,130,16,66,0,0,0,0,0,0,0,0,0,0,0,0,
-191,251,239,119,183,127,171,254,248,0,1,213,237,254,251,247,181,80,0,0,0,0,5,181,171,109,168,0,36,18,8,146,1,0,66,36,66,40,160,0,0,0,0,0,0,0,0,0,0,0,
-238,239,191,223,253,238,254,171,208,0,1,190,187,91,190,190,238,224,0,0,0,0,10,173,117,182,217,16,128,128,32,0,68,42,40,129,8,130,0,0,0,0,0,0,0,0,0,0,0,0,
-251,254,251,125,191,251,219,254,248,0,1,247,239,246,235,235,187,64,0,0,0,0,13,182,222,218,168,2,4,8,130,68,16,128,130,20,66,32,160,0,0,0,0,0,0,0,0,0,0,0,
-223,183,239,247,238,223,119,91,160,0,0,187,122,191,190,222,250,160,0,0,0,0,22,213,82,171,116,144,32,64,8,0,130,42,32,65,16,138,0,0,0,0,0,0,0,0,0,0,0,0,
-253,255,125,223,123,253,221,247,112,0,1,238,223,234,235,251,173,224,0,0,0,0,123,91,189,181,168,1,2,4,64,34,8,128,138,20,68,32,144,0,0,0,0,0,0,0,0,0,0,0,
-183,183,247,253,255,183,119,109,240,0,0,219,246,191,190,174,250,160,0,0,0,0,149,109,86,222,186,68,16,33,2,136,34,36,33,65,18,138,0,0,0,0,0,0,0,0,0,0,0,0,
-255,253,191,119,219,255,223,223,80,0,0,255,93,237,247,251,223,80,0,0,0,1,109,181,213,101,212,0,65,0,16,0,128,130,136,16,0,32,160,0,0,0,0,0,0,0,0,0,0,0,
-237,191,251,223,126,221,122,247,240,0,0,213,247,187,93,111,117,96,0,0,0,7,182,214,187,90,168,36,4,18,0,34,4,40,34,138,170,132,0,0,0,0,0,0,0,0,0,0,0,0,
-191,237,175,125,247,247,239,93,96,0,0,255,93,239,247,221,221,160,0,0,0,58,171,91,85,173,106,0,128,64,73,0,17,2,8,32,0,33,64,0,0,0,0,0,0,0,0,0,0,0,
-251,127,255,247,223,127,123,247,160,0,0,173,247,122,221,183,118,208,0,0,2,213,186,173,182,247,184,144,17,4,0,16,132,80,162,69,84,136,16,0,0,0,0,0,0,0,0,0,0,0,
-239,246,251,127,125,237,221,125,224,0,0,251,189,223,191,125,222,171,109,182,253,174,214,245,91,42,168,2,68,16,146,66,1,4,8,16,1,18,128,0,0,0,0,0,0,0,0,0,0,0,
-254,223,191,221,247,255,111,215,96,0,0,110,239,117,235,219,246,221,182,219,74,213,91,86,237,218,218,32,0,0,0,0,36,73,66,132,148,64,32,0,0,0,0,0,0,0,0,0,0,0,
-187,251,237,247,223,111,250,253,224,0,0,223,187,223,125,126,189,106,213,85,119,118,234,171,85,109,104,4,136,132,136,146,1,0,16,33,0,21,0,0,0,0,0,0,0,0,0,0,0,0,
-239,191,127,127,125,250,175,175,64,0,0,117,238,245,215,215,215,182,173,182,170,171,91,125,109,87,89,16,0,32,0,0,72,85,69,20,82,128,80,0,0,0,0,0,0,0,0,0,0,0,
-254,247,247,239,247,223,250,251,224,0,0,126,187,191,125,253,125,91,118,219,182,221,109,165,182,218,212,64,68,132,68,68,2,0,16,65,4,41,0,0,0,0,0,0,0,0,0,0,0,0,
-219,253,189,189,223,126,175,174,192,0,0,87,238,235,223,87,222,213,171,108,219,107,85,90,213,107,104,4,16,1,17,0,136,170,69,16,81,2,64,0,0,0,0,0,0,0,0,0,0,0,
-255,183,247,255,127,247,251,251,64,0,0,125,123,190,235,253,247,109,90,171,109,85,182,239,91,181,89,17,1,16,0,18,2,0,144,69,4,80,16,0,0,0,0,0,0,0,0,0,0,0,
-222,255,127,109,246,221,190,175,192,0,0,55,222,235,189,87,90,182,237,182,171,110,219,85,109,91,172,0,32,4,32,64,32,146,4,16,65,5,64,0,0,0,0,0,0,0,0,0,0,0,
-247,237,237,255,223,255,107,250,192,0,0,109,183,190,239,253,255,171,86,219,109,181,85,186,181,173,112,68,4,64,133,0,138,32,161,69,20,80,0,0,0,0,0,0,0,0,0,0,0,0,
-191,127,255,238,253,183,254,191,192,0,0,63,125,239,187,95,85,109,107,85,181,91,110,215,214,214,172,0,145,8,0,18,0,138,8,16,65,5,32,0,0,0,0,0,0,0,0,0,0,0,
-251,239,110,251,247,253,87,234,128,0,0,53,215,122,238,245,255,181,181,109,91,109,181,90,91,117,217,34,0,1,16,64,36,32,146,132,16,32,64,0,0,0,0,0,0,0,0,0,0,0,
-239,123,251,191,191,119,253,127,192,0,0,63,125,223,187,223,106,214,221,182,237,170,171,107,173,90,168,8,32,72,4,4,1,9,0,33,69,10,0,0,0,0,0,0,0,0,0,0,0,0,
-189,255,111,238,247,223,111,213,128,0,0,45,239,117,239,117,223,91,86,219,85,118,221,173,117,174,208,128,133,0,145,16,136,160,85,20,16,160,160,0,0,0,0,0,0,0,0,0,0,0,
-255,219,254,251,221,253,218,255,64,0,0,59,187,222,189,223,123,173,106,170,182,171,106,181,173,107,98,4,0,18,0,0,34,10,0,65,68,10,0,0,0,0,0,0,0,0,0,0,0,0,
-238,255,119,223,255,119,127,85,128,0,0,30,238,247,247,119,222,245,183,109,219,181,173,218,182,181,0,32,32,64,32,132,128,129,85,18,17,64,144,0,0,0,0,0,0,0,0,0,0,0,
-251,219,223,126,221,255,213,255,128,0,0,55,187,187,93,221,119,86,218,182,170,221,118,174,213,218,128,2,9,0,132,32,10,40,0,64,68,20,32,0,0,0,0,0,0,0,0,0,0,0,
-191,255,125,247,247,221,127,109,0,0,0,29,238,222,247,123,221,171,85,218,221,86,170,213,109,84,1,32,128,18,0,130,0,130,146,21,1,33,0,0,0,0,0,0,0,0,0,0,0,0,
-238,221,247,222,223,119,237,247,128,0,0,27,123,247,221,239,119,221,110,171,107,107,109,118,182,224,0,8,18,64,36,8,72,40,33,64,84,4,64,0,0,0,0,0,0,0,0,0,0,0,
-251,247,223,123,253,254,187,189,0,0,0,31,174,186,247,187,221,107,85,109,173,181,183,91,213,80,0,129,0,4,0,32,2,130,72,18,1,81,16,0,0,0,0,0,0,0,0,0,0,0,
-223,127,125,255,191,223,238,215,128,0,0,21,251,239,189,238,247,181,187,182,181,90,213,170,91,186,0,16,33,16,145,2,72,33,5,4,168,4,64,0,0,0,0,0,0,0,0,0,0,0,
-253,237,255,221,247,123,123,253,0,0,0,31,95,122,239,123,189,218,213,85,91,110,182,219,173,85,2,66,8,0,0,8,2,136,80,80,2,161,0,0,0,0,0,0,0,0,0,0,0,0,
-183,255,237,247,221,255,175,95,0,0,0,13,245,223,187,174,239,110,182,219,213,181,170,173,118,219,128,0,128,132,137,32,136,37,2,5,72,8,80,0,0,0,0,0,0,0,0,0,0,0,
-255,110,255,127,127,218,253,245,0,0,0,27,111,107,110,251,187,171,91,109,110,214,221,181,171,109,96,136,18,16,0,2,2,0,40,160,18,69,0,0,0,0,0,0,0,0,0,0,0,0,
-237,251,183,221,247,127,183,95,0,0,0,15,221,254,251,190,238,245,213,170,181,90,170,218,218,181,186,1,0,1,36,136,32,170,130,10,64,144,64,0,0,0,0,0,0,0,0,0,0,0,
-191,223,253,247,223,238,253,245,0,0,0,13,119,91,174,235,187,173,110,183,86,214,238,175,109,173,84,36,32,144,0,0,10,0,32,160,138,4,16,0,0,0,0,0,0,0,0,0,0,0,
-254,254,223,191,125,191,175,110,0,0,0,15,223,247,251,190,254,235,85,90,219,107,85,213,86,214,239,0,4,4,68,68,128,169,10,10,32,161,64,0,0,0,0,0,0,0,0,0,0,0,
-235,235,246,253,247,250,245,251,0,0,0,10,250,189,94,235,215,181,187,213,109,93,118,186,218,187,85,145,16,128,16,16,18,2,64,144,8,8,0,0,0,0,0,0,0,0,0,0,0,0,
-255,191,191,239,222,239,191,94,0,0,0,15,175,239,247,190,250,238,213,111,181,181,170,215,107,85,118,192,64,34,65,0,128,144,42,2,162,162,160,0,0,0,0,0,0,0,0,0,0,0,
-190,254,251,190,255,254,237,246,0,0,0,5,250,186,186,247,175,181,90,180,170,214,183,89,93,219,170,178,4,128,0,68,10,37,0,168,8,8,0,0,0,0,0,0,0,0,0,0,0,0,
-235,239,239,247,237,183,187,186,0,0,0,15,95,239,239,221,251,235,111,87,111,107,90,215,106,173,93,216,16,9,9,0,64,128,82,2,162,146,160,0,0,0,0,0,0,0,0,0,0,0,
-255,187,126,222,255,254,238,238,0,0,0,5,245,187,123,119,94,181,169,186,181,93,213,109,173,117,170,168,129,0,32,18,9,21,4,80,8,32,0,0,0,0,0,0,0,0,0,0,0,0,
-222,255,247,255,182,219,251,186,0,0,0,15,95,125,222,221,247,238,222,213,218,213,111,85,118,214,238,222,4,36,130,0,32,64,81,5,33,10,64,0,0,0,0,0,0,0,0,0,0,0,
-251,237,190,237,255,255,94,236,0,0,0,5,245,215,119,247,90,181,106,174,171,109,85,187,85,171,53,106,32,0,8,72,133,18,4,72,8,160,144,0,0,0,0,0,0,0,0,0,0,0,
-191,191,247,191,219,110,247,188,0,0,0,15,127,125,218,189,255,246,171,117,109,182,237,85,174,189,214,181,129,34,32,0,0,68,144,33,68,4,0,0,0,0,0,0,0,0,0,0,0,0,
-237,251,190,251,127,251,221,236,0,0,0,5,213,239,127,239,106,181,221,171,182,171,86,238,218,213,91,174,136,8,1,34,37,16,66,132,33,34,160,0,0,0,0,0,0,0,0,0,0,0,
-255,222,251,239,247,127,119,124,0,0,0,15,127,187,214,187,223,238,170,181,90,218,187,85,107,107,108,213,65,0,136,0,128,66,16,33,8,136,0,0,0,0,0,0,0,0,0,0,0,0,
-221,255,239,190,223,221,221,212,0,0,0,5,214,238,253,238,246,181,118,221,171,109,213,109,181,173,183,118,200,34,0,136,10,8,138,136,162,34,64,0,0,0,0,0,0,0,0,0,0,0,
-247,107,190,251,251,119,119,124,0,0,0,7,125,187,175,187,189,251,171,102,221,170,173,182,218,182,170,171,96,128,36,2,32,162,32,36,8,136,32,0,0,0,0,0,0,0,0,0,0,0,
-223,255,251,255,191,255,221,216,0,0,0,11,223,238,250,238,239,173,93,186,170,183,118,218,174,218,219,93,178,8,128,72,4,8,137,1,34,34,128,0,0,0,0,0,0,0,0,0,0,0,
-253,189,191,219,246,237,127,116,0,0,0,6,245,123,175,191,186,250,234,171,118,218,171,86,213,107,109,181,80,32,2,0,129,66,32,168,136,128,32,0,0,0,0,0,0,0,0,0,0,0,
-223,247,238,254,223,191,235,216,0,0,0,11,191,222,251,234,239,183,86,213,171,109,218,181,109,173,170,214,216,130,40,34,20,16,138,2,34,21,0,0,0,0,0,0,0,0,0,0,0,0,
-247,126,251,219,253,253,189,120,0,0,0,6,234,235,222,191,187,218,187,110,221,86,173,219,182,214,182,181,108,0,128,128,1,36,32,144,128,64,64,0,0,0,0,0,0,0,0,0,0,0,
-189,239,191,127,183,239,239,216,0,0,0,11,191,191,119,237,238,251,85,85,107,181,118,173,91,122,219,91,180,36,2,8,144,130,132,36,42,21,16,0,0,0,0,0,0,0,0,0,0,0,
-255,251,239,246,255,125,118,240,0,0,0,6,234,237,221,123,123,88,0,0,0,91,170,213,170,171,106,237,85,0,32,32,4,40,17,2,128,128,64,0,0,0,0,0,0,0,0,0,0,0,
-238,222,251,191,251,239,187,184,0,0,0,11,191,187,119,175,175,248,0,0,0,5,91,110,219,85,173,85,182,17,4,2,66,129,68,80,36,84,0,0,0,0,0,0,0,0,0,0,0,0,
-187,255,222,251,175,189,238,232,0,0,0,6,246,239,221,250,250,216,0,0,0,0,173,181,109,186,183,110,218,64,16,136,8,20,17,10,137,1,80,0,0,0,0,0,0,0,0,0,0,0,
-255,182,255,223,254,255,123,176,0,0,0,11,189,250,247,111,223,184,0,0,0,0,54,171,86,215,90,181,87,4,128,32,129,65,4,64,32,72,0,0,0,0,0,0,0,0,0,0,0,0,
-238,255,237,251,123,237,222,240,0,0,0,5,239,95,189,221,118,236,0,0,0,0,10,221,186,170,235,91,106,128,4,130,20,16,81,18,10,34,160,0,0,0,0,0,0,0,0,0,0,0,
-251,237,191,111,223,191,119,176,0,0,0,13,181,246,239,119,221,220,0,0,0,0,3,106,213,189,90,237,187,18,64,0,1,5,4,68,160,136,0,0,0,0,0,0,0,0,0,0,0,0,
-191,191,247,254,253,247,221,224,0,0,0,6,255,93,187,221,247,116,0,0,0,0,1,173,90,214,215,85,85,128,18,16,132,80,80,16,9,2,144,0,0,0,0,0,0,0,0,0,0,0,
-238,251,125,219,239,221,119,112,0,0,0,11,173,247,238,247,93,252,0,0,0,0,0,182,239,107,106,182,218,145,0,68,33,5,5,69,66,80,32,0,0,0,0,0,0,0,0,0,0,0,
-251,239,223,127,189,255,221,208,0,0,0,5,123,189,123,189,247,172,0,0,0,0,0,213,169,90,187,91,110,192,34,0,4,80,64,16,16,10,128,0,0,0,0,0,0,0,0,0,0,0,
-223,190,251,253,247,118,247,96,0,0,0,11,222,239,222,239,94,246,0,0,0,0,0,54,183,109,173,237,85,68,128,34,65,4,149,66,69,64,16,0,0,0,0,0,0,0,0,0,0,0,
-254,251,239,215,223,223,189,224,0,0,0,5,119,186,235,187,247,188,0,0,0,0,0,43,90,182,213,43,109,160,9,0,20,33,0,8,144,20,128,0,0,0,0,0,0,0,0,0,0,0,
-183,239,190,255,125,253,215,96,0,0,0,14,237,239,190,238,189,214,0,0,0,0,0,61,173,213,109,218,182,196,32,18,1,8,84,162,4,129,32,0,0,0,0,0,0,0,0,0,0,0,
-254,254,251,221,247,183,125,224,0,0,0,5,190,186,239,187,238,254,0,0,0,0,0,10,246,173,182,173,219,96,128,128,132,69,1,8,162,40,0,0,0,0,0,0,0,0,0,0,0,0,
-239,187,239,127,223,255,223,64,0,0,0,6,235,239,186,238,219,170,0,0,0,0,0,22,149,118,170,246,170,162,8,8,33,16,72,34,8,130,160,0,0,0,0,0,0,0,0,0,0,0,
-187,239,191,246,253,186,245,224,0,0,0,10,255,123,239,187,254,254,0,0,0,0,0,11,109,171,109,85,109,176,2,65,4,68,18,136,66,40,0,0,0,0,0,0,0,0,0,0,0,0,
-254,254,251,191,239,239,191,64,0,0,0,7,85,222,186,254,171,182,0,0,0,0,0,13,182,218,183,91,182,208,144,4,17,17,64,33,16,130,64,0,0,0,0,0,0,0,0,0,0,0,
-239,219,238,251,126,254,235,224,0,0,0,10,255,119,239,171,254,239,0,0,0,0,0,5,91,86,218,237,90,162,1,32,64,68,21,8,68,16,144,0,0,0,0,0,0,0,0,0,0,0,
-253,255,255,239,239,187,190,192,0,0,0,5,91,221,123,254,215,186,0,0,0,0,0,6,234,187,107,85,171,112,36,1,5,1,64,66,17,68,0,0,0,0,0,0,0,0,0,0,0,0,
-183,189,187,190,251,255,235,128,0,0,0,14,246,247,222,175,125,239,0,0,0,0,0,3,86,213,173,110,237,168,128,16,0,84,18,40,132,17,64,0,0,0,0,0,0,0,0,0,0,0,
-255,239,239,251,190,218,190,192,0,0,0,5,95,93,119,251,219,125,0,0,0,0,0,5,109,109,107,85,86,178,1,4,74,1,4,130,81,68,32,0,0,0,0,0,0,0,0,0,0,0,
-221,189,190,223,239,255,237,192,0,0,0,6,245,247,221,93,119,175,0,0,0,0,0,3,182,182,181,187,106,208,20,65,0,168,80,32,4,17,0,0,0,0,0,0,0,0,0,0,0,0,
-247,247,251,253,251,110,247,128,0,0,0,11,95,189,247,247,221,251,0,0,0,0,0,2,171,213,221,109,187,104,128,8,18,2,5,10,161,4,64,0,0,0,0,0,0,0,0,0,0,0,
-222,255,127,111,111,251,189,128,0,0,0,5,186,239,93,93,247,111,128,0,0,0,0,2,218,90,171,170,173,180,1,0,64,145,80,64,8,81,16,0,0,0,0,0,0,0,0,0,0,0,
-255,187,237,253,254,239,215,128,0,0,0,13,111,187,247,247,94,250,128,0,0,0,0,3,109,238,213,109,181,88,72,36,4,68,4,149,69,4,64,0,0,0,0,0,0,0,0,0,0,0,
-237,239,191,239,223,190,253,128,0,0,0,6,251,238,189,189,247,175,128,0,0,0,0,1,86,171,110,182,214,209,0,129,17,17,33,0,16,80,0,0,0,0,0,0,0,0,0,0,0,0,
-191,254,247,126,251,251,175,128,0,0,0,11,94,187,215,111,93,250,128,0,0,0,0,2,219,90,181,170,181,108,18,8,4,68,72,85,68,2,160,0,0,0,0,0,0,0,0,0,0,0,
-251,119,255,239,238,239,122,128,0,0,0,5,107,238,253,251,247,95,128,0,0,0,0,1,109,109,173,109,175,176,64,32,129,17,5,0,17,80,0,0,0,0,0,0,0,0,0,0,0,0,
-239,222,219,123,127,191,223,128,0,0,0,11,94,187,175,93,125,245,128,0,0,0,0,1,181,182,214,182,212,172,1,2,36,64,80,73,4,5,64,0,0,0,0,0,0,0,0,0,0,0,
-190,251,255,239,237,250,245,0,0,0,0,5,187,238,251,247,215,95,192,0,0,0,0,1,170,213,123,219,119,116,136,8,1,10,2,16,161,80,16,0,0,0,0,0,0,0,0,0,0,0,
-251,239,182,254,255,239,191,128,0,0,0,14,222,251,182,221,125,245,64,0,0,0,0,1,111,91,74,85,90,168,0,128,20,33,72,132,20,5,64,0,0,0,0,0,0,0,0,0,0,0,
-239,190,255,187,183,126,235,0,0,0,0,5,107,175,239,119,215,191,192,0,0,0,0,1,181,109,187,182,213,220,72,34,64,136,18,34,129,32,0,0,0,0,0,0,0,0,0,0,0,0,
-254,255,237,239,253,247,189,0,0,0,0,6,190,250,187,221,253,214,192,0,0,0,0,1,90,181,109,91,91,105,2,0,4,34,64,136,36,20,160,0,0,0,0,0,0,0,0,0,0,0,
-187,237,191,254,239,190,239,0,0,0,0,11,91,175,238,247,87,125,128,0,0,0,0,1,173,214,170,237,109,84,16,146,33,8,138,34,65,65,0,0,0,0,0,0,0,0,0,0,0,0,
-239,191,251,119,191,247,187,0,0,0,0,5,222,253,189,189,253,219,224,0,0,0,0,1,118,181,219,85,181,184,64,0,132,162,32,136,20,16,32,0,0,0,0,0,0,0,0,0,0,0,
-254,251,111,223,250,222,238,0,0,0,0,13,107,215,119,215,95,126,192,0,0,0,0,1,170,219,109,182,214,213,4,68,0,8,136,34,129,5,0,0,0,0,0,0,0,0,0,0,0,0,
-219,239,254,253,223,255,187,0,0,0,0,6,190,253,221,125,245,215,160,0,0,0,0,1,91,85,86,219,91,88,1,0,37,66,5,8,40,160,160,0,0,0,0,0,0,0,0,0,0,0,
-255,190,247,239,127,117,238,0,0,0,0,11,87,175,119,239,191,125,224,0,0,0,0,1,109,187,181,85,109,108,72,17,0,16,80,65,4,20,0,0,0,0,0,0,0,0,0,0,0,0,
-222,251,223,125,245,255,122,0,0,0,0,5,186,251,222,186,235,219,96,0,0,0,0,1,181,86,219,109,181,170,0,64,21,69,5,20,81,65,64,0,0,0,0,0,0,0,0,0,0,0,
-247,239,253,247,223,221,222,0,0,0,0,10,207,174,251,239,190,247,160,0,0,0,0,0,214,234,173,182,214,216,68,4,128,16,80,65,4,8,16,0,0,0,0,0,0,0,0,0,0,0,
-191,126,223,191,127,119,118,0,0,0,0,13,123,123,174,251,235,189,224,0,0,0,0,1,91,93,181,91,91,108,17,16,4,133,2,20,81,34,128,0,0,0,0,0,0,0,0,0,0,0,
-251,251,246,251,245,255,223,255,255,255,255,247,221,238,251,174,190,239,96,0,0,0,0,1,173,106,214,234,173,85,0,1,33,32,72,129,4,8,64,0,0,0,0,0,0,0,0,0,0,0,
-239,111,191,239,191,221,117,251,239,187,182,222,239,123,182,251,237,187,176,0,0,0,0,1,117,173,107,86,245,180,32,136,4,20,18,40,65,66,16,0,0,0,0,0,0,0,0,0,0,0,
-189,254,251,190,255,119,223,94,186,238,255,247,123,222,255,174,191,237,224,0,0,0,0,1,174,215,93,187,86,216,132,32,145,65,64,130,20,40,128,0,0,0,0,0,0,0,0,0,0,0,
-255,219,239,251,235,255,123,235,239,187,170,187,221,119,170,251,234,191,112,0,0,0,0,0,179,106,234,213,90,172,0,130,0,8,20,40,129,2,32,0,0,0,0,0,0,0,0,0,0,0,
-238,255,189,191,191,123,221,126,187,126,255,222,239,221,255,190,255,235,176,0,0,0,0,1,221,93,86,173,214,212,36,0,10,162,129,2,40,72,128,0,0,0,0,0,0,0,0,0,0,0,
-251,238,255,237,253,222,247,215,239,215,181,119,117,183,86,235,170,254,240,0,0,0,0,1,85,171,187,118,187,116,128,36,64,8,40,160,130,34,32,0,0,0,0,0,0,0,0,0,0,0,
-191,191,237,191,223,251,189,125,122,250,255,221,223,125,253,222,255,171,176,0,0,0,0,1,109,117,85,170,213,172,9,0,9,34,130,10,40,136,128,0,0,0,0,0,0,0,0,0,0,0,
-238,246,255,251,119,111,215,215,223,175,171,119,118,239,111,123,173,254,248,0,0,0,0,1,182,219,109,91,90,180,64,18,66,8,40,144,130,34,16,0,0,0,0,0,0,0,0,0,0,0,
-251,255,182,239,253,254,253,253,117,253,254,253,223,187,187,222,251,87,168,0,0,0,0,1,85,85,182,237,173,170,2,64,8,162,2,34,36,128,64,0,0,0,0,0,0,0,0,0,0,0,
-223,182,255,190,223,219,175,87,223,87,91,175,117,238,238,247,183,253,248,0,0,0,0,1,110,222,213,86,214,216,32,1,32,8,168,136,128,42,16,0,0,0,0,0,0,0,0,0,0,0,
-253,255,237,251,251,127,123,253,245,253,247,245,255,123,187,186,253,87,88,0,0,0,0,1,181,106,183,106,187,108,136,136,5,66,2,2,42,129,64,0,0,0,0,0,0,0,0,0,0,0,
-183,183,127,239,191,253,238,175,95,111,109,95,85,222,254,223,175,253,232,0,0,0,0,0,214,181,170,187,85,84,2,1,0,16,160,168,0,36,0,0,0,0,0,0,0,0,0,0,0,0,
-255,253,247,126,246,215,187,251,247,187,223,251,255,107,171,245,250,223,120,0,0,0,0,1,91,214,221,213,219,108,64,36,37,68,10,2,169,8,160,0,0,0,0,0,0,0,0,0,0,0,
-237,191,223,239,255,254,238,174,189,238,246,174,173,254,254,191,95,181,220,0,0,0,0,1,173,91,106,174,173,180,8,128,0,17,64,144,2,66,0,0,0,0,0,0,0,0,0,0,0,0,
-191,238,251,123,183,127,187,251,238,187,93,251,251,91,215,235,245,255,116,0,0,0,0,1,117,109,87,117,118,170,32,1,37,36,20,37,72,16,144,0,0,0,0,0,0,0,0,0,0,0,
-253,187,239,239,253,234,238,222,183,239,247,190,223,247,125,125,95,85,220,0,0,0,0,1,171,170,218,171,170,220,2,40,0,65,65,0,17,68,32,0,0,0,0,0,0,0,0,0,0,0,
-239,255,190,254,223,255,191,183,253,122,222,235,234,221,219,215,245,255,116,0,0,0,0,0,182,183,109,181,91,104,136,1,21,20,20,84,132,17,0,0,0,0,0,0,0,0,0,0,0,0,
-253,221,251,187,247,110,245,250,175,223,187,190,191,191,119,125,191,107,220,0,0,0,0,1,218,218,182,221,173,172,32,132,0,64,129,1,33,68,160,0,0,0,0,0,0,0,0,0,0,0,
-183,127,191,239,125,255,222,175,250,234,238,235,237,235,221,215,215,190,244,0,0,0,0,1,86,171,85,86,246,180,2,16,68,10,40,84,20,16,0,0,0,0,0,0,0,0,0,0,0,0,
-255,246,238,255,223,182,247,251,111,127,187,190,190,189,127,125,125,235,190,0,0,0,0,1,107,117,219,106,149,90,64,0,17,64,130,1,65,5,32,0,0,0,0,0,0,0,0,0,0,0,
-221,223,251,219,123,255,93,111,187,214,254,247,235,239,213,239,219,126,236,0,0,0,0,1,186,174,173,182,237,232,8,146,64,41,17,72,8,80,64,0,0,0,0,0,0,0,0,0,0,0,
-247,251,191,127,254,219,247,221,238,253,215,189,190,251,127,122,247,175,186,0,0,0,0,0,205,213,118,171,86,172,130,0,5,2,68,18,66,5,0,0,0,0,0,0,0,0,0,0,0,0,
-223,111,247,251,183,254,189,118,187,175,122,238,239,174,235,223,189,250,238,0,0,0,0,1,118,187,170,221,122,180,16,33,16,168,17,33,17,80,64,0,0,0,0,0,0,0,0,0,0,0,
-253,254,222,222,255,119,239,255,238,251,223,187,186,251,190,234,239,95,190,0,0,0,0,1,171,85,91,107,171,172,64,132,2,2,68,8,72,4,32,0,0,0,0,0,0,0,0,0,0,0,
-239,187,255,251,237,254,218,170,251,174,246,238,239,174,237,191,187,245,234,0,0,0,0,1,90,237,173,181,85,116,4,0,72,144,145,66,5,65,0,0,0,0,0,0,0,0,0,0,0,0,
-190,255,118,239,191,183,191,255,175,251,187,187,250,251,251,237,238,190,191,0,0,0,0,1,109,86,246,173,187,84,128,34,2,4,4,17,80,20,160,0,0,0,0,0,0,0,0,0,0,0,
-251,237,255,190,251,254,235,86,250,174,222,254,175,190,174,187,123,215,237,0,0,0,0,1,182,219,42,214,213,180,18,8,32,162,160,136,4,128,0,0,0,0,0,0,0,0,0,0,0,0,
-239,191,219,251,239,111,190,253,175,251,247,171,251,235,251,239,174,253,123,0,0,0,0,1,85,109,219,107,94,218,0,128,132,16,10,34,144,85,64,0,0,0,0,0,0,0,0,0,0,0,
-190,251,126,239,255,250,247,219,251,94,186,254,222,190,222,250,251,175,222,0,0,0,0,1,183,181,109,189,106,172,72,34,2,133,32,136,34,0,16,0,0,0,0,0,0,0,0,0,0,0,
-251,239,239,191,109,191,186,238,222,247,239,215,183,235,183,175,222,250,235,0,0,0,0,1,90,171,85,85,171,104,1,0,36,32,73,34,137,85,64,0,0,0,0,0,0,0,0,0,0,0,
-239,191,189,251,255,238,239,191,119,221,123,125,250,190,253,251,119,183,191,0,0,0,0,1,234,221,109,170,221,181,36,17,0,138,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-254,250,255,239,109,191,187,117,221,119,221,219,95,239,174,174,221,238,237,128,0,0,0,2,173,107,182,222,170,172,0,64,18,32,168,130,85,36,160,0,0,0,0,0,0,0,0,0,0,0,
-187,239,237,191,255,250,239,223,119,221,183,119,245,122,251,251,247,123,191,0,0,0,0,2,183,172,171,107,118,212,17,4,128,138,2,40,0,66,0,0,0,0,0,0,0,0,0,0,0,0,
-239,191,191,251,110,239,189,117,253,119,253,221,95,223,183,94,189,174,235,128,0,0,0,2,218,183,109,85,171,120,128,0,10,32,144,130,170,16,144,0,0,0,0,0,0,0,0,0,0,0,
-254,253,251,111,251,254,247,223,87,222,175,127,246,234,253,247,239,251,253,0,0,0,0,3,106,213,181,186,181,168,8,72,128,132,36,40,0,138,0,0,0,0,0,0,0,0,0,0,0,0,
-219,247,223,253,191,111,221,123,253,251,245,234,221,191,175,109,186,190,175,128,0,0,0,2,173,109,90,214,221,84,130,2,18,34,129,2,82,32,160,0,0,0,0,0,0,0,0,0,0,0,
-255,222,251,119,247,251,119,222,175,94,191,127,183,237,245,222,239,235,251,128,0,0,0,3,119,86,239,91,107,104,32,32,0,136,40,160,132,136,0,0,0,0,0,0,0,0,0,0,0,0,
-222,255,223,223,126,223,221,235,251,235,235,213,253,123,95,119,186,190,221,128,0,0,0,5,170,235,85,109,173,186,4,132,74,34,2,10,16,34,160,0,0,0,0,0,0,0,0,0,0,0,
-247,219,125,253,239,253,119,126,221,126,190,255,87,223,251,221,239,235,183,192,0,0,0,6,181,93,106,181,85,80,64,0,0,136,168,144,133,8,0,0,0,0,0,0,0,0,0,0,0,0,
-190,255,247,191,251,111,223,183,247,219,247,173,254,234,174,247,123,126,253,64,0,0,0,5,175,107,93,214,238,217,8,73,36,33,2,4,32,66,144,0,0,0,0,0,0,0,0,0,0,0,
-251,237,222,247,111,253,104,170,42,85,84,183,87,127,251,189,222,215,215,192,0,0,0,14,213,173,170,181,91,104,2,0,1,4,36,81,21,16,32,0,0,0,0,0,0,0,0,0,0,0,
-239,191,127,253,254,223,128,0,0,0,0,5,106,171,110,239,119,253,125,64,0,0,0,10,186,181,119,91,170,176,72,34,36,81,17,4,64,69,0,0,0,0,0,0,0,0,0,0,0,0,
-190,251,247,111,187,246,128,0,0,0,0,11,187,126,251,187,221,87,215,192,0,0,0,27,86,219,90,237,118,212,0,128,1,4,64,81,18,16,64,0,0,0,0,0,0,0,0,0,0,0,
-251,239,221,254,255,191,0,0,0,0,0,5,85,171,174,238,247,253,190,192,0,0,0,21,219,109,171,85,171,81,34,9,36,81,21,4,68,133,16,0,0,0,0,0,0,0,0,0,0,0,
-239,190,255,219,237,251,0,0,0,0,0,14,218,222,251,251,189,111,119,96,0,0,0,58,173,85,109,110,181,176,0,32,1,4,64,65,16,80,64,0,0,0,0,0,0,0,0,0,0,0,
-254,251,219,127,191,223,0,0,0,0,0,5,110,187,223,94,215,219,221,192,0,0,0,87,117,182,182,181,174,210,16,129,20,65,10,20,5,4,0,0,0,0,0,0,0,0,0,0,0,0,
-187,239,127,246,246,251,0,0,0,0,0,11,85,175,117,235,253,190,247,96,0,0,0,218,170,219,219,86,218,160,68,4,1,20,32,129,80,33,80,0,0,0,0,0,0,0,0,0,0,0,
-239,191,247,191,255,223,0,0,0,0,0,5,182,221,223,126,175,119,93,224,0,0,1,109,183,106,106,234,171,105,0,32,68,32,137,40,4,136,0,0,0,0,0,0,0,0,0,0,0,0,
-254,251,190,247,109,250,0,0,0,0,0,13,90,183,117,215,251,221,247,160,0,0,3,86,218,173,173,93,221,160,17,2,1,10,34,5,80,34,160,0,0,0,0,0,0,0,0,0,0,0,
-219,238,251,223,255,111,0,0,0,0,0,6,237,221,223,125,110,247,125,224,0,0,13,181,107,118,215,106,170,208,64,16,36,64,136,160,5,8,0,0,0,0,0,0,0,0,0,0,0,0,
-255,191,239,253,183,254,0,0,0,0,0,11,86,175,123,219,219,189,215,96,0,0,54,219,93,171,106,183,118,162,4,129,1,18,32,10,64,162,160,0,0,0,0,0,0,0,0,0,0,0,
-222,253,190,239,254,218,0,0,0,0,0,5,106,219,222,247,126,239,125,240,0,2,218,173,170,181,93,218,171,64,16,16,36,68,10,160,148,8,0,0,0,0,0,0,0,0,0,0,0,0,
-247,247,251,189,187,255,247,118,219,109,182,223,255,189,119,93,215,181,215,85,85,109,171,117,109,219,170,171,109,201,65,4,129,17,64,9,1,66,64,0,0,0,0,0,0,0,0,0,0,0,
-191,127,223,255,239,191,191,255,255,255,255,253,182,247,221,247,125,255,125,251,182,182,221,173,182,173,119,109,182,64,4,32,8,68,21,32,84,16,144,0,0,0,0,0,0,0,0,0,0,0,
-251,219,125,219,126,245,251,183,119,187,187,183,255,253,247,125,238,171,223,109,91,171,106,182,213,106,170,182,171,132,16,1,2,16,128,74,1,68,0,0,0,0,0,0,0,0,0,0,0,0,
-239,127,239,127,247,255,174,253,254,254,254,255,109,183,93,215,187,254,245,218,237,117,86,213,91,183,109,213,186,144,128,136,36,130,41,0,164,17,64,0,0,0,0,0,0,0,0,0,0,0,
-189,246,253,246,223,110,255,223,219,239,239,237,255,253,247,125,238,215,95,119,85,174,219,109,173,90,182,182,214,128,4,32,128,80,130,42,8,132,32,0,0,0,0,0,0,0,0,0,0,0,
-255,223,183,223,253,251,251,251,127,187,187,191,219,183,93,215,123,189,245,250,182,181,109,86,245,171,218,218,171,4,144,2,10,4,40,128,162,33,0,0,0,0,0,0,0,0,0,0,0,0,
-238,253,255,125,183,223,190,223,246,254,254,254,254,255,247,253,222,247,127,91,90,215,181,187,86,221,86,171,117,32,1,8,32,162,130,36,8,136,160,0,0,0,0,0,0,0,0,0,0,0,
-251,247,221,247,255,125,239,251,223,239,239,235,223,237,125,95,119,189,215,237,237,106,173,106,171,106,181,181,174,2,32,64,2,8,32,130,130,34,0,0,0,0,0,0,0,0,0,0,0,0,
-191,191,127,223,123,247,251,111,125,189,189,191,247,127,175,245,221,239,122,186,171,186,214,214,221,86,218,222,181,16,4,4,136,162,138,40,40,8,144,0,0,0,0,0,0,0,0,0,0,0,
-238,247,247,125,239,191,111,255,247,255,255,254,221,245,245,191,119,117,223,253,90,173,107,91,107,107,111,106,212,65,33,32,2,8,32,130,66,162,0,0,0,0,0,0,0,0,0,0,0,0,
-251,222,221,255,253,247,254,246,223,219,219,219,255,223,95,107,221,191,117,171,173,183,93,173,90,189,169,85,108,4,0,2,72,130,10,16,136,8,160,0,0,0,0,0,0,0,0,0,0,0,
-223,255,255,219,111,189,187,223,253,126,254,255,119,125,251,253,119,235,223,125,118,213,181,117,173,213,94,219,180,128,72,136,2,40,160,68,33,66,0,0,0,0,0,0,0,0,0,0,0,0,
-253,182,238,255,254,255,239,251,119,247,219,221,253,247,110,175,221,126,246,237,171,90,214,174,246,171,107,109,88,17,2,0,32,130,9,17,8,16,144,0,0,0,0,0,0,0,0,0,0,0,
-183,255,187,237,183,237,190,223,223,223,127,119,223,223,187,250,255,215,95,190,218,173,107,181,85,117,181,86,208,68,8,34,132,40,162,68,69,68,32,0,0,0,0,0,0,0,0,0,0,0,
-255,118,255,191,254,255,251,253,253,253,247,255,119,125,238,223,170,251,245,234,173,246,181,86,173,174,214,219,100,0,64,8,2,130,8,17,16,17,0,0,0,0,0,0,0,0,0,0,0,0,
-237,223,238,251,111,182,239,183,183,111,222,239,253,247,123,181,255,174,223,126,234,149,221,219,118,213,91,109,81,17,2,64,36,16,66,132,68,132,64,0,0,0,0,0,0,0,0,0,0,0,
-191,253,191,239,251,255,190,254,255,253,255,251,111,222,222,255,86,251,187,171,93,238,170,173,171,109,173,85,160,0,16,2,0,133,16,33,16,81,16,0,0,0,0,0,0,0,0,0,0,0,
-254,247,251,126,239,109,251,239,251,183,109,191,255,127,235,213,253,174,238,254,170,181,109,181,90,182,245,186,194,72,65,16,146,32,68,136,69,4,64,0,0,0,0,0,0,0,0,0,0,0,
-235,223,223,247,191,255,239,189,175,255,255,237,187,246,190,255,111,251,251,182,238,171,182,219,109,171,86,215,8,2,4,0,0,149,17,34,16,65,0,0,0,0,0,0,0,0,0,0,0,0,
-255,253,123,191,251,118,254,255,254,221,219,127,239,191,239,171,186,190,174,239,85,221,85,109,182,218,171,90,128,32,16,73,10,0,68,8,130,20,80,0,0,0,0,0,0,0,0,0,0,0,
-189,183,254,246,239,223,187,237,251,247,255,246,253,250,186,254,239,235,251,186,186,170,219,170,213,109,189,107,34,4,129,0,32,169,1,66,40,129,0,0,0,0,0,0,0,0,0,0,0,0,
-239,255,219,223,190,253,239,191,95,127,109,191,223,191,239,171,187,126,222,255,107,109,109,91,91,86,213,180,0,144,4,18,4,2,40,16,130,40,64,0,0,0,0,0,0,0,0,0,0,0,
-253,187,127,253,251,239,254,251,251,221,255,247,123,238,250,254,253,215,183,171,173,183,85,173,109,186,170,220,18,0,80,64,65,72,133,68,40,130,16,0,0,0,0,0,0,0,0,0,0,0,
-223,239,238,239,223,190,219,239,239,247,183,125,254,251,175,183,215,125,250,254,182,213,186,246,182,214,239,81,64,4,0,1,8,16,32,18,130,40,128,0,0,0,0,0,0,0,0,0,0,0,
-246,254,251,189,253,251,255,190,190,223,253,223,219,223,251,237,125,215,95,215,90,182,215,85,213,91,85,104,4,81,4,136,2,133,18,64,32,130,32,0,0,0,0,0,0,0,0,0,0,0,
-191,187,223,255,111,223,110,251,251,253,191,247,127,253,94,191,215,253,235,125,214,218,170,173,91,106,186,160,16,0,64,0,144,80,132,20,138,16,128,0,0,0,0,0,0,0,0,0,0,0,
-251,239,126,237,253,251,255,239,239,191,238,253,246,223,247,235,125,87,126,219,107,86,221,182,237,182,215,196,129,4,18,36,5,4,33,65,32,138,32,0,0,0,0,0,0,0,0,0,0,0,
-239,127,247,191,223,111,182,254,254,246,251,183,223,247,93,126,239,253,219,247,93,107,106,219,86,171,106,0,4,32,0,0,64,65,20,20,10,32,128,0,0,0,0,0,0,0,0,0,0,0,
-191,251,190,251,119,254,255,187,187,255,191,255,125,189,247,171,186,183,119,93,171,93,87,106,181,186,182,146,64,2,136,146,10,20,65,65,64,136,32,0,0,0,0,0,0,0,0,0,0,0,
-251,110,247,239,253,187,237,255,239,182,246,221,247,247,189,254,239,239,221,247,218,234,237,91,90,215,90,0,17,32,32,0,32,129,16,8,18,34,128,0,0,0,0,0,0,0,0,0,0,0,
-239,255,255,126,239,239,191,219,190,255,255,255,223,127,238,219,251,122,247,126,173,87,85,173,237,90,232,34,4,8,2,68,132,84,69,34,68,8,32,0,0,0,0,0,0,0,0,0,0,0,
-253,183,109,247,254,254,251,126,251,237,183,109,253,237,187,190,175,175,189,215,215,106,186,214,171,171,80,128,64,65,8,0,1,1,16,136,145,66,128,0,0,0,0,0,0,0,0,0,0,0,
-183,253,255,223,111,187,239,239,239,191,253,255,119,255,238,235,250,250,239,122,186,189,215,117,93,117,128,9,8,4,64,145,20,72,68,34,4,16,32,0,0,0,0,0,0,0,0,0,0,0,
-255,119,219,125,251,239,190,253,190,251,183,219,255,110,187,254,223,191,187,223,213,213,90,173,170,174,1,0,1,16,2,4,1,5,1,8,80,138,0,0,0,0,0,0,0,0,0,0,0,0,
-221,255,127,247,190,254,251,223,255,239,255,127,183,251,238,171,181,235,110,245,110,171,107,86,237,217,0,36,68,64,144,16,68,80,84,66,4,64,160,0,0,0,0,0,0,0,0,0,0,0,
-255,221,246,223,239,219,239,246,237,190,221,251,253,191,251,254,255,125,251,191,181,109,181,235,86,168,1,0,16,2,0,128,1,4,1,17,81,20,0,0,0,0,0,0,0,0,0,0,0,0,
-219,119,223,253,189,255,190,223,255,251,247,222,223,238,175,91,213,215,174,214,214,182,174,189,107,64,0,17,0,136,10,4,148,33,84,68,4,65,64,0,0,0,0,0,0,0,0,0,0,0,
-255,255,125,239,255,110,255,253,182,239,127,123,246,251,251,247,127,125,251,253,235,218,213,74,189,0,2,64,68,0,128,32,0,136,1,17,33,18,16,0,0,0,0,0,0,0,0,0,0,0,
-219,187,247,189,219,255,246,239,255,255,221,255,191,223,222,189,219,215,94,175,93,87,118,247,96,0,0,4,0,68,32,130,36,34,164,68,8,64,128,0,0,0,0,0,0,0,0,0,0,0,
-254,239,223,247,127,182,223,190,219,109,255,221,251,126,247,239,118,253,247,251,234,181,91,85,128,0,0,33,36,16,8,8,1,8,8,17,69,20,32,0,0,0,0,0,0,0,0,0,0,0,
-183,254,253,191,246,255,251,251,255,255,109,247,223,247,221,117,223,95,93,110,182,218,213,180,0,0,2,128,1,1,2,32,136,162,162,132,32,1,0,0,0,0,0,0,0,0,0,0,0,0,
-255,187,223,253,223,237,222,239,183,109,255,127,123,222,247,223,123,245,247,219,219,109,182,64,0,0,0,8,136,32,64,2,34,8,0,80,138,168,160,0,0,0,0,0,0,0,0,0,0,0,
-237,239,123,111,253,191,127,190,253,255,239,221,239,123,221,119,221,95,125,126,234,170,136,0,0,0,0,34,0,132,17,16,0,162,85,2,32,2,0,0,0,0,0,0,0,0,0,0,0,0,
+255,253,255,255,255,255,255,255,251,127,255,255,127,255,255,253,0,0,9,127,255,127,255,111,127,127,247,191,255,255,255,255,255,255,255,255,255,255,255,191,255,192,0,0,0,0,0,0,0,0,
+255,183,175,91,250,181,106,170,173,182,247,251,171,118,255,190,170,74,164,55,245,213,117,181,213,213,93,106,255,255,251,182,219,109,182,182,182,239,189,245,111,128,0,0,0,0,0,0,0,0,
+253,253,255,255,111,255,255,255,238,255,127,190,223,223,187,253,0,0,18,253,190,182,223,251,110,190,239,219,127,255,111,255,254,254,255,255,239,186,235,111,253,128,0,0,0,0,0,0,0,0,
+255,183,86,175,250,214,182,182,181,91,237,239,235,123,255,221,42,149,73,55,235,219,183,93,181,213,245,118,191,253,254,213,171,183,213,170,189,239,189,187,183,192,0,0,0,0,0,0,0,0,
+251,254,255,251,223,255,239,255,255,190,191,255,119,254,239,125,0,32,18,94,253,125,221,246,222,251,95,223,223,255,255,255,255,253,255,255,247,125,107,110,255,192,0,0,0,0,0,0,0,0,
+255,123,215,190,234,181,189,213,213,91,250,253,218,183,191,237,82,20,137,63,175,171,107,127,107,87,254,250,239,247,237,221,118,175,109,109,189,175,254,219,221,192,0,0,0,0,0,0,0,0,
+247,239,127,247,191,255,247,127,127,239,191,255,247,253,253,253,0,128,68,181,245,118,221,173,246,221,87,223,187,255,255,255,223,251,191,251,239,250,171,190,247,224,0,0,0,0,0,0,0,0,
+253,255,214,190,238,222,222,237,212,182,221,119,122,175,183,221,36,18,33,63,95,187,119,119,187,182,250,247,247,255,190,237,251,110,246,174,186,175,246,235,191,96,0,0,0,0,0,0,0,0,
+247,181,127,239,251,247,187,191,123,175,247,191,222,254,255,250,0,64,136,159,245,110,218,218,238,219,87,93,109,255,251,255,111,187,255,255,247,250,173,189,237,224,0,0,0,0,0,0,0,0,
+255,255,215,187,95,189,255,245,222,235,111,127,251,87,221,185,73,10,37,85,191,219,183,183,191,109,221,247,223,255,255,191,253,239,86,218,222,175,251,107,127,240,0,0,0,0,0,0,0,0,
+238,215,123,255,246,239,182,222,235,91,255,174,255,189,255,244,0,0,136,95,234,237,109,109,109,246,182,173,117,255,255,245,183,125,255,247,251,250,174,223,219,176,0,0,0,0,0,0,0,0,
+251,251,215,182,191,187,127,107,93,181,86,255,218,215,111,180,144,82,33,47,127,119,187,222,247,127,219,223,187,255,125,223,255,215,118,190,222,223,247,181,127,248,0,0,0,0,0,0,0,0,
+239,174,255,255,214,255,213,255,255,237,255,203,255,239,254,241,2,0,136,151,219,173,221,117,173,173,237,117,109,247,247,255,219,127,223,235,247,118,186,239,214,240,0,0,0,0,0,0,0,0,
+255,247,171,186,255,214,191,191,255,250,214,247,191,118,219,232,32,136,34,78,254,251,107,174,246,246,190,219,219,255,255,251,127,245,117,190,221,221,223,90,255,216,0,0,0,0,0,0,0,0,
+237,90,247,223,182,253,247,254,235,119,127,187,237,219,255,209,4,2,132,175,215,174,222,247,91,91,215,173,109,255,255,191,251,95,223,119,251,119,106,255,182,252,0,0,0,0,0,0,0,0,
+255,247,189,253,255,183,254,251,254,221,181,253,255,253,255,224,32,80,16,87,125,251,117,173,237,237,122,247,183,254,255,253,239,251,125,253,111,221,255,170,255,248,0,0,0,0,0,0,0,0,
+215,91,235,95,90,239,191,239,187,235,111,214,239,107,110,201,2,4,69,43,247,93,175,118,182,183,173,186,219,239,238,247,191,239,239,175,253,247,85,247,171,110,0,0,0,0,0,0,0,0,
+255,215,127,235,247,190,251,191,255,126,253,253,125,253,255,192,32,16,16,151,223,247,250,219,219,218,214,215,127,255,255,255,253,125,123,251,111,93,254,173,255,252,0,0,0,0,0,0,0,0,
+215,127,181,254,222,251,255,255,109,223,183,111,127,246,191,169,4,130,66,75,250,186,175,182,189,111,123,109,171,255,191,255,247,239,221,111,219,247,85,255,90,222,0,0,0,0,0,0,0,0,
+255,214,251,239,247,111,221,187,255,117,221,251,191,191,123,192,64,16,8,85,111,239,218,221,235,181,174,218,254,255,246,221,223,253,247,253,190,189,255,85,255,254,0,0,0,0,0,0,0,0,
+221,127,127,246,189,255,255,255,255,254,255,110,219,253,223,169,9,4,33,41,251,122,237,183,93,222,245,239,87,255,255,255,255,119,93,175,247,239,170,239,107,122,0,0,0,0,0,0,0,0,
+247,237,181,187,238,190,246,219,109,175,87,251,191,239,127,128,0,72,132,69,175,223,119,122,238,181,175,90,255,254,239,255,125,255,255,250,221,186,255,123,191,223,0,0,0,0,0,0,0,0,
+191,254,255,251,187,255,223,255,255,251,253,111,214,255,223,168,73,0,16,42,253,117,221,215,181,219,122,237,187,255,253,183,239,221,181,111,119,239,213,173,237,254,0,0,0,0,0,0,0,0,
+238,219,245,238,253,239,127,111,219,126,175,254,223,221,237,194,0,36,65,20,95,223,118,189,110,238,215,119,127,255,247,253,255,255,255,251,254,251,126,247,127,111,0,0,0,0,0,0,0,0,
+191,254,255,253,215,125,253,251,127,219,251,127,235,255,247,160,73,1,4,75,117,247,219,235,187,91,187,173,239,251,255,247,251,118,213,174,215,95,215,93,171,253,0,0,0,0,0,0,0,0,
+247,187,235,255,238,223,255,223,254,253,95,182,183,127,127,145,0,36,17,33,95,93,126,189,214,246,221,118,251,255,254,223,111,255,255,253,253,245,123,239,254,183,128,0,0,0,0,0,0,0,
+190,254,255,181,127,127,110,247,239,215,250,255,253,247,237,196,18,128,64,21,53,247,213,214,189,173,182,219,191,255,247,255,255,255,109,95,87,191,221,117,91,255,0,0,0,0,0,0,0,0,
+239,239,107,255,219,183,255,254,251,125,111,222,215,255,255,160,64,20,5,73,111,93,127,123,235,251,107,182,247,255,255,246,251,109,255,245,253,237,119,175,238,239,128,0,0,0,0,0,0,0,
+187,251,127,253,127,253,246,219,255,239,255,239,253,110,251,161,9,65,16,18,187,247,213,173,94,174,253,223,255,239,251,127,223,255,237,191,183,119,221,250,187,191,128,0,0,0,0,0,0,0,
+239,125,119,183,173,95,127,255,189,251,123,119,118,255,223,200,0,4,65,68,93,125,127,119,245,219,171,117,223,255,191,223,123,191,191,237,237,221,119,95,239,251,128,0,0,0,0,0,0,0,
+189,239,125,255,255,247,254,214,247,183,223,223,223,95,254,160,74,80,4,18,175,215,213,221,95,109,118,223,247,255,255,251,239,237,253,187,127,127,221,234,189,111,192,0,0,0,0,0,0,0,
+239,253,111,254,171,190,219,255,255,253,253,247,250,187,255,194,0,2,128,73,90,253,126,238,234,223,175,187,127,255,253,254,253,191,247,239,219,213,118,189,239,254,192,0,0,0,0,0,0,0,
+189,191,123,251,255,219,255,251,189,223,111,187,255,223,119,168,82,160,18,4,87,87,215,117,189,181,122,255,223,255,255,183,183,254,255,123,118,255,223,215,123,119,192,0,0,0,0,0,0,0,
+247,245,63,223,182,247,254,222,247,247,254,255,111,107,255,193,0,8,128,162,174,254,237,190,215,123,223,174,251,251,254,255,255,119,221,238,223,173,186,251,221,223,192,0,0,0,0,0,0,0,
+223,222,235,255,255,222,219,251,255,127,183,237,253,215,223,160,74,66,18,8,91,171,187,213,251,214,181,251,255,255,223,251,125,253,255,251,245,247,239,93,119,253,192,0,0,0,0,0,0,0,
+250,254,63,254,238,247,255,191,187,221,255,125,247,250,255,201,0,16,64,34,183,126,238,239,86,189,238,191,191,255,255,239,247,223,183,111,95,93,123,239,222,247,192,0,0,0,0,0,0,64,
+191,246,182,247,251,251,255,246,255,255,221,247,255,109,253,208,34,136,9,9,45,215,187,117,187,215,91,219,247,255,254,255,222,246,255,253,246,247,173,90,247,191,192,0,0,0,0,0,8,0,
+239,190,61,255,223,189,182,255,221,183,127,222,223,246,191,194,8,34,64,32,191,122,253,190,237,122,246,254,255,223,255,255,127,191,253,223,189,222,255,247,93,255,64,0,0,0,0,0,0,0,
+251,246,87,223,255,239,255,182,255,255,247,127,253,255,119,232,65,8,5,5,43,215,175,213,183,175,175,87,127,117,191,251,253,237,223,123,219,187,213,93,247,183,192,0,0,0,0,0,0,0,
+191,124,61,253,253,250,251,255,219,123,191,250,223,187,191,193,8,32,144,65,61,122,245,127,109,117,117,253,215,255,255,191,247,191,119,254,254,254,255,247,94,255,192,0,0,0,0,0,0,0,
+247,238,22,255,183,191,223,219,127,222,251,239,183,254,223,232,34,2,2,20,151,223,127,213,222,223,187,111,253,222,214,254,223,251,253,219,183,171,173,93,247,221,128,0,0,0,0,0,0,0,
+254,252,159,247,255,253,126,255,253,255,238,255,254,239,235,228,128,168,32,128,93,106,213,126,245,234,214,255,247,251,255,247,254,223,111,255,253,254,251,239,125,255,192,0,0,0,0,0,128,0,
+223,222,42,191,254,239,251,247,183,187,191,189,187,255,95,208,10,0,136,5,43,253,255,215,91,93,189,223,255,127,123,127,255,247,255,109,175,111,174,187,175,111,128,0,0,0,0,0,0,0,
+251,244,15,255,187,254,239,222,255,255,251,247,223,253,245,234,32,68,2,160,30,215,85,122,239,182,235,254,255,239,223,222,239,189,187,255,251,245,251,221,251,253,128,0,0,0,0,0,0,0,
+222,253,77,94,255,223,191,255,254,222,239,255,239,95,239,224,130,16,32,9,75,250,255,223,186,239,94,255,255,255,245,191,253,255,239,182,222,191,94,238,175,127,128,0,0,0,0,0,0,0,
+255,188,7,255,255,251,254,251,219,251,253,190,253,255,186,234,8,129,4,160,46,175,85,106,215,90,247,187,221,246,255,239,191,235,126,255,247,213,247,119,251,239,128,0,0,0,0,0,0,0,
+239,232,166,175,237,191,95,239,255,239,223,239,175,109,255,240,0,8,16,4,151,251,239,255,125,247,187,255,255,191,222,182,247,191,247,219,126,255,93,221,110,255,0,0,0,0,0,0,0,0,
+189,252,11,251,255,253,247,127,119,127,253,255,247,251,253,233,37,65,1,80,21,93,91,85,214,173,110,255,247,255,255,251,254,251,127,127,219,181,247,183,251,187,128,0,0,0,0,0,0,0,
+255,184,129,175,255,239,239,253,255,253,247,187,125,191,239,240,0,8,68,0,79,247,125,254,251,119,183,255,127,251,247,223,255,255,213,251,127,255,126,253,95,255,0,0,0,0,0,32,0,0,
+247,248,37,251,187,127,187,255,255,183,191,255,239,237,191,245,37,33,16,169,26,187,171,87,86,221,127,251,253,255,126,250,255,237,127,223,237,85,215,175,246,239,0,0,0,0,64,0,0,0,
+222,232,65,94,255,238,254,223,182,255,254,239,122,255,255,112,0,0,0,128,23,237,222,251,251,183,219,255,239,111,255,237,247,255,239,123,191,255,122,245,95,191,0,0,0,191,191,133,32,0,
+255,248,20,235,254,255,247,253,255,255,255,255,255,182,255,244,148,137,74,84,157,126,181,174,174,237,127,255,191,255,237,254,191,191,189,254,251,187,223,95,246,255,0,0,43,106,239,248,0,8,
+247,176,33,127,119,247,253,223,255,221,183,187,109,255,223,242,2,32,16,130,55,171,223,251,219,187,223,247,254,219,191,254,255,251,239,215,238,238,245,245,127,254,0,9,43,174,182,254,146,0,
+190,248,8,109,223,191,222,255,109,255,254,239,247,91,253,244,36,2,133,84,186,253,106,174,246,222,255,127,255,255,255,183,95,255,123,127,127,251,191,95,215,251,0,66,174,251,255,255,212,128,
+255,240,10,63,191,255,251,119,255,247,251,189,189,255,111,232,130,128,81,34,111,175,221,219,187,107,191,255,127,222,253,254,191,255,239,251,237,191,107,246,253,190,0,8,123,174,221,191,229,0,
+215,208,34,171,239,237,255,255,247,125,42,171,118,173,255,224,20,10,132,170,245,117,118,190,223,254,251,255,251,251,239,247,91,255,253,190,255,237,253,93,183,254,0,2,221,251,183,247,248,192,
+253,240,2,157,251,127,255,127,125,146,148,170,149,119,223,234,6,64,34,85,190,255,187,235,234,171,239,219,255,111,255,123,111,222,247,239,182,255,175,247,255,252,2,175,246,174,255,255,253,48,
+215,176,1,87,173,255,253,223,210,0,34,73,117,191,127,208,78,5,73,74,213,170,214,183,127,255,127,255,183,253,251,221,191,255,253,123,255,181,245,93,111,254,2,189,191,251,219,126,254,16,
+223,224,0,94,255,251,247,245,0,87,173,170,222,171,239,193,12,17,5,43,251,255,123,93,213,85,255,253,254,223,127,247,75,255,223,222,219,255,127,239,254,236,63,255,210,173,109,191,127,172,
+183,240,2,43,182,191,255,186,86,221,123,255,183,237,127,212,45,4,82,75,86,170,221,238,255,255,255,111,223,247,238,187,183,127,251,119,254,219,213,117,191,253,255,255,255,215,87,239,223,212,
+254,224,0,23,255,223,127,213,83,107,221,87,251,182,223,192,12,66,9,43,253,223,235,91,218,173,255,251,123,125,191,253,173,255,255,222,219,255,127,191,247,255,119,255,127,125,253,187,247,244,
+175,192,0,69,91,127,253,106,169,21,119,253,110,213,251,82,92,17,36,175,86,245,94,237,127,255,109,191,239,222,247,87,215,191,237,183,255,187,237,234,223,223,255,253,255,255,111,239,191,252,
+255,224,0,3,239,215,247,182,173,239,189,95,251,237,95,164,26,132,130,47,251,95,245,183,246,215,255,237,93,251,221,221,117,255,127,250,219,255,123,127,255,127,255,119,247,255,253,189,255,254,
+173,192,8,20,255,123,253,85,254,189,223,246,222,182,239,80,152,18,42,175,221,234,175,109,127,253,255,255,255,111,111,127,170,191,254,223,254,219,239,171,125,255,255,255,253,247,255,247,251,255,
+255,192,0,2,171,254,251,127,247,239,106,219,251,213,189,138,58,68,4,191,246,189,250,219,187,119,246,183,213,223,181,219,223,95,251,181,87,255,122,255,255,255,255,255,223,95,255,254,255,255,
+223,64,0,9,127,219,253,191,212,187,255,255,111,173,255,100,180,18,170,191,253,215,95,189,255,223,223,253,127,117,126,254,233,239,255,254,254,221,223,173,247,255,255,191,255,251,251,123,239,127,
+251,192,0,33,117,255,186,246,171,247,106,181,253,214,215,170,240,136,10,247,254,237,234,235,95,255,255,175,173,175,219,127,246,191,254,215,91,247,253,255,191,255,255,255,245,182,239,239,191,239,
+255,192,0,0,190,254,254,158,173,109,255,255,183,107,123,105,244,4,165,93,255,95,127,189,254,255,250,250,247,250,237,191,189,171,255,251,239,127,183,86,255,255,255,255,255,223,127,255,255,255,
+191,128,0,4,95,111,245,235,119,191,181,109,255,181,223,183,224,162,21,255,127,234,213,215,95,254,223,223,93,87,95,238,254,223,127,94,187,218,255,255,255,247,255,254,222,251,191,255,127,251,
+247,132,144,1,23,191,254,169,173,106,255,254,170,215,117,239,212,8,149,171,223,127,190,251,239,219,246,234,255,237,107,255,247,107,255,247,87,127,238,173,255,255,238,255,255,238,239,255,251,223,
+255,182,170,0,94,255,245,86,85,183,90,183,255,170,223,118,232,34,75,253,123,213,107,173,127,255,189,191,213,90,191,255,253,174,255,187,253,235,191,255,255,255,255,255,255,127,251,183,239,255,
+223,169,85,160,39,223,191,85,85,90,255,250,170,215,245,221,164,136,46,175,223,251,254,247,175,254,235,234,191,109,221,221,255,247,255,237,86,190,247,251,191,255,255,183,255,251,191,255,191,255,
+253,170,146,160,23,247,253,181,84,165,86,175,255,74,175,247,210,2,159,245,119,254,171,189,251,123,183,127,245,182,127,127,175,173,255,127,251,251,221,191,255,255,186,250,191,255,245,223,255,247,
+255,73,41,92,75,191,253,109,171,85,91,246,170,174,254,173,105,84,90,191,173,251,254,239,111,238,223,170,175,95,255,255,235,250,255,234,173,95,127,255,255,254,255,223,213,221,255,127,255,223,
+239,36,68,5,11,237,255,91,117,85,45,175,125,91,85,255,180,161,63,234,251,126,171,187,191,255,253,239,253,235,251,127,116,189,191,255,255,109,215,255,255,223,247,118,238,191,95,239,251,255,
+254,145,1,82,167,191,253,174,223,108,165,122,223,95,175,106,213,42,85,127,86,223,254,238,251,245,182,189,127,55,254,223,254,182,239,237,85,191,125,237,255,123,221,223,187,235,255,187,255,255,
+254,4,40,0,162,253,255,233,247,246,150,215,122,246,218,223,250,149,127,213,213,95,87,191,239,191,255,255,237,223,215,253,215,85,191,127,254,235,239,191,255,255,254,245,255,191,219,238,247,247,
+220,161,2,74,29,239,255,253,26,221,171,111,239,223,107,125,173,73,237,190,72,165,250,251,127,238,171,106,187,95,234,255,250,214,247,251,107,189,187,255,255,255,107,191,93,245,127,255,223,125,
+253,20,72,32,166,255,123,111,213,191,106,218,190,171,181,111,250,165,127,234,162,19,239,239,254,253,254,191,221,109,63,239,109,234,223,255,254,235,239,255,251,253,255,109,247,127,237,246,253,247,
+248,64,17,2,21,221,255,253,250,235,219,239,249,117,85,85,191,43,213,122,17,68,245,127,255,219,183,234,171,191,171,125,250,181,255,237,183,190,191,255,255,247,251,255,187,223,191,127,255,239,
+237,9,66,72,75,127,250,247,111,190,245,127,214,218,170,186,213,167,255,213,68,8,63,221,219,254,237,191,253,106,95,255,173,94,191,255,253,235,251,127,255,223,222,246,239,251,247,255,123,189,
+248,66,8,0,37,239,255,47,223,235,190,219,114,165,73,79,123,94,255,232,128,34,189,127,255,87,191,234,218,223,111,182,246,181,255,255,111,126,223,255,255,255,247,187,253,111,127,183,223,239,
+186,40,66,73,22,255,253,177,122,189,235,127,200,4,170,245,173,175,255,165,17,0,15,255,254,253,246,189,109,186,187,255,90,173,93,247,255,219,127,255,254,255,126,239,91,255,254,255,253,187,
+241,2,40,0,138,183,253,93,79,247,95,239,82,85,85,26,234,255,170,168,64,20,174,239,247,214,187,85,170,223,79,85,214,175,239,255,251,255,239,239,251,255,235,189,255,189,255,254,255,238,
+244,169,2,74,37,223,254,214,160,93,234,123,128,42,170,205,191,85,251,170,136,64,3,191,221,255,213,106,85,85,61,246,171,85,127,238,223,109,191,191,239,254,222,247,173,239,223,255,238,187,
+226,4,168,16,18,117,253,82,223,86,181,174,169,118,213,102,213,110,174,164,34,4,171,255,127,90,173,170,165,90,175,218,217,175,191,235,255,255,255,255,255,251,187,190,255,123,127,255,255,239,
+233,82,5,65,73,191,127,174,169,171,221,91,0,218,182,181,181,187,213,82,128,32,5,255,255,246,214,213,84,164,45,181,86,234,239,229,253,251,125,255,255,254,254,247,237,239,237,255,255,253,
+212,73,80,8,4,174,254,213,182,180,107,92,149,165,21,85,219,110,190,136,41,9,34,247,246,218,187,106,137,1,47,237,106,95,253,242,95,223,247,255,255,215,219,255,255,253,191,255,255,87,
+210,164,74,162,82,191,127,106,85,187,93,90,82,168,170,213,125,187,234,165,64,128,20,127,255,173,221,170,66,84,5,118,171,107,119,248,159,255,255,255,255,123,127,214,255,87,255,255,255,255,
+202,85,32,8,129,87,191,170,149,86,182,218,69,146,2,170,234,222,189,16,21,42,65,63,251,118,235,72,40,0,82,171,90,189,255,234,71,255,223,255,251,239,235,255,183,253,109,255,255,253,
+169,42,149,162,20,93,223,213,74,171,171,105,86,72,144,86,191,87,245,74,164,128,138,191,222,219,93,34,129,33,5,90,173,86,255,121,33,126,255,255,239,189,127,125,253,127,255,255,255,255,
+213,82,170,17,33,43,255,237,81,42,213,170,169,85,4,21,87,122,218,65,18,90,32,31,251,234,170,144,4,4,8,170,171,175,187,250,148,251,255,255,255,247,239,175,223,239,255,255,255,251,
+170,170,169,74,8,173,111,117,76,149,85,107,86,180,82,130,187,175,237,42,168,129,5,79,254,171,117,74,64,144,34,10,174,222,255,249,74,47,255,255,254,255,219,251,119,255,255,255,254,255,
+170,173,85,84,165,47,191,250,162,64,170,173,42,234,168,65,93,221,116,137,2,40,144,87,239,90,170,32,18,0,129,69,83,119,191,238,33,95,255,255,255,221,254,255,223,127,255,255,255,255,
+181,213,66,34,160,157,111,237,42,182,85,181,91,85,85,40,171,119,170,84,168,132,66,151,186,173,170,137,0,2,4,82,173,221,238,253,85,15,255,255,251,255,191,221,255,255,255,255,255,255,
+214,169,40,149,45,87,250,255,170,72,148,170,170,218,165,146,79,221,180,138,164,18,40,35,253,246,212,64,72,144,0,129,85,119,223,253,84,163,255,255,255,183,247,119,123,255,255,255,255,255,
+187,84,66,2,82,46,175,90,233,36,86,170,171,85,94,160,42,246,210,85,18,133,65,21,247,93,106,148,2,0,16,41,85,221,255,189,82,85,15,255,255,254,253,253,239,255,255,255,255,255,
+214,161,8,84,137,171,253,239,173,170,169,165,41,171,91,84,151,219,105,42,169,81,16,137,221,247,168,1,32,8,130,68,170,119,109,253,107,84,163,255,253,191,223,175,255,255,255,255,255,127,
+250,72,33,1,36,175,247,186,181,82,149,85,85,85,106,208,18,237,72,170,160,10,164,36,255,221,82,164,8,128,0,18,85,95,247,246,221,168,17,255,255,255,246,255,127,255,255,255,253,255,
+170,130,0,18,74,87,191,109,74,170,170,41,5,42,170,181,11,181,162,85,66,5,66,74,254,254,169,8,128,16,8,9,42,186,223,221,234,66,132,127,237,255,127,247,255,255,191,255,255,255,
+244,40,146,64,145,47,251,246,209,85,69,68,170,148,149,92,74,250,9,90,144,1,48,2,123,247,68,64,18,2,64,148,173,87,251,254,181,16,34,191,255,251,251,125,255,251,251,255,255,95,
+210,128,0,10,4,19,109,187,42,170,40,18,64,66,37,110,10,214,164,171,1,64,202,169,63,221,41,18,64,64,0,2,171,191,111,183,208,68,136,191,255,255,221,223,255,239,255,191,182,255,
+169,34,73,32,169,69,255,236,139,85,66,129,21,16,74,181,69,117,18,189,84,40,40,2,191,253,68,64,0,0,2,32,173,171,187,253,85,0,2,31,239,255,247,255,255,127,254,254,239,127,
+212,8,0,2,0,16,181,90,170,168,144,40,64,132,1,47,2,212,65,82,33,2,178,80,159,238,169,9,18,36,32,4,86,221,238,239,80,36,40,167,255,255,125,239,253,254,215,251,89,183,
+82,160,34,72,85,69,127,235,86,165,4,130,10,16,148,82,164,213,21,105,72,64,25,10,79,250,68,32,0,128,128,129,37,235,123,250,165,0,130,23,255,255,215,191,247,251,250,181,86,223,
+164,4,128,1,0,16,42,181,42,144,80,16,32,0,0,149,65,84,69,149,37,42,68,80,151,253,41,0,128,0,2,18,85,119,182,238,168,72,8,137,255,245,255,255,255,238,173,237,82,191,
+82,160,18,84,42,133,85,182,149,74,5,65,0,130,2,43,68,169,18,82,146,128,130,132,79,218,172,136,18,4,0,0,43,186,255,189,81,1,32,82,255,223,191,255,127,187,214,210,74,175,
+136,18,0,0,0,32,46,237,90,161,80,8,8,16,80,10,145,84,74,169,74,84,41,41,39,245,87,0,0,32,8,17,10,223,170,250,164,32,5,5,127,254,255,127,237,253,119,41,37,117,
+82,136,146,65,73,18,151,84,149,20,2,32,128,0,2,82,160,82,170,148,169,66,132,80,147,250,161,210,64,0,128,128,74,181,255,109,73,4,16,32,191,255,255,253,255,106,170,132,16,175,
+68,66,0,8,0,64,21,186,85,66,168,130,2,2,8,9,69,42,37,69,85,40,82,138,11,234,136,160,4,128,0,4,37,126,170,245,160,64,129,20,95,247,253,247,213,253,172,80,139,174,
+33,16,82,32,73,9,10,213,42,168,0,8,32,72,65,37,32,84,145,42,162,5,8,32,161,245,36,88,0,4,4,17,2,215,127,90,74,16,42,66,31,255,255,255,251,170,177,2,36,174,
+138,69,0,130,0,32,69,81,85,5,85,32,0,0,4,1,82,34,74,146,168,168,66,41,11,234,146,45,32,0,16,64,41,93,213,235,32,132,128,144,143,255,255,95,110,234,200,72,22,157,
+32,16,84,8,146,4,19,86,170,80,0,1,4,0,32,148,161,40,36,74,160,5,16,128,72,213,85,68,4,32,64,2,2,239,126,180,148,16,42,10,7,223,253,255,213,109,82,1,81,88,
+21,66,2,160,0,144,133,86,149,37,36,132,0,9,2,2,148,149,18,34,66,34,68,84,34,234,191,170,144,129,0,8,145,85,171,107,65,2,129,80,67,255,255,253,183,170,136,144,77,58,
+64,17,84,5,36,2,1,170,180,136,64,32,32,128,8,73,80,66,65,10,144,16,129,1,9,212,246,240,64,4,1,32,5,111,219,81,84,72,42,37,17,239,253,255,106,211,80,2,146,113,
+42,72,145,16,0,136,36,181,85,81,18,0,0,0,32,2,69,40,8,73,64,132,18,68,68,169,113,187,0,1,189,65,32,186,237,234,128,2,145,84,160,255,255,251,170,174,2,40,80,228,
+64,132,36,65,40,32,1,85,84,132,64,146,4,2,2,73,48,146,130,10,84,17,64,144,16,210,170,76,146,38,162,168,2,223,118,165,82,72,68,171,4,191,245,254,235,169,72,130,139,200,
+18,34,128,8,66,1,8,174,170,81,8,0,32,32,8,0,165,36,32,73,32,4,10,1,5,82,89,85,64,0,0,20,144,118,219,85,8,18,18,172,144,255,255,255,169,84,2,21,35,130,
+68,144,33,37,0,160,32,115,105,36,66,64,128,128,64,146,80,136,137,5,73,33,64,128,80,100,139,82,136,18,164,5,5,95,234,194,161,33,77,33,4,31,239,253,85,73,40,72,15,32,
+16,69,20,73,84,4,130,29,170,137,16,8,0,2,2,1,74,162,0,36,160,8,20,18,5,65,33,66,64,132,72,2,64,183,189,89,4,10,40,148,81,95,255,255,170,160,65,32,172,9,
+69,18,66,37,33,64,0,174,170,80,68,128,4,0,16,72,81,16,144,10,148,165,65,0,32,168,72,21,64,17,181,32,146,125,214,196,160,161,162,2,132,39,255,253,165,21,4,132,26,32,
+16,169,41,170,172,17,8,30,213,5,16,18,32,8,65,2,148,170,4,130,80,0,16,4,138,69,5,66,144,69,90,132,64,159,251,82,8,13,72,84,80,143,255,255,84,128,34,17,112,132,
+69,10,148,170,82,132,1,10,104,168,65,0,0,64,4,8,73,8,64,41,74,21,4,64,0,160,80,1,66,18,247,65,18,110,237,74,129,42,1,19,2,35,255,253,170,84,128,0,160,1,
+16,169,86,17,0,64,64,85,165,18,8,32,129,1,0,65,37,82,36,0,160,128,144,17,42,84,2,74,0,69,11,104,0,59,250,164,32,104,36,73,80,9,255,254,164,128,16,133,68,36,
+5,86,169,72,146,16,18,10,212,160,161,4,8,0,17,4,169,73,9,5,20,36,1,4,0,129,32,1,65,10,41,165,73,47,223,82,10,144,129,32,132,128,255,254,145,21,4,34,1,1,
+81,106,34,2,4,66,64,43,170,138,4,0,0,0,4,16,37,40,160,64,169,9,68,0,36,84,8,149,8,33,22,248,0,63,250,136,129,66,42,132,64,37,127,251,84,64,64,8,136,16,
+6,149,72,72,80,136,1,13,209,32,144,72,128,36,128,65,82,164,9,8,132,16,16,73,2,128,128,4,33,0,170,170,169,31,238,164,21,36,65,1,41,0,255,253,82,17,1,2,0,4,
+34,64,2,1,4,0,16,38,170,138,1,0,17,0,16,4,36,146,160,32,80,133,64,0,40,168,17,42,128,68,2,186,0,87,187,82,0,9,10,32,128,21,63,245,73,234,16,72,0,145,
+8,42,168,164,73,34,68,11,164,181,80,18,0,0,2,0,146,164,10,2,74,16,2,72,130,66,64,18,10,1,40,40,73,47,253,136,72,128,72,0,72,128,127,245,47,93,64,0,34,0,
+69,0,2,9,16,8,1,34,211,85,170,64,64,8,64,170,74,145,64,136,36,5,8,0,8,144,2,72,32,132,0,129,0,63,238,165,0,41,41,66,32,18,191,237,84,3,164,129,0,10,
+16,170,169,32,66,64,144,5,137,0,85,4,4,129,21,85,37,84,18,33,72,72,64,137,34,132,8,42,2,16,66,8,40,151,226,144,42,128,16,16,132,128,31,245,88,128,248,16,2,237,
+66,1,4,10,8,34,4,146,164,164,42,208,128,16,85,34,170,161,64,0,18,2,2,0,0,161,32,144,144,64,8,32,130,63,72,133,0,18,162,128,80,9,95,218,162,42,21,2,11,183,
+20,172,178,145,65,8,16,1,170,9,5,34,16,69,82,0,146,168,20,137,72,40,72,36,136,136,0,40,4,0,32,2,16,87,128,80,72,128,8,36,34,64,31,234,84,144,136,0,37,8,
+1,18,144,4,16,128,64,149,69,82,80,136,2,2,128,72,74,162,129,32,4,2,0,128,2,64,2,145,17,2,0,128,68,93,85,5,2,32,161,0,136,10,159,234,210,213,82,72,4,65,
+84,73,74,169,68,0,2,1,144,170,170,81,64,16,42,130,42,148,84,4,161,16,146,18,80,146,72,68,0,72,66,9,1,47,0,164,168,8,72,168,34,128,47,181,85,254,64,0,145,42,
+0,133,64,68,1,34,8,74,170,151,213,68,9,69,85,84,146,201,0,144,20,10,0,0,4,128,2,160,20,0,8,0,40,54,36,17,0,130,34,2,20,37,7,213,43,251,186,128,10,170,
+18,42,160,16,136,0,64,1,66,127,125,82,64,1,46,233,42,165,84,2,72,128,84,146,64,164,146,32,1,1,0,18,66,153,2,164,68,32,144,168,32,0,87,234,151,173,196,34,85,43,
+64,16,137,2,32,8,2,73,148,44,182,148,0,42,251,244,149,84,170,208,34,21,1,33,18,64,2,136,72,144,0,0,8,36,16,137,16,8,4,0,21,74,135,85,75,181,49,0,36,174,
+4,138,32,72,130,128,144,2,162,154,164,162,146,65,21,62,37,75,83,11,168,0,84,148,64,146,36,80,4,2,32,68,160,146,5,80,65,2,17,82,64,0,83,234,33,90,20,129,43,251,
+16,32,128,2,0,0,2,72,148,74,88,20,0,20,45,80,149,145,173,192,80,149,35,85,18,64,130,130,17,32,1,0,4,68,66,37,4,0,64,0,20,170,163,169,72,171,74,32,133,223,
+64,20,82,169,36,36,72,2,209,18,212,66,64,128,170,164,10,173,103,69,68,0,145,226,128,146,9,80,128,8,0,18,65,17,21,72,32,72,2,73,0,1,85,213,4,16,161,68,90,183,
+2,73,0,4,0,1,1,40,138,64,34,145,0,37,41,16,43,69,125,106,168,18,70,169,84,64,34,42,34,68,136,0,16,66,13,34,130,0,0,16,21,85,89,180,162,132,10,17,11,91,
+16,18,84,161,73,32,36,1,97,9,16,4,4,128,4,0,133,178,151,181,2,65,53,51,1,17,4,144,136,0,0,36,133,0,21,72,16,2,73,36,64,12,53,213,40,33,0,128,68,175,
+64,73,64,20,0,8,128,164,148,32,64,2,64,0,64,32,11,84,219,84,168,8,151,245,80,68,18,74,85,5,0,128,32,73,29,37,68,72,0,1,9,106,116,234,130,4,37,73,0,17,
+4,5,42,128,164,130,20,1,81,2,4,136,1,34,0,130,38,234,42,162,0,2,85,170,138,128,137,33,0,16,66,4,137,0,90,144,16,0,4,148,5,90,106,180,80,144,0,32,145,68,
+16,36,160,42,0,32,1,84,164,8,16,2,144,0,4,0,7,122,161,89,82,72,10,84,65,34,36,132,0,65,16,16,0,72,58,165,66,33,32,0,1,119,210,213,4,0,21,4,64,0,
+65,2,149,0,148,137,82,1,73,64,64,72,0,136,16,1,37,127,95,237,0,1,81,34,44,72,26,64,1,0,64,66,85,2,117,80,16,132,2,85,10,191,37,106,161,68,128,161,4,146,
+4,41,80,84,32,16,8,32,160,1,1,1,34,0,64,8,11,93,245,118,160,4,173,17,74,128,107,32,68,1,9,0,0,64,253,74,68,0,72,0,0,145,87,186,20,16,10,18,80,0,
+32,2,74,2,132,133,66,138,149,32,4,18,0,66,0,0,134,191,223,217,4,128,175,234,180,81,45,169,0,0,64,18,66,9,85,32,0,34,2,149,2,111,253,212,160,0,33,64,128,36,
+9,72,160,16,65,32,40,0,164,4,0,4,129,16,0,66,43,87,107,84,0,16,171,223,253,32,28,170,16,8,36,128,16,129,122,170,146,128,168,72,32,189,182,181,9,0,8,146,36,128,
+64,2,85,69,20,21,149,36,169,16,32,64,36,0,0,0,6,171,181,32,64,0,45,125,232,128,86,41,74,161,16,18,68,4,42,144,0,10,5,18,132,2,169,20,160,65,5,4,144,9,
+42,72,168,2,66,170,112,129,68,64,129,10,128,64,2,8,173,84,168,130,9,2,19,219,116,105,21,5,106,168,66,64,2,37,109,85,82,32,81,68,0,0,4,170,68,4,18,80,64,32,
+0,2,36,145,16,191,42,40,169,0,0,0,1,9,16,0,6,213,68,16,0,32,64,87,162,144,42,0,4,174,144,9,32,136,180,72,0,138,225,82,144,146,64,21,16,0,9,66,4,128,
+85,40,152,4,138,83,200,130,82,8,4,42,164,0,0,2,95,85,34,128,128,0,2,40,144,100,138,192,0,39,1,32,10,2,22,165,36,35,82,138,66,0,18,170,130,32,42,8,160,4,
+32,66,85,34,39,61,37,40,168,128,16,130,0,68,0,32,13,84,144,36,17,9,8,4,10,162,42,168,33,24,72,0,128,57,90,144,128,149,149,42,0,8,0,10,80,1,17,64,16,0,
+69,17,42,9,8,234,80,2,68,34,64,20,129,16,64,130,79,170,68,128,0,32,0,145,81,116,10,146,148,193,0,132,41,72,21,42,2,90,252,94,128,32,146,74,132,136,36,128,162,2,
+16,68,172,128,165,36,138,168,170,128,5,66,68,66,4,0,46,213,17,18,68,0,32,0,4,177,82,164,85,40,34,0,128,41,74,132,144,47,209,116,4,0,0,37,32,0,18,34,8,32,
+73,34,84,34,21,82,32,66,36,16,16,85,1,8,144,9,31,180,132,64,0,132,132,165,82,252,10,146,9,64,0,18,20,81,21,81,1,2,34,216,0,4,148,138,146,36,149,136,161,0,
+37,89,109,8,161,40,138,152,169,66,137,32,128,32,64,32,95,210,80,9,16,0,0,0,9,117,33,72,165,1,8,64,74,41,150,148,72,168,143,224,16,128,1,38,160,128,4,162,136,9,
+74,172,148,128,10,2,34,82,36,8,32,133,9,4,36,130,31,106,5,32,0,32,17,18,85,250,20,84,40,4,0,1,28,146,10,162,2,2,85,65,0,17,36,3,74,18,80,84,65,64,
+42,246,174,4,160,160,10,168,169,65,18,80,32,17,0,0,191,213,80,68,132,132,64,64,5,124,66,19,68,64,33,4,74,65,170,148,160,169,110,136,2,0,1,81,144,128,5,18,36,0,
+92,237,34,80,21,9,85,98,20,40,132,74,129,64,42,36,61,178,5,16,16,0,2,9,85,252,8,128,16,0,4,17,53,146,75,72,21,18,180,0,8,68,148,10,197,42,144,68,128,170,
+39,180,154,1,84,181,109,144,162,132,81,42,0,8,128,130,191,216,160,1,0,0,8,32,23,253,18,32,129,17,0,4,119,64,139,165,66,74,146,64,32,0,1,69,162,64,1,0,42,0,
+81,74,73,0,43,110,182,68,25,34,0,137,66,162,20,16,127,101,20,164,34,36,64,133,74,252,0,132,4,0,32,73,127,4,111,168,41,55,104,4,129,18,80,16,200,149,84,17,0,81,
+45,33,44,73,93,221,216,145,74,73,74,37,8,0,10,133,127,216,128,0,0,0,2,16,23,253,40,0,32,0,4,33,239,161,83,210,132,168,0,16,0,0,5,69,64,170,169,0,84,8,
+74,148,181,0,11,117,36,4,20,16,16,146,162,136,160,32,255,101,42,145,16,128,8,65,37,254,2,16,128,65,17,10,247,4,175,106,81,34,146,64,8,68,160,18,196,109,85,74,161,68,
+32,66,218,2,85,146,72,161,42,130,149,73,84,34,5,74,253,216,128,4,2,18,32,8,23,253,40,64,4,4,0,165,223,65,87,244,132,136,0,0,1,0,9,8,160,41,21,85,90,17,
+74,151,116,0,0,0,17,8,10,72,30,170,0,0,40,1,247,213,42,80,72,0,1,34,149,254,0,0,0,0,74,18,254,80,167,180,81,34,68,9,32,17,32,69,81,42,0,170,171,164,
+36,45,208,145,4,73,64,33,86,32,135,85,81,9,81,85,255,106,64,1,0,8,128,0,75,239,81,2,32,34,17,75,215,36,85,250,132,72,16,128,0,0,10,32,160,20,128,0,5,0,
+181,187,106,0,32,0,4,132,43,66,5,170,132,85,64,3,183,213,42,132,32,128,18,74,23,190,132,8,2,0,136,33,126,65,39,117,41,2,130,34,4,132,160,149,100,150,128,0,5,72,
+86,254,128,2,0,0,16,17,23,16,34,170,170,170,130,43,254,250,144,32,4,17,0,0,151,255,64,32,8,20,82,139,235,40,143,220,132,80,16,0,64,16,9,2,80,37,40,0,21,2,
+191,210,64,32,2,18,66,132,171,164,18,162,85,85,8,15,187,170,164,129,32,64,36,148,75,255,164,0,64,66,128,37,126,146,166,246,82,5,65,36,0,2,68,80,177,10,213,0,148,0,
+213,80,18,0,136,64,0,32,21,161,9,90,16,168,0,175,255,250,144,20,2,4,128,1,23,123,200,128,0,16,36,146,235,8,143,219,36,160,4,1,18,64,145,10,116,66,84,171,80,73,
+90,170,64,8,0,1,41,10,167,212,68,165,2,166,68,29,221,110,202,128,144,16,9,36,79,223,208,34,2,74,128,9,237,36,141,253,72,21,32,64,0,20,4,65,56,41,82,84,170,2,
+38,128,1,33,0,4,0,64,74,233,18,168,170,80,17,95,255,251,96,34,1,2,32,17,43,245,234,136,33,0,9,83,247,10,47,110,146,128,65,9,32,129,81,42,93,4,169,5,64,128,
+145,41,36,0,18,32,34,21,37,244,72,85,0,149,0,63,247,173,189,8,36,32,130,68,151,95,245,32,136,80,32,5,186,197,27,187,72,85,8,0,4,8,4,1,58,162,10,82,146,21,
+36,66,0,64,64,0,128,128,149,90,133,84,148,168,74,255,191,247,213,64,128,4,8,18,93,251,170,138,18,4,130,81,223,146,94,239,101,0,65,36,144,161,34,168,189,20,161,8,64,0,
+73,16,146,9,0,130,8,36,75,253,36,149,66,160,0,251,255,94,253,84,8,128,65,73,87,127,237,100,161,32,0,9,234,201,63,191,180,169,16,0,2,4,16,5,90,161,4,2,20,149,
+2,68,64,0,0,8,2,17,21,110,162,74,173,2,75,255,245,251,239,170,162,34,10,37,91,238,178,146,8,0,18,82,245,116,189,254,213,4,68,146,64,16,138,160,95,72,32,72,128,0,
+84,18,18,144,4,0,72,132,75,255,169,36,144,72,1,254,223,95,186,213,21,17,81,182,238,255,213,84,162,9,0,33,239,186,255,255,234,161,0,0,20,128,32,21,117,82,129,0,84,168,
+1,65,64,2,16,0,0,33,42,191,212,146,36,1,47,239,251,238,255,181,106,170,78,171,123,254,213,74,8,64,34,137,185,121,255,255,186,84,34,33,0,37,10,128,47,164,40,5,0,0,
+84,20,8,136,0,130,74,136,75,238,233,8,129,72,7,255,239,127,255,250,171,85,85,253,175,255,170,81,64,0,0,34,254,219,255,123,234,129,8,132,36,128,64,42,189,209,2,32,37,80,
+34,129,34,0,64,16,0,34,42,255,180,64,16,0,175,191,123,187,238,223,117,170,175,87,118,253,169,74,18,17,17,8,251,117,255,254,253,84,64,0,0,9,21,1,95,164,160,8,128,0,
+72,84,64,34,0,0,146,8,149,187,122,18,0,2,30,255,254,255,191,235,187,90,245,254,221,247,85,40,128,128,4,69,237,187,255,223,213,73,36,146,82,64,64,170,119,233,8,130,21,64,
+37,1,20,128,2,2,0,162,75,255,250,128,66,72,123,253,219,254,255,190,239,237,175,255,247,191,170,165,36,4,64,16,190,223,253,247,253,80,128,0,0,9,20,1,95,232,64,16,130,0,
+144,84,64,8,136,16,40,8,150,247,253,36,0,1,111,255,254,239,254,255,189,110,255,247,189,253,82,168,0,32,1,37,123,107,239,189,182,138,36,137,37,32,1,85,255,245,2,2,41,64,
+74,1,9,2,0,64,130,130,43,222,254,128,0,0,191,239,255,253,255,251,255,219,235,127,247,239,85,37,82,0,20,2,221,190,255,255,237,81,2,32,0,4,180,10,187,250,72,0,68,128,
+33,84,32,32,0,4,8,40,150,255,254,82,36,149,247,255,246,255,247,255,109,125,191,255,253,253,170,144,0,132,128,16,255,219,255,110,250,164,144,2,72,145,66,191,239,189,32,146,18,0,
+168,0,132,136,130,17,33,4,87,223,251,128,0,1,223,127,255,181,127,255,255,239,255,253,223,254,169,74,146,16,0,133,121,111,253,255,219,66,36,136,2,10,85,109,191,254,136,0,164,128,
+69,82,16,2,16,64,8,82,150,255,255,84,128,38,247,247,253,255,254,247,189,189,223,239,253,251,85,32,0,0,36,0,110,186,247,251,253,84,128,33,32,82,219,191,253,253,165,84,66,160,
+168,4,66,64,1,4,162,0,95,255,254,208,18,21,191,255,255,255,255,255,239,119,253,255,255,125,74,149,80,129,0,18,186,223,255,190,238,136,42,0,8,155,237,255,255,190,82,2,145,0,
+82,161,8,18,68,16,8,170,173,247,251,85,32,171,127,251,253,186,239,251,127,255,191,255,255,246,170,72,4,16,0,64,105,117,254,247,187,82,128,137,34,110,223,127,255,235,169,84,10,176,
+40,20,66,64,0,2,130,2,191,255,127,84,149,85,171,253,255,255,190,255,237,111,239,191,255,189,85,34,144,64,36,2,58,159,127,222,221,72,82,32,1,191,251,251,222,244,138,32,160,146,
+42,129,16,9,33,36,40,169,111,223,245,187,107,166,255,187,191,238,251,245,183,255,191,253,254,245,90,144,2,2,0,8,154,123,255,255,110,162,128,4,170,251,255,255,251,222,80,136,5,72,
+18,84,69,32,8,0,130,21,191,255,221,85,85,85,239,255,255,127,255,254,238,239,127,255,247,213,106,69,80,8,0,128,93,173,127,255,245,180,42,65,43,255,255,253,239,250,138,34,73,42,
+25,34,16,5,64,148,17,86,251,127,237,170,213,75,251,253,255,255,238,251,255,223,223,255,255,85,85,16,2,64,66,1,13,95,191,221,222,210,129,21,173,223,191,223,125,237,80,136,4,146,
+12,148,132,168,36,2,170,173,175,255,90,215,119,111,191,255,239,254,253,189,173,254,247,127,255,85,88,68,144,0,8,8,38,181,127,255,251,249,42,85,219,254,247,126,255,85,4,32,162,73,
+22,81,34,83,82,169,42,187,255,255,237,89,85,150,253,254,255,247,255,254,253,127,95,255,253,82,181,16,4,18,0,32,15,94,255,255,254,170,81,86,255,255,255,255,191,118,162,0,9,4,
+13,74,85,85,85,45,85,214,253,255,86,173,235,79,223,255,255,223,238,173,219,189,255,247,253,41,104,66,160,128,0,0,147,171,95,255,255,245,77,127,237,253,239,255,253,169,16,137,36,82,
+31,106,171,173,218,171,111,125,191,255,218,183,109,189,127,223,223,127,255,254,238,251,91,127,233,5,101,8,2,0,65,2,3,181,191,255,127,221,86,223,191,223,123,111,191,180,68,32,1,4,
+11,173,189,246,239,183,187,239,247,189,170,213,174,155,247,255,255,255,251,175,123,222,255,255,252,170,208,66,72,17,4,0,19,222,223,253,251,126,181,251,255,254,255,254,254,209,17,0,148,17,
+14,246,239,127,245,221,222,253,191,255,245,171,107,55,223,127,253,255,255,214,222,245,250,223,242,19,138,40,0,0,0,32,64,235,127,247,255,247,223,239,251,223,109,171,245,164,0,4,32,68,
+23,187,187,215,91,247,119,255,238,254,75,95,221,189,255,255,191,255,246,255,247,95,239,254,200,138,161,2,72,132,0,130,10,250,175,255,215,221,127,191,191,247,126,255,250,160,164,144,137,1,
+7,239,255,255,255,127,251,190,255,245,172,221,107,63,109,253,255,251,255,234,189,247,255,255,210,86,20,72,0,16,18,16,0,255,87,255,253,255,246,255,247,219,175,223,188,148,0,0,64,16,
+19,125,253,253,87,255,191,251,223,221,91,93,239,109,191,255,223,255,255,247,239,127,127,191,40,41,65,1,32,1,109,239,73,125,183,253,183,87,223,255,223,255,126,251,254,34,73,2,20,68,
+15,239,183,239,254,238,253,239,247,254,181,123,221,94,239,219,251,255,191,255,95,215,255,254,162,148,20,80,2,191,255,127,244,190,219,255,251,255,255,239,123,251,215,191,242,136,0,36,128,1,
+21,191,255,190,191,251,255,255,255,181,95,189,119,114,191,175,127,127,255,251,247,127,254,255,72,105,1,4,75,119,109,254,255,255,87,255,214,189,183,191,239,255,239,221,221,33,84,8,33,8,
+23,254,254,255,254,255,239,255,223,251,174,215,93,106,254,245,223,255,251,255,93,254,255,249,37,68,84,17,127,253,255,255,255,255,90,250,251,247,255,254,219,255,190,255,233,20,0,0,132,32,
+45,191,221,238,191,123,254,247,255,252,189,255,247,75,95,251,255,255,255,255,254,255,247,254,146,169,0,139,221,223,183,247,191,255,109,255,223,191,255,107,127,191,255,182,210,129,36,130,16,2,
+23,247,127,251,253,255,191,255,246,219,94,245,237,38,222,188,247,255,255,255,119,253,255,244,73,2,85,127,127,247,255,190,247,247,86,255,255,238,215,255,219,251,239,255,84,32,0,16,0,64,
+46,223,247,95,127,119,251,255,127,245,251,254,245,93,235,223,125,253,255,127,255,255,255,235,84,169,43,255,246,191,182,255,255,191,171,95,254,255,255,246,191,255,253,218,161,9,16,64,130,8,
+53,254,253,247,223,191,127,251,253,93,119,255,85,45,247,175,175,247,255,255,255,255,255,212,146,85,127,187,255,251,255,221,239,255,106,255,255,187,189,255,237,223,247,247,84,64,66,2,16,2,
+87,255,183,110,253,247,255,255,245,254,251,189,126,251,186,255,127,255,255,253,255,255,246,170,170,151,238,254,219,191,118,247,254,255,173,191,251,255,255,190,191,255,238,221,34,18,0,8,0,144,
+125,189,253,191,111,93,119,247,254,175,215,254,213,117,187,46,190,191,127,255,255,255,187,85,74,254,255,247,255,237,219,94,183,253,182,255,255,255,251,251,250,239,255,245,72,128,41,32,68,0,
+215,255,110,219,254,238,254,255,213,215,255,249,255,107,221,125,247,234,239,255,255,253,218,170,95,223,255,255,218,191,239,245,255,255,213,171,254,247,191,127,191,255,255,244,132,84,128,0,0,68,
+46,253,246,222,191,107,191,247,111,251,159,111,245,175,87,245,255,127,255,255,255,111,106,181,251,125,247,123,119,246,186,191,174,239,171,247,255,255,255,239,247,255,223,234,41,0,0,2,17,1,
+91,254,221,191,253,181,253,255,187,125,127,243,254,214,245,239,255,191,191,255,255,251,246,255,255,247,223,223,223,223,255,219,251,254,221,93,255,191,255,126,255,191,255,169,64,68,146,72,64,16,
+111,187,247,246,255,222,223,254,223,237,191,247,63,191,254,239,127,255,255,251,255,255,95,223,239,255,254,254,255,125,86,190,175,255,215,235,255,251,255,247,255,255,253,82,21,16,0,0,0,4,
+93,253,109,95,250,181,251,237,174,253,203,215,222,221,191,95,223,91,251,255,255,239,254,255,127,191,251,251,255,254,239,239,253,127,213,108,251,127,223,253,191,239,255,72,128,66,72,0,4,145,
+247,247,251,254,239,219,255,254,255,187,235,222,171,239,255,235,125,190,223,255,255,125,251,247,254,255,111,255,255,247,186,189,223,255,238,213,95,255,255,215,251,255,244,164,85,8,1,36,64,4,
+93,91,182,251,254,239,119,181,123,245,122,221,247,183,239,87,253,255,255,255,255,255,239,127,255,255,255,255,255,255,255,255,246,255,181,182,191,255,255,255,127,191,90,17,0,65,32,0,0,66,
+174,253,255,191,255,93,255,239,223,235,157,93,191,125,190,185,251,174,191,255,191,191,255,239,251,247,191,255,255,255,255,247,255,223,238,218,171,255,255,255,223,255,161,68,85,18,8,0,18,16,
+85,183,170,255,235,235,222,219,119,238,239,118,214,214,234,254,183,191,255,255,254,247,125,255,223,191,255,255,251,126,246,223,127,127,235,106,221,255,255,255,255,250,148,17,0,64,65,34,64,74,
+187,123,255,255,255,119,123,235,215,174,231,187,110,219,85,223,87,87,247,255,255,255,255,253,254,255,255,247,191,239,191,253,255,255,117,170,182,223,255,255,247,235,33,4,85,9,0,0,1,0,
+101,239,239,247,125,223,191,95,117,237,251,126,189,229,253,167,223,234,255,254,255,255,239,191,247,255,255,222,234,187,247,119,247,255,238,181,219,111,255,255,255,84,72,64,0,64,8,0,4,80,
+154,189,191,223,247,254,255,247,251,253,238,175,190,122,247,90,237,123,219,255,255,239,253,255,127,255,253,255,255,238,221,255,222,251,250,86,181,187,255,255,245,73,18,18,170,18,33,17,16,4,
+197,239,255,127,255,187,182,190,252,250,238,239,245,189,46,189,191,93,255,255,253,255,127,237,237,255,239,253,254,255,255,223,255,223,240,43,110,238,170,181,90,164,160,64,0,128,128,0,1,80,
+37,123,255,255,222,254,253,253,223,109,91,242,250,175,175,235,127,207,250,251,191,255,255,127,255,253,191,111,247,219,119,255,125,127,248,53,245,189,218,74,74,18,18,9,42,40,4,0,36,64,
+5,222,255,255,255,239,247,251,239,63,93,253,235,215,181,126,187,247,255,255,247,255,239,247,255,191,255,250,191,255,254,255,255,255,240,30,174,246,173,85,37,73,72,0,0,130,64,72,129,0,
+37,55,191,254,251,255,250,247,181,215,219,190,181,110,126,221,254,250,250,255,255,251,253,191,127,255,255,223,238,238,223,247,239,239,248,43,219,187,116,144,144,164,128,165,82,8,17,0,8,8,
+2,165,91,255,255,253,174,191,190,237,247,239,186,189,255,189,247,250,255,127,255,239,255,253,251,255,255,255,251,255,251,189,255,191,252,54,237,237,170,74,85,18,42,0,0,65,0,2,37,32,
+4,82,111,255,235,255,191,94,235,246,191,123,191,251,247,235,254,254,125,253,191,255,254,223,255,253,246,245,175,111,254,255,123,251,220,27,91,117,106,161,8,169,0,18,169,8,72,16,0,0,
+16,4,47,239,119,247,107,222,188,251,109,255,175,247,191,253,119,251,127,255,247,255,119,255,239,191,223,191,253,251,123,247,255,254,252,23,182,214,180,138,82,4,168,128,4,33,1,0,168,2,
+0,128,46,191,190,222,255,223,215,231,175,175,241,107,221,190,255,239,175,127,255,125,253,187,255,255,255,254,223,95,239,253,223,251,254,29,223,107,82,65,36,169,2,21,80,132,16,34,2,72,
+0,17,23,255,255,125,249,183,123,175,83,255,254,175,127,247,191,247,181,255,255,247,223,255,255,255,253,219,247,245,127,223,127,127,252,22,181,181,169,40,146,68,80,64,2,0,66,8,160,0,
+4,0,93,254,239,255,247,181,215,223,189,127,127,223,254,239,215,173,223,190,251,255,255,255,253,255,247,255,253,127,251,251,253,255,223,15,218,214,169,5,9,41,4,4,168,36,8,130,8,0,
+16,128,31,223,119,90,214,255,255,61,253,125,223,235,251,251,239,125,126,255,239,191,239,111,119,237,255,183,111,221,191,110,247,254,254,10,183,90,210,80,80,66,81,32,0,129,32,40,65,36,
+0,9,95,187,238,239,110,250,254,247,255,159,255,122,183,222,245,245,255,255,191,254,255,255,255,191,255,239,253,239,255,251,191,251,251,15,218,170,164,138,133,16,0,10,170,16,4,130,0,1,
+0,0,29,223,191,251,189,255,94,191,231,253,111,223,223,127,254,215,55,223,255,247,253,255,221,255,223,189,255,182,237,174,251,255,239,10,182,213,81,32,80,138,170,64,0,69,80,40,148,148,
+2,32,95,247,253,247,219,239,186,246,245,223,254,247,223,245,245,239,223,255,255,191,223,254,247,246,255,255,183,255,255,251,239,255,255,15,107,86,132,10,10,64,0,41,82,0,2,128,0,0,
+16,0,62,175,251,221,247,255,237,239,246,175,127,125,239,191,239,247,222,254,255,255,255,251,254,191,247,247,254,251,254,190,191,255,191,5,186,170,169,65,65,42,169,2,8,170,73,42,74,164,
+0,4,159,255,247,254,247,187,245,251,221,235,253,219,187,235,221,127,91,255,254,255,255,239,219,251,254,254,223,239,251,239,255,125,250,142,213,85,66,20,42,0,4,80,162,1,36,0,128,1,
+0,128,63,191,127,255,175,255,237,126,251,253,190,251,253,255,127,181,127,255,247,255,250,191,127,223,111,239,255,191,191,251,123,239,251,11,109,170,168,129,0,170,161,4,8,72,146,170,42,168,
+2,0,189,223,239,191,95,223,183,123,222,255,239,110,255,127,255,253,235,255,223,254,165,125,237,251,255,253,247,255,247,95,223,255,237,205,181,85,34,40,170,0,72,82,161,21,32,0,128,2,
+16,8,63,255,222,254,235,251,239,159,191,190,251,223,255,253,119,190,255,127,255,170,148,27,255,127,187,191,190,255,127,251,127,255,251,75,85,84,136,2,0,170,18,0,8,68,138,170,36,136,
+0,1,117,255,239,253,250,255,191,239,251,251,239,251,223,171,253,239,255,253,84,81,66,143,91,238,254,246,255,255,239,255,255,255,245,173,170,170,162,144,170,1,68,170,165,40,80,0,0,0,
+0,32,246,175,235,255,253,255,217,242,254,247,254,239,255,255,239,255,170,165,82,138,40,47,254,255,239,255,251,251,189,183,247,127,249,22,214,164,144,4,1,72,17,17,17,69,5,81,16,32,
+17,2,251,255,255,251,222,126,182,191,223,247,255,191,255,235,250,164,84,72,136,32,129,5,219,187,255,111,255,255,255,254,255,255,250,75,90,149,68,161,84,18,136,74,74,32,160,0,2,0,
+0,1,237,247,250,247,183,158,255,251,119,223,253,239,111,255,85,82,130,146,34,136,16,39,126,239,123,250,223,223,255,251,255,255,249,37,101,82,34,8,2,128,82,161,64,148,8,132,64,8,
+0,9,254,251,254,191,255,235,215,95,253,255,247,245,255,81,74,72,40,0,128,34,68,129,247,127,238,223,253,253,219,223,255,223,252,139,170,74,144,34,168,85,4,21,42,2,130,16,8,128,
+18,35,253,253,183,174,181,215,223,239,255,191,223,255,245,76,33,2,130,74,20,128,0,2,253,218,255,255,247,183,255,255,221,255,218,37,85,82,73,0,18,0,169,168,132,168,32,1,32,34,
+0,7,239,190,255,239,255,123,245,125,126,223,255,105,9,34,136,32,16,0,64,4,144,17,215,239,187,182,223,255,247,255,127,255,253,66,169,73,36,74,164,170,20,69,40,0,8,132,4,128,
+0,15,253,251,253,247,181,246,255,255,191,239,126,170,168,144,34,8,66,82,2,32,2,64,254,187,239,255,254,254,223,119,255,255,254,147,85,42,144,128,18,68,163,40,66,146,66,32,128,8,
+16,155,119,246,238,239,255,239,94,245,253,250,250,208,146,4,128,130,0,0,32,0,0,0,111,238,254,239,119,219,255,255,255,255,14,1,84,164,68,41,73,41,72,133,16,0,8,8,42,66,
+0,47,253,239,255,218,215,223,245,255,247,127,202,138,64,160,4,16,18,1,4,137,36,0,123,187,187,253,255,255,251,253,247,191,87,169,82,146,146,4,164,146,37,40,137,36,129,34,128,16,
+2,63,255,223,125,223,255,255,254,189,255,222,85,32,20,4,32,0,128,72,0,0,0,18,46,254,255,183,182,255,255,223,255,254,146,65,74,73,36,82,18,169,72,132,64,0,36,64,18,64,
+0,255,247,255,219,191,255,95,239,223,251,245,80,10,129,16,128,130,1,0,64,32,0,128,31,215,238,254,255,238,239,255,255,254,123,4,169,42,73,9,85,36,36,82,37,85,17,8,64,4,
+32,255,253,255,255,255,223,127,255,239,223,168,138,160,72,64,8,16,16,2,9,2,72,0,31,125,191,219,255,255,255,255,191,255,113,209,36,145,32,68,146,66,146,8,128,0,64,34,0,0,
+2,219,247,255,223,127,254,255,189,251,250,146,80,21,34,4,33,0,0,16,0,0,0,0,23,254,251,255,237,191,127,127,255,254,117,66,170,72,149,17,36,148,73,82,20,68,20,128,2,32,
+3,255,255,127,254,255,253,253,255,254,234,74,138,202,136,65,0,4,132,64,0,16,1,8,141,239,223,119,127,255,251,253,255,255,1,144,146,165,64,128,65,2,32,0,65,17,64,0,32,2,
+7,251,239,223,245,255,247,255,247,127,85,82,82,36,34,16,0,64,16,0,144,128,64,0,7,123,123,255,254,247,255,239,255,255,84,202,84,72,42,85,20,84,138,169,4,0,1,9,4,8,
+19,191,254,255,255,255,254,255,255,233,82,170,170,169,72,132,73,0,0,2,0,2,4,0,3,255,223,221,219,255,191,255,255,239,66,81,73,37,65,2,73,33,32,0,32,74,16,32,32,128,
+7,254,255,254,237,253,255,255,111,86,170,170,164,146,34,16,0,4,1,8,2,0,0,32,1,221,251,255,255,255,239,191,247,127,168,164,165,82,20,84,144,138,21,82,9,0,130,4,128,0,
+15,255,110,255,255,127,251,87,250,170,149,16,73,8,128,64,0,0,132,0,0,16,16,2,18,255,94,183,118,221,255,255,255,251,146,82,146,9,65,8,69,36,160,0,128,32,0,32,18,32,
+31,239,255,223,223,191,255,251,234,169,72,165,16,64,18,1,16,144,16,32,32,0,128,0,0,239,247,255,255,255,191,255,255,245,192,73,85,82,40,162,146,81,10,136,34,9,36,137,0,4,
+15,251,189,255,255,239,255,253,42,68,34,0,68,18,64,4,2,0,0,0,128,130,1,16,0,253,219,253,237,219,253,191,223,226,169,36,145,41,4,17,36,132,64,34,8,64,0,32,72,128,
+27,255,255,191,125,245,239,234,164,146,136,148,1,0,1,32,0,1,0,2,2,8,0,0,128,119,253,183,191,127,255,253,255,234,208,34,74,132,169,74,18,41,18,0,128,4,34,132,0,16,
+62,223,239,255,255,255,254,148,145,36,34,1,32,68,16,0,64,4,2,64,8,0,4,0,8,95,183,255,247,239,239,255,255,206,226,18,169,82,34,33,73,2,64,68,2,64,136,33,34,2,
+31,251,190,255,247,191,122,82,4,65,8,64,4,0,128,4,8,64,32,0,0,0,16,34,1,59,255,221,109,125,127,255,255,222,80,165,36,73,72,148,68,168,9,16,32,18,2,136,0,64,
+63,255,255,255,255,255,165,33,81,16,64,8,0,16,4,144,1,0,0,18,32,32,64,0,0,47,118,239,255,223,254,255,255,198,106,8,170,164,18,66,146,5,32,0,132,128,41,0,8,0,
+55,247,223,119,251,253,80,136,4,4,1,1,33,0,0,0,144,9,9,0,0,130,0,128,32,31,223,187,87,255,251,255,255,233,48,66,146,82,161,20,73,80,4,66,0,8,132,34,65,8,
+29,255,255,223,255,164,138,34,160,145,16,32,4,2,64,0,0,32,32,32,130,0,0,4,4,77,122,239,253,219,255,255,255,210,82,42,169,36,74,73,36,4,145,8,18,64,18,136,0,0,
+79,255,191,255,254,170,32,136,8,0,0,0,0,16,9,34,34,0,128,130,8,8,4,16,0,15,239,218,223,255,191,255,255,232,152,130,165,73,16,146,81,80,0,0,128,9,42,0,16,32,
+39,239,254,124,234,145,10,33,2,32,4,4,128,64,0,0,0,138,8,8,0,1,32,64,145,6,253,127,254,254,255,255,255,242,26,85,84,164,165,36,136,5,72,146,18,64,9,1,2,2,
+159,255,126,24,41,36,64,132,32,4,144,128,16,0,128,9,36,32,34,32,65,32,1,0,0,39,175,214,255,255,255,255,255,233,42,138,170,82,72,73,37,80,2,0,64,2,84,164,32,64,
+86,255,156,90,84,129,18,0,0,128,0,0,1,2,18,64,1,4,128,130,20,4,8,4,4,11,253,191,239,247,255,255,255,244,4,74,146,137,34,146,16,0,32,73,4,144,42,0,1,0,
+255,255,12,8,34,40,64,34,72,16,0,16,64,8,0,9,40,80,40,16,128,16,128,16,144,130,223,251,189,191,255,255,126,250,149,37,85,82,137,36,165,74,4,4,16,1,21,0,136,8,
+239,255,5,40,136,130,8,136,0,1,33,2,8,32,33,32,69,5,66,138,34,64,36,128,0,37,255,126,247,255,255,253,255,248,2,146,170,72,82,17,0,32,128,144,130,72,84,146,0,32,
+253,254,72,138,34,16,34,0,2,64,4,32,2,1,4,10,144,168,148,64,136,4,128,36,138,2,237,239,255,255,255,247,231,253,82,75,85,37,72,164,85,0,18,2,40,1,82,0,1,2,
+255,254,5,36,144,65,0,1,32,8,0,4,160,148,72,160,74,146,33,42,69,80,18,0,32,146,255,255,187,119,111,191,131,252,9,4,169,85,37,18,0,74,0,32,1,4,80,136,68,0,
+223,221,16,8,4,8,16,72,4,2,81,32,10,33,18,77,170,73,74,146,40,5,0,165,2,9,191,255,255,255,253,255,185,250,164,66,170,162,64,164,170,0,64,138,164,32,138,33,0,16,
+251,122,10,165,73,33,2,0,0,128,4,10,161,74,73,42,169,36,32,73,69,80,170,8,80,68,247,187,254,237,223,255,107,253,16,144,170,149,42,18,1,36,8,0,0,128,160,0,16,66,
+255,170,68,80,0,0,64,17,32,41,16,161,20,169,109,181,36,146,150,164,169,37,16,162,10,42,191,255,255,191,123,255,184,230,164,68,85,80,146,168,168,0,0,16,146,10,74,148,1,0,
+234,84,19,21,84,68,8,128,4,0,66,20,170,170,164,164,149,85,73,18,84,148,165,17,65,65,111,223,237,251,255,255,82,242,146,129,42,170,168,66,4,146,66,66,8,33,32,1,32,0,
+169,16,20,84,0,0,32,4,17,18,17,69,37,74,171,91,106,170,170,170,138,170,72,164,84,149,255,126,255,183,255,255,128,165,72,16,85,85,5,41,80,0,8,0,65,0,128,64,4,8,
+18,90,146,17,18,34,2,32,128,64,136,40,170,170,255,255,255,255,255,255,117,82,165,18,146,74,191,255,253,255,255,255,212,82,82,132,21,82,168,132,5,72,0,1,20,74,85,9,16,64,
+65,36,42,168,64,129,64,2,4,4,37,70,170,85,255,157,255,127,255,255,255,253,90,213,74,171,251,239,175,255,191,255,210,33,36,16,133,84,165,41,80,1,32,16,1,1,0,0,64,2,
+20,48,10,21,8,8,17,16,33,33,17,42,165,91,255,187,255,255,255,255,255,255,255,255,255,255,239,189,255,254,255,255,228,148,66,64,18,170,146,132,4,68,1,2,72,84,68,16,1,8,
+2,146,84,148,36,69,68,0,132,8,164,170,149,127,239,127,111,255,255,255,253,239,255,222,255,255,127,255,254,239,247,255,240,1,20,4,69,85,73,41,81,0,8,0,2,82,16,66,4,32,
+72,8,36,81,2,2,0,74,16,165,21,84,170,255,255,253,255,255,255,255,239,255,254,251,246,223,254,255,255,255,255,255,250,168,33,17,1,84,170,66,0,16,128,32,32,153,66,0,32,0,
+10,32,74,154,72,42,18,0,2,18,85,85,93,215,254,255,223,127,255,247,191,223,219,255,255,253,255,253,255,251,93,239,250,4,136,0,20,182,164,148,84,130,1,4,132,72,8,0,0,0,
+40,16,32,16,2,5,0,136,169,73,85,82,254,223,127,246,255,255,255,255,255,253,127,223,123,255,247,239,239,223,255,191,253,81,34,72,1,85,82,65,0,8,36,0,1,53,32,146,1,18,
+16,68,84,75,32,148,74,34,4,170,170,175,189,127,157,123,126,255,255,255,255,239,254,247,223,183,191,127,126,255,247,255,246,136,16,2,64,85,85,42,73,32,0,16,0,144,0,0,72,0,
+82,32,65,20,10,38,1,8,170,170,165,93,255,86,247,253,171,255,255,238,239,189,215,253,253,254,253,251,255,255,255,255,250,164,128,32,20,171,85,72,128,1,0,64,72,84,132,72,0,64,
+72,82,84,8,128,138,0,165,85,85,86,254,247,221,111,253,255,255,255,255,255,247,254,223,183,175,255,223,223,255,126,239,213,82,74,8,64,21,170,146,41,8,17,2,2,161,32,1,0,4,
+80,72,64,42,129,21,36,18,170,74,191,255,255,230,255,123,127,255,255,255,222,254,219,251,255,251,239,254,251,183,223,255,234,73,0,65,2,78,213,72,128,64,64,0,1,84,1,0,17,0,
+160,64,82,10,72,74,128,10,82,171,255,247,215,251,191,251,175,255,255,251,251,219,255,254,221,111,189,239,255,255,255,223,85,36,32,0,8,2,186,164,36,2,0,8,36,32,136,16,64,16,
+64,168,72,9,154,146,0,149,74,191,251,251,190,252,189,246,255,255,255,255,127,255,219,183,247,255,255,125,182,254,253,255,180,145,2,68,0,42,213,82,137,16,4,32,130,136,0,2,0,64,
+160,161,32,140,192,149,144,5,91,239,247,253,223,189,191,191,223,255,255,255,239,110,255,253,191,187,239,247,255,239,247,255,169,36,8,0,129,2,218,144,64,0,16,128,5,66,66,32,9,2,
+130,144,82,9,40,74,128,74,255,255,239,251,126,251,215,245,255,255,255,255,253,255,222,219,237,255,123,127,239,127,223,255,162,0,64,0,16,2,182,202,148,137,0,0,17,32,8,0,32,0,
 };
 
+
 //set pixel value at x and y coordinate
 static void changePixel(int x, int y, int value){
     int height = 300;
     int width = 400;
 
-    if(x > width || x < 0){
-        printf("x must be between 0 and 300");
-        return;
-    }
-    if(y > height || y < 0){
-        printf("y must be between 0 and 400");
-    }
-
-    int index = (width * y) + x;
+    int index = (y * 50) + ((50 * x)/400);
     lab11[index] = value;
 }
 
 
 
 int main(void) {
-    //perform changes on the image
-    changePixel(0, 0, 0);
+    /*
+    for(int i = 0; i < 15000; i++)
+    {
+        lab11[i] = 0;
+    }*/
+    
+    //lab11[49] = 255;
+    changePixel(392, 0, 255);
 
     // Initialize.
     led_init(LED0);
diff --git a/apps/eink-advanced/result.jpg b/apps/eink-advanced/result.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..0b26a8ded695be5b04bfdd84ec30f2a880b334c2
GIT binary patch
literal 70866
zcmXWCcRU;17e8)qEwN{j#HJDiHEK)H7BynFh*g^wdFY_1O@df8YE^4TBz9|$*jgp_
zil?pB_>@O={QCQTzvupW&+ESK>zsSeJ?DMj_s`OwO*$S+bA&k^Jv|*A{og_NXNAs$
zj*W$dm4%s&m6es9osENwpPP%5lS>4^ca>j4^qQoEsJOTkNL5ZsMj0qBF0ZAatOn80
z(6}b2qpuCsQ&rc1{&`Qw$wseCpF>a2OZR7p?%LnQnd$$J(EUH5XJBMvW?^Mx=ivOS
z(9T20K+nj?z{JSR%*6Cp`|;m-IwoFbfHcI2h0oTLRVJJt8jpF!1~hK%7qFW<0jYaM
zB(QS`3JHsdf@S686%;izVOrWcH%v^;%q`#u%e(dtj!sBt7jKl0ub+RwgUE-EqM~Ea
z|2$7jN`8@&nug8I%f}TI78O@kRoB$Mu6y$q-$rOBk~%uO1_p<QM@GlSC*~JEd|dpr
zv`pFB-r3!w?*IGw%QxET|GuA{|9A1@4~35H|2NxBx|3h9g_*RYP~agqzcqkI3owi<
zP?SI_%5>xC^Z0EBxm|hImRB^%7bhTY;?f;@=3R&Mv3v|KFqg`Qex_^Q+={ycX>-)%
z)&wUk_!jBapLJBigE`tJM5yUrWQh)haAOx;f1%*|dkC7rLcisMs^CZOto1K@D%-;C
z8OMRo#jAp>0G1Ve3LB#DCcHBvs@0M6hbn@BB2T9LC4X!(rD>Phh);!V^LrI=Y?=>d
zu+#fFanq{v4}nR;)hb*OccOBF>`5Zs_f-9t?_cu;8AJ_t%bgECojI>+4UzF{$Lad-
zVUM;I7H{GQQ%Ul^SpsT;UZ=)$bgdV*JT?W+$T=o22w!0^h*x{UB2;|k_l)G%B!EgA
zFn8B@CEmxOgt`vOPfjikj@%t)5;cv6LN$Dq{L74D^on>Zqmmi0udrh`_=6IVshr6;
z`R`(&630uFiay27D#&!kzikFQo)g3ZOR_FQDZ8;QsX}_QPUci^o;~VW_*HQ5ht4<c
z=sKyMS-FHGd@m32(t=Z@h_)XwV8Vof*zcGGouVn$Q5$|wWxj`0<qSF7Lx*CZW=aGo
zgGo~~k6t^sJBV1mLi}{rp!HyGqQy!X=js=Q-2+~|!M1LzM*9>sV1MyU5TLGnK^sbq
z`K0dB?-#1vx;ikj95KqWl?Bd}$wk>ELgezWf{AZi`gNj31K{r1X?^PYbx08?O<v15
z7pOEg2<@tVry%B9em%-5WaI_EQq#(MKb1~n%4qxaJ};WgO&HLze$dSUd*4t}y*fwk
z$yvI2>uuK;S>Yx*v$P|nhsmxZXyNDVO6Bbl1M;F?9J|%;551`kn2S$%H#5GqQ8sp_
zR6VR^xyIg-21b7X{%qAkRM`|J1W7RINWW&26`(@xv;~fG_h4>#0RGzS5#2cRXyE~a
zW>?eU@t*ZWlOziY^YiY=Syan^E6C)?{f7BL{h?0*On?f1(BlC;<0;t@XIQo}x&oNW
z?ikb&^lIKyCDz*?d*F3;O4o@>%-}C|v=($NTpgAgst};7Hold*`QlLMvz|-vD(*8c
zHZY0BxjG^W0o0PTAJ~0SFfHxwFmF@I6nFXS21O~BcsC&Q2B`Ai64W0$kAyAD!-uxK
zxyrUTBgR_F*K`}K&#q@++#lFJ2p`uZQ9#K7pcpxSABc`R!!|Ux5T|B4t2d2BRnIjS
z+<%-*+uAQ%oOdtaRM~%7h{1Z<8+^{weLoVeIC0EJPt%L<n*m##xnF|ICb%tsAgdHa
zRsYZtC;req=*QHgz#A2R|Bw53AoZp)_gL`f3xK;|D=|&C<@^fX>OqTQa|!5VWZt!Z
zpOs^pqpNB6G)h5w^S*3j@I%0l?fHc<%(hDSBLHGop>rE*r$86Z&&JPhimb|0R_PJk
z|9(qVBzWcS!n}5cy?GZA@WRzEjN`2VJnTJ|Pu6T%>V6#lupk7ttpM(Lyz;~>Nw~gM
zaVab+pVA;Cm2*2x7k}Vt2<}Py_`m<8VwasWU)oyx`4?J%Y)9NtEANsr^8|ILX*L;4
z_+@Zo1KEcPpVL@>@V*wJ(qLDb^kh1cRw(jGx#0>bi0F-#Z?IDaITr95V@BrN&=}#k
z?`s-mZVdK!Aa3ILTlg4z6l34}HdNOYN?hda5Q$r_2sSQ}{DGS9aNa4cP_k%ZD#?%$
z|D4vDC1%ep9&W~bI6&qPP-zHMwzF)72fw!sdb+sBns=M(Uwvwf<v@}a=KP-jVx0_y
z-INcqzqCz~qW!Fib$j;`tZgVvDiNFLFrE>I1xqJuKm2d~5nL|Qo8T;IAvgxS(&sGA
zg*W9#yZS<N=KJQrS8FN8Dhmfu*+FiEI}fvislK|7))$!~<N}-jiarWDO9<F2wWr^L
zP5f&GZhsl6RMDCofzf5f>BemN!i%0oa5cAjp|x{Zq8+g!a>TZt^|P<PGs6k#MKXMk
z%Wke3*7@Y%RmZ5xK&VuDoDtQ}jPu3AmO>ZTLKPV_-=Ub?khvC4NPAh_|3J7p!i)ql
zmtgdZ75(va^Q@Bej{88xg`(@)tGV0SO@fPFSF{f?Vf^W1*>>$%{h<zHPi2~XWt!3!
znKennf37mi>l48G1Q8{Zbw|P5=ajVwC+70VhAGJUMPTOzs}Xk_tN?V60%h3<4h(-J
z@g=ir|2eqll<S#vnN(7hEGWxNm#h7r-QBu?XquiN_5q;M4S!8-x|_6GU^tiRhK?Y*
z?><`L#QCn#3v3}nCB@{*v<TRB_A}G1e4v9-gmF!`aLuo2>f?%oRJ`vM&apPij7o<$
z!{bU<?V}wQwmGah8fEN-1N)QFK_<+!lh%T4GV|CbS{dfW3Bt-V)owyTL9=Sk;JZS3
z8(moez$Lwfvu6%9VgBmN?$d`TzplV+ylc7{)ROir6TkHPyQG7PL`Rf8Ju<GuxB{!)
zyw%Y`JJeV@o&d$xb`>H-hb%`$XFw@649bn{DF0j;S@&ACDUfJ2sd?Y|^E?0I&>K*n
zUPQ<dDlieN|2h6FL)R=nW_A2>+R%X(B^dbl&h3tc?_&4xLo)gIe{FRk$2hoVwNEAC
z9~+I;ua8UgcFRK%QgQ}IgVP)SCwI6zKLDsSHdh7FcV&C&Cc!Or@d9%N5lMaz?Ib=b
zt*P|237w^<sA|UgW2xIC+SB8eoWdLpx!z>t$D(`&jo7p#w#32P6T2>A3WD2+A;&E{
z_;=y$7-x`c0j+23+}IFoK6i@fsn-Tyd5;wv$_iwx9j+VLz6-A7tsKcz(+W??v959M
zS-8e*ti(pqQ`Y;h<d%2HxL(w^N=r6>N3@_&PF=R7oznE%>EE9B*_P<d4V69`@cLg1
zZU6B7n_rgz0X{G~{f*yLcs$9(0%+Yb(U3CVjAf^q1?V?v=C21j;jB^xeh<s#>&<1-
z<crZ-Agu7nyk5(tC2u=YIqg9Ypm7MpR+FWtoxg>5{6l9R-9xS(=h}~KQ<9Do;O5`U
zT0}K;y9zxdBzc#rI?fs~7*A%0$dXb8mW9ZuMD$(2&AH@%`;ZwW!ZG_pc}cmqx)P9w
zJJB%f0$755YX)IM+FSB}f87tHRBY=f0dXJpOGwv4m2<%FmPz57gogfYwkZ+B{JL4h
zn^6AWs4|<U8;H)QG1*SQZXv;gS+}v%5!&itxL#{d4xy685o;PwwAI5rt?o=`fH`jb
zuGD=o1DN7|eFVyqiw6=<y<xdSqZ7uXq4{k7)D8y6)P4(WsK!XLEtt2xVPatgc~Pke
zo4v)AK+oHm(X6|jB{c_+LjR#N_*@O8@`5!8&Yo!xV-8WIj^e=Rc3)aBaiH#4IN5RC
z3#+}_Rjx(mR9F78ga9J$P5P9vv<8Hz^Uqd~5qGG?Qo$>M1NfYyx>q~y1-w$LOBhsV
zA8avtc04*PRon^E8XM0)1$xUhyFU%CDSMcce+tBW+>S$t2Yc)-?%cwj+%sPZrcRM3
z=gI0lcX_gYhaO3MoUD~PXgbygQy_G$Zxri3G|A!&<5eeh_kGmJAk@!k&`|Q0$f{7(
znt1qIa(HWHs4kIs>9Hi`yw``b&tj8Fe_GTnMY|I1=g&bueFsP<#_P5`e6}NY&y4FL
zQw3*xY92wRBI3IP8!SR5VOQl1>*F26zCBKu4<z87Z;O=2AZO&I2Hqf-QI9WlE4-$#
zV<8@HJ&Vx=ETM$DQ*pP6jBmHX^V7VqmCH@e14or$GZ3VzfIu{7!E{40cIaE-4ua8l
zuf~MVFOw0iyCg$!OczC{D-uU8=8ehV4{B!h2r&@1vQTJ5a8kA9wl=CO+E{S4EKQwS
zeLuu~PWYpxg||SS5NFUkRB2-wQxTS}3HFv(qgva}87g;OD%riB-(O^I+MAGlAgGqU
z^s}a&y1l-qM+m4WTFzxwJEud4d%DZf`*{sJgcS>>{wjUMp8WXDwaIytE1z)kK2gx?
z%gZ9aU4?&tCG+@3tDEnKsT|qHrK7J`g!Q>yA^+1r_iMO!NE!6f)7b%z6XDm0Es)k?
zQ?}wd?{?HEKXl?17X8ABaBxS_Duu&C?gg?3FMFGrxkj{R&ggQC#-^x(9g=qr0`)4P
zm>C`(&f2JG_coAEPkxr{1u%obVaUgxRQ+V;pOY7Ey>q7TI(rCKN$m+DrP8>YnC0ax
z-a=+CL&cRm7CVM(um1f%7sr296J^1Y6T`)5JAd3dn~byXsj3!25p9Hmw8<CozL>as
z$bE^w@O~4HhII(SVp{_u4yI4XJU1Sw`h<6xXP$v_t?NYgFpl=J#)ii2^PxnOCY8D@
z>hQutFX5w#RQFc_?#04`GP!4AlSLe$G-&mpn5~!Z$6!ybPtXUds{GG2J72CVW8csB
zv){)SEg~5Cox~EcJmXlO*4G<uQ{il)4cObM5+6=4j%Y!~A;|Goa^9&gb59YYeEe<<
zsmWZA^gwcU2-8^N=0(~5>|*5_A;|DFs#US4?rpsif4Gzm<@O?^$HTr}u<?4X9)?pl
zvAbXrC)4n6V>};0Nhn_w|Fl6-?VZxk+SiPYC7k{GU1mZB+-=DjW>LxVwZ@fFwZ>@@
zFIbtibhQVO<%ieL-u$5pTciz#cbQ!VWFFo{h0)Mzsl0+JYZ8XJ&y<Y7f9O)%Tok7>
z&)TQ~i;buCdMTE@4VZ>VI9N?OP17tCk0EfufgeoYuwgeXbn<0$#`PBHHKw>q_A^#%
zC%YaOJF-F{F+KPsVs(x?+UcGzp|=c{ZBr~J+^{n9Xs8ZIt337Lnvm=8|BV_{hfW{9
zZ?1POs!2GbAXN^(%lFNN`diCTbdE$S^JK=zdn0<UC4Dz?MxKM1@~a3Rnr+x6LXN!q
z5KSmjCt#JZ<vlq)D4(nV%2wVi0$yt0@2_IcbUyO<9{RuY53jQ<%Dzm;sJahDj%<=)
zrv-kH5xkBPAH$aw2ZrZIzv&4tehZwH2jM9QrY_Xk$=DY`UeNXiBoxc)R#cjodBmA4
zCMM~oKfGdvM{wD>GsmVcW^NV&d$<JU&om+gL^$4$CQJ!GbmV$(k*nJ3!=HPM)p1;%
z3fC|QvKzodq>WIgvZ<$unZl;iRtjuY2FUvzZJqgz6|gtd8O7DY3<$s{8qmiD*~*;i
z>2o1VJ30CuyWPx))BEvyh2ZQG-BU1~!1h6lA_v?jLLs`&uBd=_k%CqcG={l07c}!E
zBw$uE?`-LkHtZec0aoHmX1JT81@G)m>~l|NF?F~QC4f3;A!Sx8+4^G9KTO+>&@zBA
ze2}b<H&xL?{o*cykMQMrV7`)<aP;G{#cfJ#NeSXso8gP;Q=eOvYV{F+_pNOG<gTLC
zDMP&?FT+@FVF>%FH<XFcg?6uY>UyLO59zzLP{DLjvm7_b<JHVCff11=b?~iF8rp_+
z_ivjh@b+l&RJOMraLsFsu}_b4VF(ElCB|kNVdLDtdUK^STvtJ02f7aBf7y`0EYnc^
z?VO>vnM5P;5$Fs%pK<~fxt+8dWWrRJ@<ve)QZJt!6wSwM*YH)Pb9LcOGHg{M81pjC
zli>{xsX|$IRtce6r8Zj2Di|f-)XbUe20F#e^@9e=HKs&YY9*Vaxzs%<t7cL$wszDt
zq>EbOWYgT+)HU97=188*1ib|xi@c8At>}(R{XA0Ht-8D%A7$?p;_OVjk-k9WGX#gW
zwm_>Vu(z>&*EnXUtsBAMvaZ1y;wUw}wd?3md{0Typ{+}no^6RarqSn8$#s<f)K~_v
zY7`om-FHXPDa$79Dp{1T=YIZR!q`0qgpZB-Svq0^h5JJn(t&xsE|Zz39G<_LGB&3u
zWSwm2kjo`F=x!#3u^NTyuC1<IKk{@$03Z7LlL=uR5NYH`Mp#$_gts0$69{rrd(Jdl
zSd&wrW*Wci?Bj$q?Le?)t@827PL<sSB_5*XR$@cL`9InIDwE6iT|I=la=DCji?~Fz
z0uOAq?8n7pO*4=(yoG)pyk-)Ws|9KZ!LrR;%J>34MLiRyF&W;<>IlO(+N@kw5b@cy
zW$Ul{6{Lq7;Y1#Qpgd2vayV}i?)$U{FTorjf*5{a6pL1^Oqsf|q1PZeZw?&;c^mvU
z33cCF5(#-`;noR%&UjY9eS2H?(Y$I>oB86LUPW*RQO)WyK^mMWRTNjdTIpcE#(#OW
z6sR2jMax(uq>*wD!Z($ObVFz;q!hEqb=n@8RI%;w9QLyw{9A_#rz#ga{G{B>_+Q}V
z=aAj3mAg^0Ul>GPvkCGgGnXb8;dl1<!TBj}W>_&*gTepXZ)}t6wqmUUi<lyD@RFci
zVJb~!)4(>b&n6g6Z=csHqe-jOrOUPsl|5NqAu|;?{`O2m0w-=02NZ<ZMH^;)yuJ4`
z)cu&6kHwLT4?8r99<9l;wMh_PMF#}ykEdFviva-=m3#SKbafbH(X7nYOM@pbPa4Ui
z4|4P;zkz!o%PM5+V{qFm2eAU3D4WgPQ{Gm0Erq2Ijxi0hu0<mSp?ybdvZR8s)ObYI
zdNv<bpQI!@GW`XVU;bn~;`?{g*hVjBY4q^k=(x~QQL!`ESI7$93{mTxu5iUlAkEBC
zb%>+cJ4DDabGx1PO3UZxC93E?ZUVt|y$F=g_Tpx@SXwSs8_geYyVPKDo0x|1rXAS{
zmwJ_nMTdom7nb%+GD$}l`IyVwNk1!bt{+wGo{9|*4+wvleO6AK0_q}k>vB<;u?8Oz
z1kcY`(PNxCcAXy*;y!<}rPP}KElO4TKJJe#9!a8X6UJ7o2-qi|8N?n*S7F}jG&wXK
zKOu((L|{Sl%C@>p9Yoi7)%m}02opL20!@@eGCS(G&Y{)pUpSY=d}noC%KX{@>FA`)
zGv(--MhPJ|9!9F}OQSqxw*l0blC-J+r5x$~=eI0!sYqzm25&j{)Kxi|LBX{q5(i{4
zLL}gA=RZw(D$OB)FA7&Kv)k{4hX#wNxfD?Fie}ewugD4fTj6{B5qQ+6<j)~CE8P^0
zf~E!G+=meK!H5PR^V_g+hWc1TMcqbwpPliqYbT#6p>(dd`rwO!F^7wxgvPGhWTvoD
zeynO36~WPvldx$bsvBzjqOQB$4rE5i^1R_@-kPajWnF^lg0YCOA=2rUa+BGqGCPsV
zkr#)&Y5Tuq)fLi^$3K_0OVg%8`n-u_XA_Q6-tbZrgUt+(GgAR(s?J%gI~+Vi0o?V0
z$VSK2Ob-g>eHNFhZ(8md_H$&LY)o#tHx%VaNpvZ###77!q6!pL|FxZ`Tj+^!dn)<C
z9FEEXq9$a}%pIp9J#E7Zk6@i|!~$<B23yQ@AP<>#g@V7KLsA^hMO4AIz~t3~ocu)P
zIk}sl7I(8a9GTI0{b5QA!5U;ks=kTCym7C{5PBYw!E^S--eH`P+tM{QW(Rwq*J9@1
z?-~wR8*4?gAp0dB7_U3W)88-e8t2r*=y#;vUsyPd`efkKo5%6mXMI>KKMz{f#-Ax1
zoE%A9MA;qKk29zX<20~TXu`~-l}{(20g4Xa^E!>&7B-I~71>soeefR7L}VWIO))|5
zdGxEh4Fks(NQG`gpWlh?`IN?O5GLzHWN?P;exAFaTp3Dg*^wBWmiqd=Y?q(&tOcJL
zW1Avq%w&&xg&`<)$N!_Jvv>L3*wA(Oy0;m>R)l)U`|N#-m=C4{+EgPZODrg0kIX@^
zqr+$2KA8%v`I}?IhyMM{k4qYZ;Un<A3P#~d!a(1cF%AQh%zh^oSz6GtXJ;v>9I|T4
z^1;8~+%4xxXd&v2uo(YtS%EUf3oW<??C#10b|>u+1D?ruuSwkFY*Fyqt;!gpyFhqH
z@LSbn-)To5AO2h_4L)2BuE}S@OPOZ}q6=83m@SK7O1!6Z#_%r-l#QC+)o2#`jwn}o
z9IsMCYxfqf7J)&-nJygg#&Lv$XWp%Sxc$@(JVir<D}ABgu;(4`F_ukQ`A12FZ%S@*
z^w^45gf$l=G~ZjL%m*i?6o?I7g{};MNSMlJ8oAdMXCfHBgT|k02iNYb-Kf5i(?Jtl
zR{*t#N3BTb9(*1MJ$(+Zb@gBHW;KhqN|`z4=?IrB)w@z6m8BpeZB`8THsfph?zLd*
zeQDO8rezahUwYCeh`#Ps9IiWc*1dq=Y#e+a0z@H?l8+%c_ojIZjo0Mp%=Ff)yy;=B
zkC;BOoZrb(ki9~4<-Aq>mQ3~Nc>ug%u<A6QWx9H*h6G*dug)>3LhlJ~X!OO^t9AL|
z<ZC#<6xkRQ&2kDn233D!r^Ule77eX?>$);MV4gIKxk^F4-(qf{La5zC93z!d!V~Z`
z0e^>++j^L3dg1~#`><(y<(IfAs^d|nwAxS$i?%^fQN)U$IBkdZ>pR9kNX+y16xG*!
z$ES@v@Q8hYJY`4KO8iF4IOwI{-v=IMep@qsr(u@;gKsPy0c4eGnfpGMDk~Q4LdWoH
z5W-!8WowQIuX`@%^EX?K2Ei7?#U2<mQ*^{H;`{`S^;u7&;Ig32dcdhS#G-Hp_ezND
zI3}M#DT6NPH4A+u7VrfXKh8w!1@`&gQ@#a(n0l?X9~QpxcR<2HQ8wQHY#r(?FhNM=
ziaq!A8<U3v8XeXVai83BCcL?{syq!t1e{>Xs`o?NATJJ`*zsTB!ND>?4ccO250Td9
z__4#w;kZ|iKoC*Ud*#u!oWk$sKYFFws{CAb48x<7*HPDcGhM6_4etg8%QSO6{ii4j
zV$MNkJqr{=Jsa2U*Q*!&%qUWAR|7Y86lAt69emKK`<7ZNGpOv3HDY+TbQm@hDo;6(
z^Ltt<Xno@<&Sv6Og06y@rm)scKlGv%0r9`#JU5*ve+PP!;yl_JVjwB?*7ylc(^r?R
z%Er#_%Q_si?Dc%6?T-4RdUZ?VDujrCWfsCgLZmNRhijP&|3K(E|K5@Bsi=bEzvGG;
zCHp8ZJm~It5%47ls*8`dC2%P%wWqj0P+yjrL4&#*-DS!GvsGmcOqDcR89>NtD?cOg
zpym#)T}3X^>e;v6;l^t0TJ?D=AU#l20RYSr(Bhe^m#N}s65tpvvM`ePnEAb7(S-n2
z<~2Ch4)|@|vSKBl58i~gn(lqHtf1GbG6!uaB3{%Rp_$HMKT6jPc1d<7ko=}52@qCC
z#C^2re4^;CJpU0hDdG3|$;j^1$@=<XRTj_U-Jws}TxqjgRjK7ODw0cB?d`}^E0~B)
zMZ8T^u4_N{P`t{CHGXx|hzGrs{6z;@__G{RB#DUYP3tFxs7jiJ1+<U@>VDxUE911N
z>hb$`dHaHw^ETOvA$%617wO^y+Q^FF3*I7WSgn6XbVl$zJRx3}5M~7;HVoTEqcFCA
z=>D0!Z75$4%mIF6!?$<5bN)%@zTpf`4xkqMI3>uR1O7!}V$!IvxYv`Djr_yEL;1hG
zFI#c!UXauQmyHYlJG8C96_PWmt2^N1t+1i4u<Gu3)8NjAu9ehGj8E?ea8gEYN$gS_
zIW|?cBkosY6<I-b_&n5`>PmNOwW30WqwjG;rfd#ziYxbX%gTO`kFVKNX|T^g5!W5k
zp^y9ETLM-f3xMbEQ0<#~tT+?P<TPUE*V7eT79!ng7}A(gk(zhpOpnmo4Z9rclqJF&
zLzr4NfEGMN$-p<=8D@M|%DOw*(LC^3obEsngZ~b<aN6L-+3ALIx%!i%^*?ly0Tw7k
zG~=Gns|?fk2Q)8FuDb&qPz2Q+sOF~sA>lBjvID6~H33DQSPxUxdNRf896O?OCq0!t
z1@&7HNUvq<mWDuYstMqJVdIghI*=J_&I3RtS_B<gSxC`mIb<X_k>4d8Q3gyvPF`&D
zy6|ELt3uc@=H;;Vg}q2+PSfNr`g!<ZNb|2!{VumriRluBrMYRn|57vRbv;Eoyi9et
zd8J-BtQAnaGv^m<7beG<tghl{Rve9sC%1o1W(<oYwAj7yzldsK4X+2>LH{a^435ez
z%CNPPqa3AWE3+-KWI@fTY?G`Tl5UAfHr@4x;{v<quGMAKp^19Ew?`^c_J~D@Fy>>m
zPYNSjwE2ZIjQ9Zl4BwTojR2B5isld3HL_$gE^aB{qzgS{(v^LH*ShmR?fG)l+wZsI
zC_w7+<IKiw*xr!<h!?i}d{nW)G_~~O&))w~96C};O^MOa_FrqgZI9p5(7u>cMGq?=
z;oF6+7Mp6}IDl`m&e8ZweE!?L#)<Xyp&Sncb@JOfsB-Idhu?JrHrnJJ@O;nMTM=ZN
z>fz_BF5gu0zxI0vGruZB-BGc~R~iC4CfVc7^+q`sC&w`3vZh(0a_e*<jbIXDJ7&Tn
zWZ;9_FARmr5R?VWEDz*9x!vFZ^gT5p{-M)0{iMoVzT`)8CVu{Qk%JKS)RT_;ybgUf
zO%}&gPJX`JoENlrc!UP!bY(qyhmp(v1*JJ9#9+Vx_xd}J`apo!g_F}MZ)e0On}8~y
zpl;Tiv9Z^e{j~TVzk7;3ns=)_#=>hNXrLe$XMw#S_@w1dV0`!eAK9Cefma7gB|*hH
zbCP?G$U){XRnSH9=9Q}+h6WW*Xfu9W+gvRQucP)Pvv7BT^m9}&eRu-fS}rEz%9R*t
zK1E(VO!u)DhqNszoT7%<Ri)P-lVjAr#_wXfIPS^kx>kX5O|8t*%sI}?=!;$HR?BDZ
zNqi%tDOCn{Quz?4+8X$WPUK(MiDvc4+-}#i$L$WH4k_KNX%4<uknfXrjN&<=$qK!(
z@6uq_<x4-Nx@Wp{9Iq=L#U{oq>SqQ@t9nWs<uv5#3T8H~MGJD0My?0l7ke@_T^QG?
zT9d$5jT3Nx3zD)t=*FRxYv!yQ?*4Ypun-{M)*II&mqfwGNL?R3DE0OPmaD}z-1Wrp
znlGFlntN4?NdMYB`yKitcnFs48vmP!kY1|aGvDYnqiu=}Lf>S(U@iRMklqYas*^1k
zD?!zZ^p>EAxS;uCN~=k)fN5%kaSj<2-03aC^yyS`e)NE}9piZIe}N_FP!Ydy@s)KZ
z!)nv&vF6KRV4Stlv|Tj@d}+3}UX2-4{cd$pO)N%l<);sWP*yaNRn`(JFz>>dP04&G
zK$AeaJMO7ctkPjZeOx)=Uu#U|KZRbSLZ6(Hji=<@1X$A93tdNW1KPE*XgQui(Qy%E
zVu<x1KrcSCyEV<QuDbpt!^~-eKA9pSIlBV?f+;6V+$TjP2|7!v`fTKi30_n1FI4P$
z#*&Di><SVZBr~EQ(|#}4TpMPGnnPAh3?z2egtHvvuNJb<`J{C%jR%Ce-Y!P$EUZ&Q
z2__&OE3OnnXT70lu==jRMa%Rg20I$wDew{3=-U-Q6R1iv5l&VR)t2#+y)UtYySLUR
zcpp{=2lq!675?z+=UnnSxyVC@jr)Xa;B_k;czx-WlPLCMwAEwVPN9jUi5DEQ-*s@D
z+E}HM5@7*w>XA`L$_Un!NaNLLW5GJ(<V!!Ey^)8musJc^;uj1=hv|KF^{?)HRJKKB
z9G4P)*;6Y_&8&QWo+(Xk7-Ax8x^-kWy3Zd4NU}*P?058Xg2V)DdoHw?kZZTPpS6ku
zZ;Xwfh8F}-*Q+6;yH5jF{x-Nb4g%)QNDqyG<%E1&>267HHR;(}@api-!EOCSMBU0E
zp-f-D5=mL!iE@pNQvIgQDyxY!`zBTq9iRA&yAR<Zc^$@V{~`D%xkCmU$@ux-ZGlr0
zYddyeI;U8OG;fi^;SuBYe5ITRxO;vHwAlRBjnClfPWRK&=0_q}<Foh+EZiwJn4AM`
zc=zx5&3TohmA&p{wvcNP7ful62L*h`%zC)gO10iai(E;)q8B(dvPRTNmrB?2@ZN3M
zXfU|9+fCTLrtpv$aLsp5=^;<`6g8LE0Z@Mf{)PdZSMEuGwdgpc`TJlY?4IfbUu2mh
zJ-p+ZLY6l17(h5`76}O66Fdyo!@kbFKW7z^jEI7=eK5mm0nA0UVxtN@*Fg$<E888H
z>HTQsr=h)<)@py~swV+x(wY@ep@8d4zi&T>tN-2IeX91_UudTvMO#@L<-hV`y3{Lf
zXiwIb5zZ$y_G)A{s>QS8=j-79m~UiGi&&QOFnmQ~Dg{MITCz?C2vDx8(2y_w9(v)K
zq7uO$S>H)%x^E7uO9GdNC8+-fR|6*J@VSZ?V#q^D&j>+h)U+iPen{6r>Yg_Z5Os6C
z^DxKVf}c1!1l5Ry?Qj`R09W0KT?z$({I=x*V%BGz{PP}ng1(A##D_5IzQM`^)(zPu
zLr!)>+}@dBs7RYCt1eUClpVZ@a?~lLz;Dd_JX4QoUW|H-_bC|XJ#ysivU;E6;b9zN
zFdQziife-l1P|Sjvd2s`1gabN%dtp{UU=q3AnOsj4J@v)&Co@VF_wb6Kl`5M1&<?k
ztQGo+%>z$wLJgRaaB2~NvI#H2%J1j!DZ83H&bcjW;g3qwbaZ(9Ef^c8#B7w#V3n#O
z@nJ0|g(SnE8fDrT;sf{4LfCHK!yAt0o|@NpZ1ORc`(NI4%{G|0`ad-2^gOQo%PPwH
zU#)(W`4CR%sg{>uii!|;UB32%+{?o>cx?xw<jFYB;?gt%?(puP*0GUwuRg!x5jDMo
z(cAFhsa_g|)3o$u>b$zB>%~$6;DB+Q$8cc=Z*BUlZ#R6%syrIh+JiOWrWl13uxM|q
zo2c|wPv|xFr@wta5|_kfh0YSm`u^a@@q6OE<=^xtzur7PD2@|LDW7IeV~Fa5D`CT*
z6S(L{lq&v$V|ANJ!HwJTTuDH~G!&*Zg;Bf>fV{*aj_sU=cwJJI4=8~#%vDxFQ<326
zb<_Tg>LT#AS^rfLWb(BMFX)&^Z{*pNw&GC0#)I1h5ukri;Wew@a!^k4ub?O$(?CB{
z#hzy?X<K%^S6$lEbX|WjH$h(C>Z3sTI^e}{EE6f}4wkE=&R8z*i=Zrqr0x^PHzXMG
z`IC_2Iqch-i%ZYCTVK$EiylXCbyELO6626(qVS$0$854ZJv1^p$H<#Vb-Hw@nJEBV
z2)0^u@l%GapFxMiTMS)&X?pV#q!34m*B$LiQ>2yrklk+NCMiF-W)cA&;HhCid)laF
zS}>JfIw;<PQbp#qLz^18J4`Y2W(>k~KE{p09DA#yAs%qy@x5a?^eQuq-Sb5zaXgft
zSa2)wVcm?<#RNx7^eJ%V*)YSKdj$#o6eDK*iw-1Vxv`?d9?h_J5xh5InGhr8Cg8=&
z#c}Psr6PQ%*Rdnj`s|$7bk4(!`(^kHU-exD!&lD>Cm+NuzW-vCEN$g)vh~Z$YNQ=E
zav`V?^z%};o0XI_k+P#ZuijhavJDpFA0tDa=8+(4pGC0&c=hq<0=%=N6PMnYsUu!F
zqBD1bSN<XGJ(!GsU~45M${83zS+88T&UG(Y&RaonrdnAiEyDhS!X8F^11CKhUwa2q
zK`O-3;rfBOqRO)G0F`f@nMJj!UiL-2yTq9v<*NSU7oHi<$;G36X-;Wuav$y^w@+=W
z98CbXM3Z!xz@$+76m$puiVjHOpYJpAQPCt5rw(EZR!R5k((JD?v{#n=ypCxFyt&gd
zJ!OJr6}cm<I6wO3JbJ!|7&fkvaULy5R+gp`^AlTc5b6@VL5OEzNzi7lj3ui7fm`dP
zcJX#B{OGvxXPtY`*lPoSQpQ*+DCI;dqWhKk>g@qxcv$3uql49BN6Ls+(p=N4G+lGQ
zXq9jUo>w{M^MyE{>zq1ylTC&x+{-^aTD(c^#NyvpSPwDIRM8*i>-fYw5U?|TG;moh
zU*?*|@~>sw9l1$8&t{YDOxq(BF9HmQ5SK9{0R~hJ0*=5-l|C7v(i?l>%2D%4c^S#n
zsbbff1Az1Gppm^Uf<J#(;o;81Ec2x7e5m4TaNbZgew@nC2(_qa(I2T2^<uwX^0;OP
zE~+C}h|3&mYDIU~($1NFeVD{dmpD^T!86HBT8?a{ydJB+ioe{%C#7ve=LaU{F2aE$
z!?or94uuEoDH9+&?E05QP84=$jBsh{_=&Hf)$k2eEZ@r;GTL6{c*?2Z9G;&su;I5}
zYxjrl7x(Lg?JxW15j}U68_w^2LByO&=aW{+*Iy?1KBCCbh#l7Yfi}fI*M#q5k-Ma<
z*c^~*i`SjiRtTveFU>SDF6B*6MJ5up)0+J8x@Q(uXYHkF6K)F&9|X8NzkjG>Kf(_X
zi3jFT0AurCatSSCRJo`Rp?K1f$zc|PU5@P8TUf;<K4uUR)q;__bZ-MEJT7Y5hE5QV
zQ!p-jyk12VFMxnzgQ%fcr0PLJv#Aqn#Og5rA=mtP1l5SUw;^|wC#+JYR(-GS9eMiu
zBbz!`7Ha(80Ds-SMCfZt*yeQhfG?kcMkkjV)p$m{ALjgAF;O>&8zVdD#~PNK;arXU
zr~;{~pqJ<dPY2&ryk!N)ytmXFl&&}EM%Us$9`7+w(=xkiiwS3`G%wnXN<`-vlPV+r
zWcUhX{JJ|6DLXPyk>WA^r95yF7Kvw17=qdg7{ZN;skbt@?wijyoq-NBhTa8s;FH%8
z9`<QKp8zpe^sN4SjH&V=)fy>miN=hrxMAOQ-L);M=qj!0>`d^*x#q_f4&8QTzg83$
zcS?m%_jxPcEVvxtLc#U~`GO~Jffj$eOz{S-d_Ft9A|UCTS(VK-QNY)kQuwo?)#p?+
zKJt(&G$fRP;<oPE?cUms@qG%@La$*RFmlq?^<uEk(egOM18HOYEzjNQMaQ!;_tE36
zl#3_!@lkH?hYNod^|Z8%_7=I@zwlFZftU4uA6%UXtxcbXhirFpMu=RS@a^j07}@i&
znSK#w3sgF~hx1c*x-#A0{@895&M?0^al(dOc67?$qvg_*?ss0(v3TU5J34loa+%fo
zUBY*J{BB73DWaF>j#`F@-iI{34z75&zT@6^;>sb*4yXF}cJ#+OI$xM4%+a!yuSRm>
z8!UqdEr-R<>l)8yM<o8xeKFyxQ%0x!R*XqI+g7;i)}6N6V~$EemMa2+g}_9$tC!10
zXfE5M5tx8~vTNL}Z#^*L;V;r-|Hi#L8qEPg{{peHQQA3sAXyz34OONza;vw^+n|7_
z;(BKO@4uY!h{0%m%TKGT1J%btNGD864CPjut1r({io!s>%0Ew&o+vK=S9~2dK|!Mm
z$mn3}_+7$4Yau%P6{gBoG(Qe@UV3*=hjTUHpR_<&RB?X(&{b~@Ys)I-*G~-JW5i!i
zn7m<(x?>EP8RHu|K?ckk1?s=;foF&N1&u`VJevwTaM3u07FZ<xWmr5Ai#W)+e0p$R
z(_;YWUG(8$`2dC&kV*boV@~(Sx5Tiw?IWy0e1np{b33kY*ggxulIgHPmcX3SJ>J<i
z*+oZ3w<hsxn7_a){kNwnPp)*N-E05+hpw;q>Z)r%(rDRzm52eAmgmw*1=E>!Ft?Gf
zJyIm!P!N_znO-GCM`2fPut}&C@iy@qTPO;^Hus358X-IE2@wk+!;eF)ibdKvGqD~M
zZ+@4m4As;mhiX@mNlH>&V^0?=l=c-{#w{L1!PW!ssU-9(2T=LTsLE4&DYbGu3I9#J
z0k;gm*rF>gve8$QR8&>LzgGcw4E~oyE%`?+KVz60@QgVpKc5Uw+M-GPrMue6lvk5J
z^(gvaZ>d|(9%+h|uMhH5otv(+P)j$_aU(v(@Frk3NDXUREX&o+Y*8Px{ev@-JFB_2
zt)^Rp-LLAv56)B|IEumurhyPV&m5jDiy#aF%JgEJCB8&OTYGmA5;>pVyn~hZ_5h~N
zv!oddxPXyM{P#c?B<P#ek^gQ*ZZ~>Bac45~d-;@g*{mUGx5o1atfc%2OX>hGk6ZBi
zx~q%@A4k|%t#j-shx<k5&3x`IZOm48iUw}d5t_0sD0KHNxP>cS?CSNfQ>Ii;mfqJ@
z9;wVzr^EXP&UVh=OWA){N09ZmtwU^xPZrKbDYnniaqm(*17r}ZqvA$KT%a+$YTQpT
ze+s~B;OI04`QljknTbXB+HbLcXP084R;*xiy+3bDmm!rCvl<qr2YjGvy!o^WuNh(L
zs%i9Cf_C*cuH)vPmM6rbAV1vnr<uh(?7|QusUR4#tN^Vm-xpRCRN&`%driW;IkIo+
z6)E7r`qDl4(C1RuYjaiJN83DY>$Lm)>t2zul<s(VL1S<yqH(h;>uUQdZ|NcbNPr7a
z3?Zi8g`rX^$7~QxsbWkJ*xY_OPY;5n$WMdVdWbu6&2ED>*wudKE?rt9v$z*H!Jh>1
zU(n)Hc9(kk%E297ne)M9amy1A@!p}RIjgV)WNG7EiI<{6c+beQj*P;DevifBxO9v3
z+m|Lyyo>U|`_7=uZR5Ict`m*8B>qq-Tu-(%rj**+J@I_93<*SR(-_H;V?yMoH#WGT
zsXj?wOCvA@NpAVmagVWx>b5-|yVkgyFy*nO`tZLh|LDS5_?vbY^UOs7;{(okWt;TG
ziHqif(3rDm8nXA(vTxe)crjedC9xB|qKeV@#$*Ff(Be024&}htku@SVO4hW3j1l*7
z>&9o_$e?6RUWo19uR7wezde9V8x08Al~{2t@0Q)$MQFyFr?|Pn-|$C(jEK*BdCVD7
zVQ=f`y!}^s=mJe96I~}-+z}w|P(2$HmH$w*mRvSBK0bxaqE#3NLh)H0TGomjiv+WQ
zTRWCJdvI!A;UU9DQK`>TJ=8W7;m5#=km!+*UfV)w_v=TmQw3df&I`V^Dk-U3C=`oC
z`)(eSls%Q_D!5-f8f%WMsj2;3jla~3ocO9wXlhlnA0%^`8~(P&5PY6QpNjaT?@Esa
zbH4kZ!XshT<BHhvLvZHOcoDh&w$JHMT|8-A<Uan%h1N=*@;Koru*><=|CUAdZ<suO
z7pbU`VLAh7yWx9B)oVJZ0)vp%P2ohJT6V|%p|i#9-}$IA)jPauyap^DeVE<1cI|vj
zAnn!I_0ow7fR(Bd(`uWAJH;)OzAJZ<BzU5JyX|&&g08$Xz}yE1uYzEb2YsHL25BuF
zm2F5GQ&z16`V)3|&F9Er>j4=zaTybKY(?9F;VG+hHW~?KrI8wyGpK@SA(r)Zvoy-T
z4aXYM25zo5{~5Aul}NqBJKW**K5utRw&F|`q`>|Xo=|tu8$Rw?(J5N0_cxg_m@GqR
z?H@Wwq126nNTAF5ivn0U`5{IuJqfD`8S=8dvRk0z9Blu$x@O>+>^F_D@S<%5Ii+g8
zTULo%7Vb78YC1XC%%jzMpl>xd{r3zT+jOHYa+vpzg&u91_)tB}l-%3`-g#4O^R5w;
zYXo6tk~W^A33XW;P&^Se`#pDah6nk8*CgN(8g**m*_rd?BstSz?aC)Z`<r9%M-eqC
z+8((>*F@qR8px4tPPE{~Baz_7s)cR)q2OLOoa#jXJZz=2pUkyMht@gzu3O|IM9F+*
z1%g$;zmbJyuF9kRUp)upRI=Oiuw~%HHQm}i?q^Tk@GWPaaJ6Del_3yMwJ_8hlU~X9
z8PT54J6Qeq!=h9dZ*Iw?xEzz(`)Cb+=pG4H93A8DC<Q6=ygLHj^ox&2K>OUDpJNU)
ztxDE7o)T7;myjdxKEDxTy`GYM;oXn%k}FpR9-Th1aCCBlC&kwL%Z47h`oybNEvqM{
z0fVV%+X;cZTtLWhKbuH8|MKqW`Gdlu;HGPKb3>R_*GjVD%E<gmB^>@JR1GC{3QVkj
zamC6fMe3T($+h8rt&BreO>)YCY;Vk~4<U>4i%K={8v6h?w^vs@rLvC^okS*6T5KM&
z0T=~emR#2$o;DVX2n+e5d0tO!xudcpv2Y*<Y|Ehhgf*3r$=UA$D~*f<k(imzL%CDa
zl<w)@n)7|X)GCG3^u3p_H+CMx1(|n^`9o)15?T&Ad)kE%JA??(mi8lH>g~CKp)(VD
zooEB=ZqSFu!}edW!$Z~G50x0<r<ER3fnjqXOko&IBwE=H2#@IVyuayrXQoVR?uc+J
zVq53lAtiW?;yQJ;M88^1H}o!tx|e*OGK}_iy!0*czf+*`)FAnW|0hRv*BQN*li4YW
zO3K(QyGea@HN^RODo+PDVU(cTEbwY8GBn`L*pJd4LEQW>mzLl{t0|80TCv+v?$c?R
zyPbB{=<X_;Z2^7o%=5*-l;d_(mg{Z|<xDKK@K-G|T{*=!)7~6J3mF{yvf?t^ZAH9A
z-5beQ&90g83#eI2BA&9JVnFM&u6I&Fj*j=#te8($Qtgi)t=CKRypTK}JTmxL1B$IY
zbpSdG^o)J{S!Y|7DSean(Rf_S2w12`<QcmJy=JM>aLFJ2fqD|VD%L(y871O@Br{6&
zh_i2Iu#QKHiKJfeq@6jAT<o^CLvMxH>E6jfT+io9FJ#YBSZ+D(8keCP&@rYHCgsgr
z)VjM3edQ8+veBlf;%6%BL)yS_cj0V7CkRmnTfH9Urx31EnF*<rM#49AU<g2ifRM{{
zsLBUtPZS=R0{5}7M?P|sSO?y5fqBw(O+vKbxszxd)^a>#&I~QSFfKDvxy$V9AXVi$
z*cMpLN`K{}8K#6l{FZ;%W2@3zKsl1`_I~X;r57t>(^`6&W!qSVU39xJHT(E2$UB+%
zo7ZKk?txNcOj32vhwq#zygr>IsicIpQu-*L)x9S(@?!VG?87_r*RL5qQznU;$Y)tt
zWO?sS&IpWHTc7jhnd*|)bfBima>id3+}~S_|5xB%ZXJB{{Pb7f1`CB9oHzCf0Z@1`
z5deymE5?oId-sWbhOcr?#(6ss(mpePoCx0V*UODmAC^Wo&JK&}B*_GsDT^=(MzSlC
zskJ}Ce{~Q1$SIrnqSLq?8C9=z;B0JpqQnK07(pf{t=4Wk^gAkbfD*n;w)d30BBY^k
zhaL*Gu+A87@cE#WL(14I5vNEtUOavXGyY(<sj1#azj9S`<bAN(m7N=wtxu~EV%7i?
zju%<L99rQZ8&IYv;(5iCHf_vZ{lE-WrvLn**BxbOYle99%eUX^)irj)%QXL)`Nr=%
za;8u%6d0i1UNZzKl2JDitH!(?n}I^nw?bQz?=!p_<ZhOYvvd2ZZWJ8(76Ivch(%T;
z?UtdfCp(m$$(94U8Kx$PYnwmY-&8HTv8jNy?hXdB=IW9|<%wCc7ElrEx$1a|Mv;>o
zpng?GkqB!ib2>lbj5YiW8oy!2KYq1TUYWUvLmmIntMv|TQ)w8~@XCA%Lne>#<WJ^U
zfP3(jB}wgKl47OL4+i4s-V-VmY-;yDfKovZC<UU3VkbgJGUE+$q!89SnO-=l$k%4l
zH%s}2AG@$kwyx!hR~qa=^e5SYty)4C_6OA!O?ApdWvW(Y<R_yNS<}4+=Bt37f*Qp#
z82r(b$05G4D+-O?9~y)AjH$E6AzoJY;Yx)cR{%p`L^=6sUeHBp7FAF~<-ro$Vbdm|
zY=ocov;IAHy0vh*mR6cjck6416e?GRsO1<P`Kp;>@-`sqROKKVT6MwT*LS7d|0$Rx
zBErtD>Q@5j@kCCl)xu6={yV~roQ2|ha+li<{i$m_ohjP)@rnk9VEY`g1ePm?noBN(
z*%bn@ZH+7*z$b>mVc|PhJ1)#ElEZLqGCewW@d=n#AC*XZVqfVVd@;6ULknW2=cFP|
zy5?UrkaBc;z8`xi6doy+b3G3X%^&?e_00V-PMG%kJZh;u%@t=+;Lk2b2!{RFWM_)0
zx?)*pn3jao=<7^fuobei&}-&b_jvqf$#njDDRl<K#@U&7QOBwNiljKPV#eYQ3&XmO
ziuH$Ng0^fCS$x9AO#>ge4@8A=COK_N<D-S5otLD)Uli6SbZtI!C2?7V4?R^%j%&Fh
zhNer>jc23}cVl}peJ~G~yYh-hO3{fmT;*lLl~peBT^eLEXJz>M^7(qdP>Dk3`3nQf
zpYL=%Z#(6lM{7;Qd@cdFtm=K6s#}=}e(=sO%h`*-=mqt;vXLi<vKs`2_Ur5xV>wrh
zabX_l0tnO6v7)YKB`#M+08r<7*)Mx#wPW<w%DL!?M^AYO&mBEiU=KFB_)LQ{tY#Og
zVBiKN)D-RbMQkM;IEO_XS0t~mKf<SJS3Nv+(cNSC>>17|%Nf@I-B2=R#2@=|ykLO!
z^b$_5%LuBui`d-_5BiqMKTfo#eY_2%cz+drWBixhmQ;0@xXee_;^H!Tx&mrNN3Jro
zdKN_-bkE_8I(z!=c^(9=l0(B8t&|K^Yc>pmE0j*#;`eUs+43v4WvkrT;CQ;Udg7RL
zJw?yxb--e?OciM1i;$odq)aJD01IWvL6}J!zv1%bKumx9At?b6@x1BNnlo89)@l~Q
z0ICJJ+wMfUffifdzADyAdc}cHgeY{PUw@t>qnW(Nk(HPtin$SY7qr?OJ~7g2!j~!u
z&B{*U9GOJr&HYM0<7~b$eoV+#JU-a$zpQ(Lj;mS4-u5bh+!De$++Lt_i>nXOetOOL
z$0C*}TJ3S`f9tm|>kgNz9AbvaA<k<)=8jnh=DTcF7Fd}7AG#RtZ||wGRu3=v6FAe+
zJ~UvOc|crAr0ArBUdMz|!;m)l`muGHuR+i+{r&mo<Cl7|o1`*!E+<IbfT>z(Ml?I?
zvCcBq3B;Q@*pcl{?8WU`W1THO$B}qG9~3Ca6)<GhIi#A>GKb{%Jmjl92>=k5Al<k4
zh*5rCa}BmlHAN&Y;%6?)p@=HoD}oOnfsrguetw}Z+sCsat_wDt?Aze6DuRAxXzY7J
zYAEBNo-stqF8v006%wCNEr#;GiZlA~F*NAAHuI0Ez15d@bP{$g#I2{(XamkIarIvd
zusS`%j@JURW6YR4bzcy%0~4k(M~zP?je+6?3M5`Vn@G)R`{$y=G_?Pd$29X+GoA-$
z#!72`!AYgnt%@3%{Qo>uPw`T@vb;-XP8HNod{JzT5Kp+9dQZ2wths6Wn}=!Ja;Cvu
zP>YFL7j`)FeMiKX>5^LeWCrj1U#L2}5qMCI)s(P?F(McSE9r8|iqxEEcx!P~mH*K)
z<$lq#T+A6L!HlcHm;7#ie?fA4#FdlSmazR<mbNI(t5$Dr@Rve<O;%)J`roR_0C8r>
z#8m56Ils#D65UP}m7kX}doe{6;XM2cySi<aXXAPiwW9+F{)|j6J3{)#7nkqT<+W?8
zYinb_Ej0&aU#VXZPlo}P{6M-Q-+XtGZAx=E0B=5P#(41}rJZF_v#4G8VJBdbsf-f@
zX*e-qQqgM-{xw-=TMT9S<TIq+WG4f&s1C?}R7WiJ>IR|hL^g9DdLY13ywh)#t)nhl
z|38M#`;qOo3*)NPE@BHx#7^v4s?<uvE^4;OKy7N|MUA3131XGjZtWeb!<J#US_HK_
z&^G$;sJ74RKe&JRe(!Ui>s+7fjL@-0#1-XqnjPN<mBd!%=5OG)!Ew(vJ_~IG*>M_Y
zr{nwSPFV(bo#k-Crq(;zFF-htKc}Pd$Xf%}cP!FalvJhzbq2eeAo%8}J<ySesS=Q>
zkeuBKSa&_XdLwmes0;2@b|GOBbf3<`ON8gf-2cZW=k#Z~Iox{-C52(o!3j4HmcQ%0
zd}t5nZ<kxfxXStk=YBZcA_!cLty%$lkgd!RsX43)jz=o^Blj#_a1v&qsA{^brLGG<
zw`J}-tk#iJPVp8skLo-Wv9D^#%IMJdu$Agx!`^telK$S8@(PhWKPC70kUi;6M6h3J
z6icCFng&F*?khZuv98dZ?FgJ?^XZ{AUD)aJmam#YwiAHm-n#7cdqLpztsi1CIh+1A
zA<lDaH>kC4ii5gDFUp=~uw7gEF*)y;ay)sW^a(11lfkdr#wvURXg&5R)c(wWpWaY3
zVAsVE_vYC*TJ^ndX8dI4(aOTdVP8l>z{cKWD3QWTR24)iwVQV4sRS5Hnlb88{e&9>
zXUj*;KTJordBCC6R{ULqWVnD+ZAPV2e-_nTMlR(@>OY1h!#kl_)XCSq<#z9s<@$RD
zlMmNFw^nib7GbOxw2={eAO=SbJtTc<*@r#1%S5G-a>CIRD{d)#M7fbdT>!&Gb!&4)
zw(xMqLw94K*S8PITayaf^*O$r_|^4Q&$VtT=;3tFUxsAaB-~DzR0zZ%bcKTJXM!po
zmdT^sj^oXN*E-y11ChDruw&r@nThG<D8^M*ydE3vV>^z$y6v*V%AV`P#RvJb@#m{e
zDFcJu7Wl(r^1}%Jr|Lm~DG~C4a=+)!t6KlSJk6U!Jw4IqKwU?Bu)}knE+Jx$usUnK
zty+QXx~m2d*39v|*d7~~6^qc%YQl;HKFg`$D|Kc=rhqzO+tY>JCKT@?<5w<oLl6Ez
zl+>itU>m;q<0?3@@F9n0hqjWA=M3_<PrCY8kr_*TyS<)Wvow!o>U?)ge6(a15&^E_
z=2e_{=Kadi%i>-sW1_T{jjo$x>Dvh=_)8+J5k?c*W!lYk2~`g(m;-1*PY{seC^z3?
zuC`w<WQ#m6r}^KRQCB7jPvj;sSf88oKS_JLcqDy66MQKS48l3@(P#XrTe`KT8QWyV
z^v*d|IIA9!LDQ@d$V(e-@VG+6FRaISJpIX0wfnm8?#J;V1n}Uhm(kc16-jjv&ujsA
z8rZ86Rwhn>K-hA_#bk>dq;z5TMo6W;2Wi_48qNoc+99)*<9DK>elX*8p}v{(&ytoe
zWhN9h4IIKvUk}0O5PRVZrgtbVQw}FOJ;y$s{eNd&K}A&O1x@=I^Ai?6#A`}`|CBkJ
zc{GrHtP8N|^|mf|)h;s@@x1jf1w;bd1D&HBKID}0n~Qlog+LG@xM)~7GjerxwOo&Z
zz}8xq6<&i+W~eJAMWH1y(sukToHB1l6BW1Js4JSAJ**2Oz&u$I04U$H6Vf*LEIMpR
z9`e|))I<~MXNddWVC4#Fc-tzSEy6R5M)?G!vf6QEjHxTJaVA6S?B7)YcI4DjB^naq
z`M;_?ohrS#VDPrDVkb=oFeYanl>xpOuZbYTMcxT)`{q=mU5+?#;9)^M3E@_W-DkPN
zJASX@#SX;1{Q3K0T5&GpeM4x|%$<wBio!g4X7{HOw)Hx)$cbtE?k5pZ;opy>I}@)R
z9b#gJH3W}^ihp1-PY1p5@8fKh^xw3rTf|xXj%&W}RC(hd`%v@<BB-C9MFKYcYu-^k
z)SR!`H60(Jh~TH!z(Qp3Dr!SSmn_QO<v_Anjkzzo<8H0UUlA4LR+8WGO!i-Nzc!!7
zpyeesVXDPxwv5XfgT8B#I@!?s6W+fJ^CGw!_VZoG+jW(HcwxAa9b4f6=TxMX1prKy
zb#gG9yQe^K6gYZNq2vOSE7g+2t+h@UlpHy^ZPxUe{>PA)j>4{8eS?6}p8=zW(4f}J
zYyCp-KTjjY4>ECJAzt@ETUND)TTXUvaV1;bPXa@cx7C|%UZ_K317y017Y48b1RW2T
zQ{k}WHx;mi)sVBMVU#x{MGRb-W!*h-{{2#%Mtnr8hYKI@i%v+Wy#x1k^K4IfA4*#B
z|6t0OuN%;L`K}@*kpEjxdgg!Kyp(x-GqEodYK<hsMj270*BS`UXr~da5oz-d^SHss
zp;L~|Vs}=MLu_?^VaxuZG_dpgHcs3XB08v*ilU__;Xl>y#ElRcxV37N)gr?D`PDpK
zW*ev=tI-?n7AaQMXbQu#Ai>M~%uILhUN!;>Vv7aszPUd->ATC~*J>EXG{@|UfjjtB
z=TVcK-*o`xN<(BipXc-nyI)<m_)EfLc;YLqZypM<iEq2B6oG?qqRbDhV8!yBD3#Lx
zb#y*gH#R4V?;h^<mi>AvxRR8sTWkXoK^tX=_;GX&#(lpGs6mL5AQ;vBiN{xGM+O3C
zk(?8@-JZ2vVhV9pGyi1#MfnjE$;wd&uEGVZ?8CVFe_pfrT|>7o2ELjssZW=m{g#pI
zB9#W`xjvQ0J}tA2c1*;W6eUMvjx^6pq!v>mGzB*>8FeER00}jwbYmoAf=&@%K1P)X
z0Q%{#V;@yTfbG9>X&vOdpM?+My9S%aneL0%x_U11RP>fFX`#6K-J|x<^n`Q?Rz$aF
zBxJw9@e!rxWvT!=79Vu@)|7fYy=&c5`(Ydo?dF<6`p5aue{IF29(ET`Qr0+&*{kJ!
z_!N+gptz0~$gnrMk#f8DN}MRFa6}C1Z4YdIX_g0^w(dcK;8vNKJ@I!O!^o<J-mKJ1
zt&c1g>)&c|aCc4mL)yYPTBiH7ld{%k*-5;JNF0N|z@uYPekZR<N-C;nF=%0gC6=n!
zos3SL@<xPz5A>FI&I{BL&Xf&rd>Dx-z)behI_Dm&Hs$F#n1~L#O^WXh&=7*7obWxR
z3)xfaW|WoQ>MK6coZ=3Jxz6u7J&BnoGh|(gJ8j6gh!@qX)}6hMOtY2O#N1S?nEd6S
z)ZNZ>ZY-Dd+vI`{1HTV*A1klzA98Kk!kSJ*gh{hGn=0en;nMv<{gF&?e*3ElTh0XN
zKmMRW_$A-LKZmrAQe-(P`BUPv#uu`l%}jVHtc>5b1G(X*<^0d{AL66Jhcznv<o$!=
zMzB3~I$ufxImwpnD(&%jltoFY`YL|ZHl}j<;q=~JcXIlP19ibP81T_p=2_5!@acpD
zjUcO{5JWBYFCfn@1v_YW3}%L?+?GHE$Ue*BA6}ATEjV3}%1EW=Nkz(?PU~OH8!_B+
zLQR@NM1)pqZS*MWQ*$SIlH~G8_EYH!j4J<OW-mKE5jdiM<3c7p4yY83zx82KnKI8s
z9;-W&@=$)0F?2;eq`=Q>u#6$|{E5=-KB3-)p@`ud6+b&X$Pt`Tm&Cfj<f~WyJu&|z
z4GcXX*F2AXx?;`mFqH##J}RI|;@|mXMjp@AHeD(vhcB3S4Bc<e#Q6pk%J^?IcgEL?
z8>)bWiK7p`Ph|w&DNWITq*MAh*E9RVRSYm-aAc>vt^^hz53LSn^?OjlB0@*iH53ab
z<)nVkmUPhApD0YpG!s-o)0*m@HrEVIDsW!vynQcd!;eeq%ts6zgz1XAm8IC{(DHlM
zH(n;6g&Av-qnNQSK{+Mqlc1=x3jVY3xHpeHuRPraX0Zv)I^~gG=NiA#g*vV&rf)`%
zrq9=wXoytbmO4MnakGqCDO4TJik&*-i?8mU>$}x?CLP$oE-Z|?6>Y&A4lc54_+QtA
za^PN%Z5M>s=!a)&vJtznREB2-z&-6O?^pg9s@ab$YM&~@79p^|9BeRFa3~9dyhG|R
zJIg9-n+ux^iKK*^r@!E3Up?i$OJCnw`5sK*NXJ}w?x9bzV6yU@nG|7^H_%K{K5D|Y
zg#1YQN%t$jb?95Qm;Eu>O-x~92OX_6r2~DqLwIPkn8p=Qt639vp}F|<_SAbrluiSg
z6tn#3ESvlVldq@pSeF{MgB$q?s2RTBx$e4Q0uBRWMU9pg7&^>=lY9MV(a@K)`y7^R
zcbt;d!#wvNs|day{e^xa#5?iSw>MJ(nUQ{sQZNXvx%nz)4?%FGJiIuuB+H64?Aywh
zuVAI;?#pYdEBt>K=t1H&f;g}|-AhdMCI;`vo3>Uvvh1?k!*gV+^=-W>nXPSey@gYC
zWI=1?%ze#%SPfE;q!3!gPx4js5IGLLH;&2SG+*FA$0jIlVIGr>n(LJwiQO0UD+8Jq
zgc|vr6`{;rMb|A}EsCyx5#B!M4C1v9h~60v%@Kb-c*R!T7@XY}>bV1`0Vi=YkQC^%
z*OvWXJXp}mj+G%6<v+8__mTB;svu}Hqs~zryz+0{Z*d0graV-+yV$CA!?dUTKZbz2
zY;J7z-Rb%>#@P@&a}+gup&6a{;ow;lnM(a%9{0aJqH@PQtdd3OK0I(Wzwz{HV{QQ~
zsiZj>)`AL5JB~{hdQj;z`w0UC(h0}H|1rcJ2GB__d#xquo|*WrJQXL{4hZ()tUwp*
zj;zzzEQk8oi?`ETl?_Vbh+X-E!lj0{oEdX2E=OltlJxm42yP;%I(<(&Lu)SO;<@aA
zh@>kIbsowh`&Wh^hLR+6*3CS>Du-}?(^(<p&iJOes<gED4i2iR^+w}}Oi^8Lr5Jj*
zQ0fN5#>c%BO|>bMv%{~`l}A|_P{967YU}u@hwH63mZG1$C*G-mGE`EUc)b3VpC1r_
zx7u?3n?)Ju^$YUqGD|mO&G<Vnhwtq6+ZYH%IpT#SncX#NnGEkDP&b%cduq<?5ZV>Y
zFLQ|bR&?_cZ^pATt`Ol>smyhe(7|o*z(&TJQAqcH44a~hZX+@a!O}!LQ__2z(9U5n
znx<Ggc^}Td9uC3EqZuDS+O#O#n(q(LbLgjbX|^5R^9XQsak;FHh7yQo`Zw@lfX1Hc
z|FTPq79@`?m}5V;OfOh-wH=MQ@>)n?1ivG|)w0OF78;U-my(^xapu5a>|d#Md|U(k
zXshmYeI559$xVc8Q7UyO&2K^LEc#h$=Z~|@@3m)P{8N>=$8WsSlmcMft6O+?GrTZ?
z#q+b6T1lxveTc$N?^QfA&fpnZA`U{-9DMYGav$0Q7v(5UN$Dwr{ho{gz>`LdQU*LJ
zhIay!YOY>Bq*r%f-uJ?h!Hbg|SusrZ@V#N4{BCm@FT4sqw?o)GXifxhFCSa!hz~@}
zu1y@19zK<huOjHbSrhS`N8w!W`fyB0=jw(;o5R=x#toJJwayuz&4jcZjfCVx3J?T<
zo|N?6pv)=>Q`inp#IeRh&hy{9wzn1+VxI@CtV~4t70l-96_uFEWI7j7RIi1V!g68D
z&N|9=N`ym*sYb1$mi#{)4Uud&`Wdh3m2sLk_5AKU+3?Rc+da4dd2Hn=KvSY-#gz@m
zb4_ivgz8zoRaY<{U{+v~Fu5;P3DKYqI#oFN^snt<Z*x4gy@2G4oay?k62hmJdCY^G
zOyR4gx8#bYM0lR@OfhvBK*a(bl`J|03a>VyFMlho!!2)BDx@^aupWa0oi)q!97LX+
znK><wr1|=wh{WE~aVl5+B=|GeYz0!(6Tw!2Hkud6_BJ3%7;8M{+Oy4X!Yh3pfUFeZ
zHG89D(cu*IzDS+V6xG;wgWnWe%t8F)QIe^hZ*D1Z_3KFQkJW@A<9*tP?iUf!inoF&
z{QcQ23)X%6;l`nY_b#f;#F0g*=HbkJoV7qca<^+Tc%EkJB_m=l8STv>f6Ko42<$=|
z$BBg=@4Os{_|^N&dN?Xs_g%1v7McK;(7UA0W<fYe)aMBLP&lby_(<e|f9=jU@4jMx
z>^|WJl0wjvea+rU%c<HepgNJ$u!~`DIPU>;&7li%y6@jxErp;{YkFeKV+%N=GKX6j
zH8r}ra|miosc)Fb=1bJ@U?sVRuh(rJx2#g?H$I;fxA@Ub#G=~CL}`i;LtQxo%xW~0
z#98VXV}%Siu&H$2n!TJbq5>J{*4|k8b=%St+;h<jxZHUVnCyUu4SQbOWqy}Q;tPSe
z3O&MOiloeWlK_F99gTP$!LxJ`B*Eax6R!shtY2@9&wq?T!9Xby5n(-dL*$2$yiM)Q
zh1rSaE@^QU{S#yFh0K?>+^2fA-rhoFp!iauU@Nj*(BKZ<IZa`kQZgEmEy(UkE}pYG
zCKkxNeHHX>)riP5E;CwFEz(KP1_$nDY3y7NWT9d@z(m6Nx_<28&4cnvecxBIK-c%w
z4^KKZ0n%Ch($1K0%hn|t_2)mVn@P%5nM?3pq7hNe+6&|trP;1T>Q+dd_yjjvP#R=B
zfUP?HWBtFq*sQv9k7D4FEX2*XY;8X4P`-fi<0A-FJR^|ww5Zc2_DjUzV9BBSH>D?T
zrdLp&Er~)5mrji~xs|$)9lyYspkV+S92_ddXpwWdvlS}^XLu4dHT(PpG#Icti^+=1
z;j<8tvV0NDrbv#U6D|u&Wwz_xjej&ODtcel&Gz}<zjB$>l5irxmdOUJkZPv>(M*z_
zWoUP3x8PdXc4y(IU-R!K>>_C(;hz@ysD4ZWSVPjzGb*ceaXJ^{sNOYr;fvscdqV^C
zV&T%Xyz900Q=}02BCA8u_@@B_0~tQP&RCI>R{jF}FV1b!)XuZ-&j&LA&P5k8j`if!
z_AJi+L(51fL-z9@$kR04h4z`^u#*RVhv3QO6<29@L=h8%Ebm~EE8Jn2;3W}Z(E8;$
zz-3lwdzLjO*{}XOq-*1z3%Scefipym+2u6Rae$O10J3@(-faJLme*pBJ17$R@~y1@
zzI#kY(tdJm{xi3{l3+8J?J|B$PNtAO6IQ+v)mnqNKn2}06(nD|7btsYBKid#UOkX`
z1e=gM7TgIJYj&_)WX*P9ma8Q$G(Y$w;;e^)wL&U<@@x{cWZ_Fov}6H6qq_=+o>>!A
z^li`tW6D#T5&B>EG5iPH=uny5AC?BW%h{%`!wx$~sQ}Q%kfFy@h5V_U_;7A6>x2-V
zp1#~YQ=`}S8J=q7DJyl~G{~fr7hy7NJwPhXwGbA3fY^K<S9*9549?ZGz{@|o)Y?)*
zch)VD8l!%1SO)uLR*_c)po)BI&;Rv~)K{9??#W&DMPvn}<Z2IP@c9x<1Nec)CV{C&
zQjb3zzD>by@KQeh$8dO0QNxg8ZQ;XEtiSW1c$(&2vWXdCL$O5B@q!O%i!$qXJ2rtO
zvOxhCg81H+5Z=7h>7z@DRk8Y6xR-GCxe;EoDDxGiA)@5t`p=)U{Od6)Ztm`+xN;R8
z5`OD5=M`<3Ok~OGV`EUKHOo<&C^%QwGK8lqQbKE9q=q<{yna!HkV&mNH2q1iP?(~g
zWNqt$Y0DEl$`ATZxG$YZh`DW1c7gu`*rb8mxq6Til4P+E%Pg~iX}v75(r;bXSNatA
zM34T*hGI@!(4-V+E(Y~&oDjl&dJ~5-WVs8Eq+KwG6mH<&hhBOvhb66Urb_cy5#>+v
z(Z>|NsT>R(gLPzGGjbue9}Cpb2J3acCvtwVi1rT%2x_=5?a){G>u6oRW}xy;MJCoH
zEPW7bnf-zRC+F({*DGXQa^jBgn1`xp_CNS~Q^V#%fty9Z^NGE8$Avi#Hm1gZ=cKQw
z3r|W<FrXxy@1{1l91xuWH%rCvqx&`GSWpZG1(eHyrMh`X>^;t*k%wnZ1^<!xlm3n`
zl!*Tevm3tARkDj~StD>u4p_|&DS0-O?Sq_3N~O~~U(brZtckhj_;+St0RI&c5Yq}3
z<#5W-Vg-|2xl3LvrSBE8u}@8n`hCVBEh|qQV+H#Ni2h)Qm<czh*hjsab?F}3u!^DG
zRWa|H2+i1GJ+6aa=$@Xe>Bx{Ue}mMcy>lbe2UJAJ&8HdHz%ZXjQ03vAY}u<6ty!1e
zsNPp@>(^v~u!`uw<aHA!_ZA|!<br_%M;B#2AAW)jzOx%-bhxkjR$^|dEqKwLMr*7g
zFGBp~v(M6`N=$B5{l#E7FXxPm2|<)WYgjQNPhY!BaIm1B`0*=?FcJBgc|~$o2TbI=
zYRW<0%Y>92U$Nc&#GM2=Woph`+JYN%=d|^|8x}6auSN^){{xlqZ+lxSm`@7dVynSr
zryj}NT4YvljIZa0fCdDIb8qIGewPo?d>aziYk^=R^{oreSRBh9bHcVb2R3*7!7sD+
zMKEc0&K3dbt-620ys!`7A^E=rXg%xC1hRn=&o~!uyvc(c;8H3s#`y<Kh(6MZFIH`@
zv*=*QJti=?wVrTK*4-VI??K+vx`@$BRFWA(nO>&wP3Ct52a0M@or|>xQb*(KHH4P;
z`UrQZ&!M%hKG}VyD>wuD?$}3oe$y{vyr0Viv)b<4-!n@{h$@zn2<T4K^_SJ4!Qga<
zTY2K+&FiivU8m{8I+{4!jpZ00GSuE|aWYb4ofJIsdCQBs;fEW`Z@TIxg7Hq%(+Qjg
zRD)#Vk)un7Qk_{AOOm-?umIs5xZLr6_lQxay7&Tush=S0UFxGGtUNlc{4n%~Z%XTL
z{Rc8IRDo5IRLqgHX(?}QI(%2N<9F)YYe8>V*acG2D?@_49kd|{B>W`Z_FHvu2lMUS
z&JNEy67Ausnc|d-g}^p+a+P_E@IDlbSw8e}Jezy&U|F<sD|z(|xLss7>uU1SWv+2@
zt^Ke}8KQT2$v8B#K0>DZ?>)kSsG95<V=oJ#uG%4LvGPIMJ6ZU?3;4LEcc{191;{83
zG?8Zr#@v(a1$#9q@x82Qg6{Oc75~_qX3RK5RPenN4KrVxaRk6F*`e?@Jg6s_T5F95
zE%#-Q+g5IeaJ5vQ?ZGcgUQ@5AbB_p;_rRCD;S{a4R%qpwMFb4`$-?mKt|w;>mecJ=
zMZJnrYBR?BK=vn_C3mu{%f4)ry8VtAU@LIP!d&R?oqb<+o-3iLxk5LlBrDS6<euN!
zttaNZF+Y|j0CVOf9Xe+|HNA8Y(sxZCj+8P@a$*19-*RYcO|)cglvDBP0?;u{%b%k=
zHm(=7@+0wU_u)j;uA|y7Tif2pwwb_;ot)}`^gYb+qw=T9;a?4~&gx?n2--ew&%c##
z5B`XHE*iHDBc_xFL7!!89~=8^I}#+l3R&{VnJAuNrTowzSg(@5J7J&9*yv?a{vd`E
zE=A37L@7Q#_k4#4RbT}F*#=lP>Kvtk)h77?#xhig-+3pg$tZ$6bmw>@97Ka4B#*Pd
zSNsS*+q@j1Ylw;-K&b<p9yOT1soSaN?nt{s-&x`LkD;0XGCF1Y2YFK3%XW#gW7ex+
zJU&1Xn-%gp)W!ME#Cz8j7(vg6?>epYtzr#jj|s)z@>KuF>oil*hLh&&Q8^JOgK3qU
z%Sd??kop6%s{J@;%eHip30-lkZWW$U^Qp9_ay_OY50)uYd6xUMS2NY83?LzXjw7yO
z3+Nm}HwV!%oBqUq61221gnLpAJ*(jIs7ohPwS5ti1%F(2`Sw3FinoI0GmG;p@f^Z|
znjczrFYqIIP)^&ym|6;~-E*r%z^lFD^;c(SqQ5-}zoFG}GF8{-FZ))y8?S?Ph97PI
z$6%)S6iXrL-Z908YF8&Og)4Xqz7rMv&c@s9pdi2qK?I0SDlG^3)n-Zmy|Eb+caS>T
z)g0EYLKLVvG3)DdZ_2r@x1Tc~EQRuq>xU;1O~7>)h2;V><7cIp7_JwAuE6uh-bdJc
z=7(NihD1zBl?SH5g_-1|@%)PTdh@&}bB+C6AYX{$%8EHCOuT8-OA@a|#9NJJ4zJDT
zFQm9^pCyx>@?m{Dzn!XHW{YP3h#w%6Su@HI4hz~+2{)ydS-u(6_u)`MA8A&rwRbW>
z!TxIL-M}VoLEPGk$93TYs@FwE5=81z*MzCr6fwp8%NLNNuLBtN{h-^i^Id(%x$;*R
z<%vq}{1*TbRHZ=$nb*bQ0bQ|^AA>jJ=ybR2Xr}&p!mYL2447EP0`!C_nr2fmTPnTg
zfgWqiB^fmQ5Hm9ICjWTyWbhBNbZHxON#yTDbNFI%)oCz?=AElQCd6yG6-zG6y>13Y
zKID^g2jcMo2=9NQnRNp1MQBV(<sYne)WGqkfIhp%WB1ukIY4tfbLw($U#@0<?g21E
z4vK{2Dub@*m3g-7jSdA}&X;0cz&5=ZxHUiR4<)Z^jqzwvg1ZTSLkkFND){e1gCo}0
zp3Ihr_>e8Dwct`KthI$-)O!x{u}f<D`gaFx!JM29dtuUz%qAD-3;N#gn5~|U1bqLG
zf$z7@$p&+2+^p2ke_yS#+pMxV%P&mCeb1$ee!Qk-{+XMkSn9;KWeEK6*!eBfL-^KP
zIG+^)2MKh|k3W$>q2qd)gmI4GMPr%&4QUV5Ex1oh^f15NDXo-8-&22!hzx!ff(KQ)
z!^V?sS;#0M;h;s<JJ05R-^H!R7dyIWw%GeXBe~W_p7%ZAJzE$`7Pt)#ZREM+`KEwK
zrtjV`>m+Nhnnmc*(Fk9dG9aO=5o5HV`3UPTt(L|T!S%%g%SlL|Gx3%nLA;ckm<t8T
zOfadN1BI>sT!JC{EwfYXY=2B%D}1{A3yBqc<zfG=qhmdea7{Dj!D{C<+SF_H)Hvqt
zqQL&G<ZVQMuY1hO>cPb&{_;uqY(U^VcD0y&O4f+9+im|moZ$}8g?alox{mFh{TST>
z=wTC5oqM9^$=|GqvD<hMUxuxbH9qe$a0Ll(<8OldQxDOE5x=1(L`$2d>>5EtT-4Uk
zoALTIr~aY#RF#cD+%&FpRCFSL`Xoa+SOT8??eaQJ7M+_QKjG5VQq!DK(k7nk>G6iT
z?wu|Y7;}Hj|9x8m|NLkGhAv#DAe{qN8-n2thIgE0Q7I*B)UfV(%gbXfcUnHVDYc}I
zH@W@(y6;x*|IA-dhz=qecS9Pp?YAB1EUWy!_o;a@V-<BT$+Q7h6>z%eQ1t>bbmL3i
zozNcuRAw}kH}bBw>FBN<`>R+F$ca6r!40-V3K1h{zef6R-R_hY^Xn)~Oer`x>cnQV
zd`m<*LHd3XGV1>=6<s|oJ~_xA<$C+0WiM#Co_C5uN93vU^Tq9xWfsiT5sJS*Zzr&L
z#8}w(vYZlx=HshpBEvw}QQ2(#%nzxo6HfD)RY6(BzVV!bpI-rOq2dmHDPFUowU#19
zYvOjP@k2-!idQqG&;0aw!?ZUf`XoSi3+SzGIUk(kk*zYFhQYFas;UbasNI^V!F<IU
zl$E~foInzZgXZ|~bO}w5{6;5HDLx6c--=O1qBy@!n)@uDg-i`4O#6=(s?1=f3NOzq
zs;vSE{=$9~r4(ADkRcvzpj8d*w_LTz5+Ry#jPpalUQ2gf3pBJ(eDQ!e(tuX9()rL(
z{?AI__nr6E3!eNIj0d@&gSUIY<xaV>I3Pvwy|M`5##|yvt5I7ToBgP5;rAsZ^T6`i
zf`(<@Wsz3Hg)_S#U`e?K$d?>M;>lGge352W*pq{qAyXV2Q8?w@muXw;BFKz-A!|sn
zz3K3d=@f2%6&%vDIGgfR%{~twu)_6{R>sv<v`dQRPw=^d1gxw8VYL9n=w)F%TztpL
z$V~~44Oxr*HEuA_vx9EX@bLWmBWTHmHn9K)bQR*EgFd-|mQ$DhOiYwkIsCKr`dBhx
zIruM`sEa5i*viz5QdDCw#l>{)C!HqBsvUZCTtYNBY(;&|p!kk6;q<#fM7kmQg>Esq
z|4ARLIPTd{r%I97<M451bofG(%geVdnwyb|cj5emrPC~d5q+BQ@AMPWfWNc(2cx8N
z6x!LZ)U#qWfYuu;_|{qYV+T*miZNI1ZFdpvTb8Ef+CM}MqBR(<{jbDEZ%q^)%wZCs
z*$G4U!fJZ&zy)JpIPgl+37<B_ajm@lzKRe19c!2yT0Xl)y{?}1Es<-llu6bnx#BRl
zS>0o%N4rE^NMSF*%Zh2Uls$$?ik4Do_aFOW`&?V1tA|N^?;amtE$(cg{E=|b!ubAB
z?m8?qOJ?q@2)fhs%PaM$#u0DZ>0WIji~<sLt6gx#6nS*SNsGEw4WIOC0Ur<H<3EIj
zivY}k#|7ld0C*kNJ3&!D`C_R56?`!~eiO4As{JFRKUxMIg!@PE*hXc?xxZpZ=poiY
zCV!0ckTK23?kwaQ+xcs#m94bq<9&b06x!;z_XFIF$dy(7LDE$x3tVWerguYzNidh}
zH?>-(L!fB4<XSA`&OJ09minel@TFN!mB|$y)4}LR1Vz(wm*9dY%(p!&Fbmsw-$6SE
zed8Ou6xZ(0I)xmYs?Huy<mI!)1U!>EkxzF9Vw29But)F1ZhnHzbPn?z3;(6V+05Az
z0cIoG#?HF`D=MqU6YbIu3`xN<X`6>D*SZ>>Jfx~i-WG;sHyTf+qC&J}oWYx)nI$t%
z7L*c{H_8KI-3bl_)sXM3>(XGq1H6HDwiW)Y(h;1(C02yA$yNG%c(hfZN;_jEeqSGe
z0UT3`urt?dGep0cRr+{?rIIi$Bq-N(|4aPJ5yy-CyF*$0l|BP0AeYPr?h6-*F*pUT
zYLv_VV&-NB$WPXsc!BULEAOZdiw<V>?Ij<99i5|?H;GuwE7_Kz?iB1L_ey?(Jmg4{
zcu(IZ&0#NAJC59r|0?NHL&D^=@LTjd&0SM4sJo}W*Kw)L_1VkJ8?Y2UN)TvDU?=y=
zv8eo6WCn2<h{c4)O_)fynR^B2`W;FS;ItIPOo_m^Yhu>w#bMGGdslKA@S5}$uo}!!
z*U`akEa*XBriX>k5BEt$cXyAewrl14&33gKoz*-GpekHchxIFuSRR>pm<c)zvIU21
zb4N&(@e5KBBIppvjFaOdf1r5tJf(jfmaH2#{O|2i?gl>@Wyy^zPnDLZPJv|~$areO
z;9$^y3>G=2o!9!B!E_TP&A$&(uLSygiAyT~^!JoE#kBlg0_WcOGa@-^eBC0=7pJ^~
zBQ`_G2n};|Ic0UB#lW~$FMr+k#qw~JPi}0VOMK;l$Bn+2Ubt{kJ)TkAwXk6&$u|<a
z{D*Ip4y3pP^E%-MRhLrRlu?Bv$fE7SV6{zghg*&J0v9-&lPuMEH>iLSB~OrxwEMC*
z?8t0vCIm#dEINg9RDopjg|SHn;gq_c*DgJL`Xb<Tsd|NSd+uO&kcJx%s<#oxs400^
z7fW&#z;@E|n3E?CI@MOg{~kMZ#Q*wJ8;I{ezd?;{g|^fwwgE~Qob#LW6NP{8uB%BH
zEZ~H`xBSfkqrTi)ThJ{WmA3i8x@7dl)oTBcXJGIwlfOHQJ;X<8e>&WhSbRVvEUA9}
z8pZL4phfoyNXyrl*iv9ft;tz8Xr%OPN?Nv0+($^N%$$L<??ZA_2baZP9?O+-KuI)X
z_&ZYv!a6dh47n$rfeN0r>4|v|Z~pC+@o&g=%sHe54ej=u<-w~iVDp<p_}rDQALJ_7
zr`stbAJQkr0}nq6sggQw^A6OwcL-Nd?OvpKNV&(R`E93n*eX=h23>3C-iEA9+7%sT
z<KTR4<?`r_@Z=-y9BC()ok9?T$PT*_RMHnd(trNuwO{;obA0T3^PHTP0t7gSEgi1l
z!?}~hRetDu2W00{=F4-~aB_$_IX}Fz&O*4iF(I)lrzSmmQs{zUL$uPVZT#WE_(@^<
zNiDFfBDZ|YT67!!Lu{VrO3u<6Efq-Ux)*rSUa}O{G<Qrj#HJS+<sbyS{$o&&X@I?r
zy9p%}y|BmtrFRGWy0SWq-&O0hxIo6K48lGLL56(h8){XZso&6*rdU91%mM@ueTzKa
zJJnjFoQM+ey7w(me*V*6<Dtl>yUrPtC2`f#9&v}gRxCl~C(qGAyOzC1EbpP3TMztw
z%9hll*Z>nNbYrp1tdQPyxoi}hVC=sWIw3mtf>_QulI*MU&GN73GIXnG8GygC7Sp3c
z&LaSy663Q(U*4qtntT#xdwZ^l%y64gZ%;=%9$pRGOIzN_#n%7XQ3LB_DMUrV7A)+g
z)uM4_Iyon2dHaI6RuyFf3Tt4)D|>*ur`rp4P;;zR{!lTei5l~So2EZu3m~khnKk}3
z+PTc>F@Yl6gG~tjKIvWOVfghV`rP!)uP7yb{;ry=Szho`jDwoIQq{AV;B%XogYSQv
zB#8I+$KY>lt&&c{8s13g!HAru!I^YO=M>_F;*_&_v>fsty`|-wQ4bz<Zn6sD%<m2M
z6*9hk37xCHw{@*_LEYI=-JsO(>(l(N*ON3X>eq&>lHVOk^O0Uk<Fu*9{$d6RzC~m1
zcqf0f=RDPZf3Cp#eG+K11}6GZ+E^i`YM_{E7R{C7Qc;g%ExPsU90^g=siZh74=H!l
zc6xfQkpcm53B<@u<M(dCJuEd#bU;%z`C}(OFO-MeiB>kL87syOOTNOY$YjW7?)@{S
zt__C2OX-mBzXzh3tBaT3dL<26)UK~!npl#rgu)$mg$vlreJeOSl?>8V^9^O;S<>KE
zlenxdN>c%C{rZLokUY?vadHNDswai@z*gSMFj0j)GKcvbh(t{i1oj>pEFJ_JAnMlZ
zQZVs`+mtSZd~d^3k!0AMdFP>eNfblNZg=t;&f=StU*~W64tVX#G}!$P*)?h?cY+D8
z`%X}XhM$_BTB0VZg;%<qWxA5&!W#JGmiH?Yy2?L1lkzSTrl#3~Ehqe_hEZ-uw{iq`
z0I+X_s9f+{r!pl4<rUV$3zaTPra-N(W(q$gy8-dT3HVlOgXHqla%#oR0*#q`wv=LH
zY7su0(z#ld@1UDRU4~0^0BZZ1Bwpk9{U?+Ara=$qWv0{nG8Yf&wDrffoiLvdoqsA#
z2IR@j{lK|w)t#>PzMaRBnR|zACKM+1*$`>d=C6A><RtrfBd4pjKINxfzJ`wOk8zrx
zQ2xr$vAn;9b2RmfZ>LEw^0+EpPoF)GJeJt_{LT9zv-H~MxK)FY2cSZCO?}$bF%M4V
z+g|9>mzm6|E+vgP+NE)t2^MfaYRUP-;GdJS_8qb^I2L=soLuF%?)49bM>Ca>5sK=4
z6`Bwgw{2$x#kIE?XP$2hogT5c-i?F%?rEqM1mZ3Whch;h><AQ6x)1zM?@10U27QbP
z^6{_XZJ6F^85q(YTM03D(t&pK*t}zw&VQ=ie9u4QA~(L;y>xG&_gFed8RM{&c2j06
z#K1y|c2^&JYig`>ib_6byqYjN<xF3Qjn&&nXNVY7u~S&>A<36HL=19T-)oZy*@~q|
z%tgtSP5l|A<_fkIPhVVLoZ)km>2~gX-i6aK+n2g6E&Gu#R&ku25b5Ax4Fd&qm&pfh
z_g&57nr<}jSh1E2D9WEgz>>fP1jj2*GI7&yK6(sRepdfsYtVFUMb?6_5IWC)?1;xD
z%6Sak$BEY!A=1Jxi5!85OUy0Zt5(rrBP2e9g6pZ>A=;h=-wGJO=rzP8ML~(X$8t9}
z104I>yAdiNY<<RFwuR#AK+PNSo#{+798&2-c2A`s&J1b93;lKZqMe%t7hl6%Y!dr!
za|E648KU034QeQWSj&DkTI;(U*r|5RzkhA4jcF;!=OiETf_8KXOfN$hWx?__b2PBA
z&LQ9<F5ZBt#M{7b-v}EHWVMGOL3!6@0lr<SQ07u+mSCvG;;k;?e6I|)jmx8Q3_eE|
zxA{kl7FFy-MGUK~)Rny>dN71AmX-`(o9+MJIn#`XRar5CM*9%gxLae)-Sse{R%MMG
zue*l14%ez#PxZ~)YjGttPTBEQTVXxR_BcNIu8{!=fgj`J=Y|#F1mr-%&k__inUb+Z
z%zaOdR2OjpmTYrDOx07PM#rXNVIPx~TyrYR!C`f;E5x8d%KYwRxg??Z4liNroJX>t
zIv>xeu^5Z7bHBKo+rSrxEvWt^vF1DW?M^uGNOuH<cTEZ^eh>%@Y+&ln%jQhrdP!At
zyP#!oV*qVvMEJ>n3}~o<xx!_xzYd_;z1meIus$DST(YtJ`-bS5n+NZ-c&*yqNu45L
zKj-E3s08^cmZ|V*h*!N+7qqG40i4@jvi#N}tZT7#EDOboKtzarKCcy461_3hl}aq|
z-*il`VSpq)(OJBipn3i0#_|dGzUePa<!ekHX_+17*$F_ze9V)G5Zj8cx`?Gy+?{_6
zU)asPp{*~+Ep5hlsk`%x_mSw-c&&n79;IL^5Ns@+x0grlh^^bWFL>H@5&a$fX*VS_
zp<XMcQFKoZFBr}Ie)<FQo<@{p%<q>?z1G6q9V;`E^vy@7^DWI9)?&QosJK-%066o<
ztXRNq`iH8}K}*(}(I3RrpDn&7Pi@}q;+Op9W&}czm|XAsb+R<N#lGySf6bbDDff(t
zd8SL;aO3CV>)J2E8rChq5pT|6F_r2TcB`IFiIU0cmxjfh8&aC@Zr{f5ZdWvWWg16$
zVJy^yH>MrEQvq0zFZ+%XHjp)BVEtRYYuyk+{0FV~^-#%m#TD3(=H6(A7c4wY6Hc|P
zt5SnzYSoi`X8l3W{qH#MnIzPIy@@8$*IH$A?{yyv@iIAdSRJwTrQXVr@a$6F?4Nr2
zT=jXxNtX<%>%l+~8dr7%$^x;?dqY?Y%^7k8E^#RvLrAWtxPp)Xq@U)}6S?IoJZ;J+
z1If6yB3~2w{rZj3<lDNYD|CzeDgRdj0s3igcX|u#-?h$BAS+!;XO<}j&L1CpvmIMb
zS=}e~i>2D{Hj*N4ynH#-)Nr52Gz+jk9)rhAX!qcF_sS#oC7i!qN1-GoFRg`34<&E8
zFLo*o7T+mCM!J`H+OO}BaUHA4<n+Yu5mi&0#&RF-$FUE+GR18+y;MoO{eRy+NOOu1
zeKQTp>#8dE?>T1WOx*%*L7bdLG}D8R0GGLH3G4uQ)1@CZ*Dss`$CIysk-S6ds}tBY
z{zhTm-L|7z?4hd^VPt{H6_jtnX*Vl6e*FSv7DEHHIXg^!oSpEYvy!Y$oEdJ#g8AbD
zJIAXQ{AlHEf8}aMHvU;~bN0CQC?6zHCMs*6TLb_jHwRk;=PA)V5I%#g^ZP>R=wYRv
zK?}}~iFJ<x1_6g#(Xya71u`Yt{$lNJp4XHmqRgl2_bi|g2b#GgyN|EN#G$<0r5R@s
zyftLJ8fr00e@P3Y(QXV(?_T04mCHUXV|FH3abH(L(dS)FrzO7WYP3ZBf;RqlLE1LB
zxKE2r4@s51xAO}Y76!rgb9STycb}vTvrx)b6p&8&!nJ*a-&=axDsH4^4oC9q5xk*g
z9^eiGo>W6*V0O#cjM$$k3&Qj1%V%aU_nx5fr$#@RPTH-{#|WFHmnZuxB0%5Pj+OfT
zg&45en`QcMi=Qv5tfO7qwvv61qX#*huUr_jTsQTpRJ!>VCRZMDsC{<zVhPYE!T%V}
z4OyqB*WW#kJ60<o`?ntyUv+rsu&(}DQgMHGMM$aJF#c~-m_LTj@vlsod~LVu%J*BB
zuGk%mh!{M^#ijZhOL%iATpDJj{n_inUZ)LfzeIX54KA^5>VVdMuO_>$6}^ApURAIg
zo^()eXD=P)o)6KHl?vGk!tjNK3NDL!gK_c&UKV*_;fFhej1+oS)N%1mKfZ_qS#MvK
zQZZ~SfGd-a-}1dSMc5qNWF)>*NvqhHl;HKjD{ynza(s$fghN6t!qEJL77lJje)oIO
zI_R)H8^Ld<U<U34ZJ8tZGM_WZ_Lu3&F1GH+Z#m|=N9>K5F51k$C=yq9W3_v#YcZmJ
z;ggGe1)E)MaafT(H=Xutxo>@Xkr<n8KcudN4H>xcead+&5+Z(eZum`ehrqL?p#21B
zk+RIdxn{dwnKmxxjW?Ui+NcHFi1};qJON!gUwOmYDek48$&J}!rOmkEupN?tx)ts@
zIh}}o_+Y9ECBreci^44m=^$dDm0JqnOG{qwd8{QJ@w=kDyR7rkskTEKnoJ5oZ@Ppx
zi3F9dyslY)byFXI0+WBC$01Z<nZsfq`w7vgL%4K&P1=t)H8m%-X&7vL7o0n<CT2GP
zmjES!a{!L_x)8GeG5nMH=z$lD2l`(O+urwA1lQA}ZesaNfGZ}~AO7cUa|*BQSs5ZN
zU%1YG7n>MvVGQX#nHemLX}NoF7WLgI=r*=50|7g@6Cr|7y;MByD$G>;V)tjBj`Lf0
zC&T#NLDN)cF1!YfvDna^WxcTqM@8>^$kJ7_96`~EDm9lKc|5WZgYOX7@0<ZjQ#vpb
zqt&-=eK!kwTw;(fK*+&)Yt;<QyW-JuQpG*XxT<N>QSxp@P`%Xln<3o%o7xAM^m?YX
zg{X-{?V@JKs6jE{02g#=s3PuzK(0Z%sZrzDWB^8u@9dGt^OX@Lmz?453NU{D)U@Mu
zWqT3PHI9=0n<Vj(bz-fR<M8sHyx8q!z(oeeh?~`yg2{+L!W@OJW-)Nn*NW6>)X{fo
z$LIZh&#V00JpZ<NM?8<I+*?b@i&B<;bTriL%RA7z2@C?zEX2E%KO{dLEK;4ajlLKy
zrTy<phCnyp=VRK&aJ2STv8u>jbI%JiG}oRyUOQQgAE!=<805VyX`K}tR`==TWXpBM
z^QNtf!3ZX&D(|4c$NB19&rmo-m9LbY&903E5(%j7;gYT68t>_$=~v!i6KI^=t;Ju&
zQV^Io-xlW!t@YR0zswijUVN5$<NCVn;JMb&Qob?g3ypHDK#KgH0_Z_b^dnKT9+21O
z8h;w7^I)WB{BQ?H;u?lSce1!HI?cTgvtnL|UOnHaGZ*qxRSRQDUxGD7srS#@=!lti
z62x?9VryAP93SlYx!-lKRGLRKHL7)<Jm7q{RKtIuHgrbXeYRVcx5lw_=uh2PA`3$w
z_3^<MkUvx=Dw6pfB)%0WuDp!w&s~>4T-t~rgIq+R_*<yFI0;uC0s&TZ#on?Y)$T9b
zkD5{Lx&XpT%d3JLEp=4OV!(j5;UXm{N_n%EPK|w{cJ-?iQ+p`*yK_0GD638mSest+
za`+bTG~E0Py-9vF>3&H1EwM>x6Xzpo)3rgvGA)IFRD@j3>FyrbVxBK*kPJa|5jx`9
zbTMywsKH3JUW+4JrEc6x)cTF@(HYNNzWw~f5sza!j(?0Mi-=|55$P*3X3^`MiPdT^
zt;tm=u7#MpSg4AF5;s3w^M01J>xSpBf_sM88yUMCJ_?^uuIFqwOicF<!E62(6Z`uU
zUJGC7hmJlX@1({|XIo)g&R0eFUNJ$N{OUNTagr;a_8&uLq<#?*y|BF)B-0=BE$L-<
z_(BkGNo~xsiN+bOu0Q88`Bfl<J--n<*ffnvfFghVKDHIy&92J~u2?;&Vr;hRfVCdG
zlYl~=O$u;>aewXT{9&$XT4#DqKU-+(f&kyQ)i71yesQuiat{knOU+Mo5x70QMsr*F
zdiySI{3JC^McX}J@)#_54AM|loG&%_0HS?DvSu4>$d9sJmyqa918R5&UERI#?D3rB
zMQ|EPY189I3`HE~1bm|-F(1I}Q?p_#brjtaNWepTH`wx;OenvnX)2Q%^^-PjZ1D2a
zm#_4=%U-+)3K6W}M=%e4=^ZQzzF2IP72~XhbGRvYKO_bh_k85B$JCRbeaiL8pG<lY
zgM+3q??gXNLf_t!U#@i_*V_E`&QVv*8v6YOA>(_ohiF6!b@3#Aa=oWrw=XiGn~fI-
zy5)Nd(I3WB!1kDO+2*f%yv<C&?Z}fB!;5TRCF5`pk8y>}j}u8K+;Yw!j4}O`r=@+Q
z4iWx~YkG6;z~JQEbj~awJc!`1=brw1(&rL`W#^OGy-Bg%>}Y0@Who_@{n0<#U&lh4
z5F!3Irfa&3{be$z_uDHk*6-q^pBEkW7TIq5XEleZ`UL!&ut|TNE_!lq)jdQ%l0Nrn
zx0yNR%JA~RNI95ZmWV?sk>tv#+Gk;;{y!PYIOY~=?{Skzpyg!fr*9hO$ErEIER^HY
za;mK93Z|Gt0h6=!Rr6DdbBBfa&!;y=&B{%4P5q?_<~UljkrJsVrIg`{jANQ!Aol0i
z!#malM0%tGXy_I?@#gg7EUJ{CMUM6rmy3;>lD|9Icrq%Q9>0rYiGBWM!E?nOW-`>o
z|KmPjz0<>jQ~E*p;GUjoll=O+OGw8!uUdw1Z$p})NPT&mC#&4~jbzK@c*CX7m|nXd
z*R%xzHB+mP@!~))?@qgLfNt0CAfXfM<SzitPi=l+9jjN4%P{Hefm(dXW^Jw=8f1HY
zL4KL!r+s@>YrSlVz+-XpCr`LHPZGK~etlv@q(%X35xBH|kBd{`d>uLdTJQP4gl+4t
z%9G(<a{oZjTj_jVRrK$sRH=%0m63RDI5LneQ@{2??tA&NE&Xng#<{9;lWZM-8{4oi
zoDmK_IR?=<9v`c5_In7~DmqD$#MCPCxbTs}=)R|ijM%$&l4XD&P373jd6He?=PhMs
zcDP{dj?dH&UxyPtA0k~6D@BJ8G}D&Ys%X-DCQ2rZ7i5D8I3(4<^5DaQT6V*=mVeV$
ztvX*0U=N|KYumBWbUt$441%OnI*;@Rc`fpn2_4&fG<dB+1?+zKw*ovLnIT&_rj_FS
z`Nqr2)shw6&FFM6E(m1C^*Rt}FF|%*V=Zj|i2$aJPnqE?uiJ(bIw2#1?&YO2Bg3Gs
zD}KvYKv&1|RAHv+g+F0@h(&-74|s`Q(@-ctL5LO9j(|F}&kSezWZ#Yk+Ewd&CxYKS
z6ZB`skNX9K`a0}|T|Q=<r~@Ccm-@B*9#(Vs){nAo?7G6+6VGxx0MTuZH!oU{aW9pz
z7oP|Q2>Ikr?b+4Kzm8czh~xz@T9#)4zG~|b{w+Jvjb0^{yJr}D0#Z4BHL$Jy8Nh@i
znwh*{S7S~Up+|+$%~a}bIcZTj+HKHtO-Ue40Gc6qClZG;Eg8&)cNB#GZvNb!_rD)H
zgo1G`s=1>M0$5jmXe5m`XYQBj!+hF~0S2g?>b&Q*W}J){E9Max@JkZnC@wV)W4os)
z6B)DSUdrGwOcb0=CFp~`@)u*)RzehAMCNH#6(*CM_vdZgbQ>^uLB&M@t6~N;sb*#M
z&1vibItCOFhk)>&^|l-2Q-GHWb7=}G<SV<^)LcNt0@w25>{hhS7OilUxTSCL^y`~G
zsmk@XG_n|rgu|BO>^A||Hy4CNE-*G;ufE6CtB2S_*qgbmrf?DoD-t-pl3pq($cc(}
zW#Zu#4xQHj$%6$1(i0-WpsQFHdL?Yd_GUuy0&`!+`u4*OtxVJCZxAJu8KTaQX|Z-=
z%>~MyR_buku7ZJm+<c1Ezm9OR?9o#b1_V3Z%`E8h^nJNBzb(IN!6;kCQ6?2oT%&Y?
zT9K@bv=>QQ5@p7Ovz8Lo8ebjv7cX0_NgeRpPGee$8_%O&JmMkdtkrPvO-0r%Gv&<^
zp}*F3f7V8|HgF(BSZLh5KR8R&1DwrW!839ti7EB^#Y&I3PP1a{mPPUxCEZrT<%cpA
zpj?qsB>n+GJ7(SZ!3cCgu{y)>(@-j7zKr>%fiaVz)WSa-Y*_oX`_3xo<yn!OW@GmP
z3(e^0U4ogb?F^OQayX+@c>3w4f>hspwI8P!IR^w6W)r0ioRzGyU%7N4_K+K!_P)@h
zWP$#`*Mr~xW^Hjnp&<{>uG#d5aR$CIg>Ds)0wRJ`qcT#g4d?1|5i_7Omcr%Z7-k=-
zy?#7%Kx7XL-R;jAa^k%QngG+b52og>fh-{GzAC}!pp2gr^JA@e|6YG!k+$~x`vk&~
zG|fq*RP^2N(tY2UVn_#DsJeH7x5`$$=wZD!zBc_d?dt<I8w%sWMK@e!Jr=?*Gc=YX
zt=v?w`{ekc<oCZ_I<x3{Y=I|25AW`0*H&@-e~!*Oo~{1<|7fZdt-XShVaJG7rD_YI
zwu)I2dv7USYVQQGN^91x8M9h@#Hd+fkI<@7+&6X8ety2c|IZ)i@qV1gIp?~r*Y$jA
ze$jeB)zGNW|3#(Qd&aQ+x-|Tj6P|5!>{9mjWM$-eg|VLp$JjxD>mm0JY#Pz2%jMF{
z%@(W2GHP8~HTAJ`#qrB|#z*qGy^iEhwk{mcRHnCfqH?IDIajBp-ooDTMa05IyyyRE
zg8PdV+@bK5v0r-Pf8Og3PocWEQTKvfF!_N1%l>yN>g(-0|A-Z}hp9#4$4nG=qV4Qj
z3DpUG7v|Ws?Xqg(N|kHttGewrUEkvE|50JCx7;;83<U6*4yLbY2~2^dvv|QoI%~n(
zs`YqQOSv;VXLsS0NByGVv98glUY)aua3PCRGoIR4D1t1|;PAS6{GO~@D!~JVl!th!
z*ixf8{$Z^2xIIK8lLwZ0EudV4N%$7WxfkD{djkO^p(Vw8_s*WJ)`mCeKOFlS;QvdV
z*DIJ6F$}=z?P`hO&rPx3uluCFPBqnJcp6hyel(7&PPG(F-&1_qGBN+FWMD^y7AL?{
zOs~*)%f))c8ZD6pRDQ_u_WOoQ!@KcMiPjXRb}iDGF5Y?pZs2yZjb+x=l2e(OWXEft
zD80Y;I|nH*_BS6A*cNsD2NMCft_(exvF_vSU-xg9mD*P!#X{u~XD8(DN<S>%C+82{
zk{9|>D~x6jkj&JkvywdwV)i5H)2wYZm$OK{#;B?Fn2eB?gf<uAi5{7q@4fYMZ*sbB
z642REmZJ@1&;V$#|NapoYm8-@HR-#aSw0*cp^8SJ-8>A<<f;+fFaE^ja^#MlI!`Pt
zi}lOc?`K6`pf=p=%Jem{btHkKX5D(RFP0|#q9X2?ui;$@RzFQ={i{W-)0HxqUEQ<+
zZc<|qOQ8g_(K1UT^Y%oMmN$lpt18yLa19Ku*Ckm`(u==eBj-Kh?~@)gUGrCcPN$C&
zxavK5?eRVGG&@@+$ojKv+3VIZ`QDli2refXfS9JuetN-?J4FL|d-HF0-4C0&@$=Z?
zw_1`P;XjC_oT;HXqs5|mQXB%Se0544U)H0=;2K3|AG!CeT8l}4qz*Pc;+vD;2-S*J
zWzaR{8233?(oV*GncLEizBFa6WGYg2Gb#g{m+b!|Lm9DyntJ+DHh+IFnWlu9b9Nwz
z*EgjA%+gUl{7I9IznJs$Ec&9Lyr8VDaE6pf3xg!$Ra{hecC(Ddru1DbSD<s*`2hN7
z|D$pqoIcfmL<X}NTrhCu_+#{=b$GS}X*k$@g(6=LwElOP?-c?&OLO)uX~rGSZL*Xy
zLG(qR4yzK!&bi!GS4iRm5cQ@J>3p+C{6C1NMyfCP@MKG4Vy{!KThxeCj_!-lMZN~M
zd!yA?re6|-wKdm_`wE3SjvqJB=5i)IY^g16>Yev}dY5aoF(0!^l9Wuj10w$<&}uZm
zuF8(&8Gb*`4t>-N<B-JbS;zb)Cge%O>d_3{^P-uWDLj{*+pH45P6GZ4ch1(RTFd`7
zDpgd0#L^bd5hlpOX5duod}+#q#pNO4Wld(i`_!>s?|Hk(y6>>GpWY+tqw|8!@}sQm
zi3Cb<p1N!x2ebg`v`|*0f(aQ9zPq^uOepM8$l1&|U|nkI=Uf!(UvoQ|WnF^m3lm8X
zvYxKLZZ3#^Fc??4==c(23?>D+KvF_EpJYn)=c=2KR9;EVWuY%SiBZuN73;xwLzoeq
za$%4c-lL7=gp|H6)?|5)cGnf)d&m1DO+n0@y7kaYbnUd{$v7WzqVd}Pram43(r2az
z_SYm%0^zJnf&A&zQ1iB?r2T5Y`*<>K=nU+N6mE4hR^KJLzw`ZQN;S*v(QAqzv&x|>
zR)NX(Qu;9$Ol_(85=qB<J&;?tv?gW;;GtuPo>Et8u0IZQ0cm_<l>=L~zMDTyn=ftc
zi~;8HTd8!bVv$pnn5?MMK$1t0Fhzu3ZPNe&J^V){NyQJ&67aCBK2Zj68t))s+HMB#
z#kiA2yBC2%ZshqCMUDyR9;{CAQp*mQwyH|}AC-rOs>ZCs>;`C6Sc(VgQ&X0wxG=)&
zlB*MwyE;qmY8?zCK-x6?Cxv-M(E$>g$;6Yp^7pM1qb%;bm~Fc)|BUbaD5a)D%sTSD
zhQ}xt$=qGWcGc+c&%&aqw^L1c;a^%Fo<IkRm&ikY_qBZdAU@OxSFJEsEjCyaD|7oG
zwHU98LBqzp?;D%uxPF33pF+z*Ye7GfuK~cS2NJ`LEKF-gmdHCQ5d!zy&4&Ai6+Tk`
zZmE;1bDIA5U5gzAW3N^D<<;Z6dG~IA1l?*2JYdaAf!MD)*{MElKDKb$YWcPN3~6r%
zTb7$}Y0G{|@I}z53+O$$l+!06CU3lIg1oSBiwnN&<hLP<B?r*6PGzF(N|Ti|xApjk
za+GeS40Lb`WgHww9<tu@)0)mhF)wRK4Q7kuZFO;zu->IkeP*fp>R}gx2Tj-G#N#nX
zG&3%kS;wu+yUjKYw4$WJF6Io*vrL*))2y(c<gFA|&|!)v`T7qjKl?LAl$tWaf)Rub
zr9Z_!(*>RAQ%;(4uFRHEF~kCw_3*{~{jty>d*ht}j<KK5RqK_#0sxJ@yJM}ma#;?|
z-uv`w&YAiaRXoH}FOfK>*t3<VoGgEEU$x{-$Z3#X?d{$pG07?2G3S%0l9HlPh+nhy
z8<zMig1Qgi|EI~0`;zYE$~6u!h_+=;w&0A%QYU!;IP0+gDq8+dtzjbvC|%511UKl+
zxCWzXDe1~wuceQOQ8PWUchXLEWFb4OPWmzZlg$-qr#e5{bI38Rgo<1!5!92hv~>nq
zUccb+x)T@_WOx5xVD@oH(tyIUnA~uZj9!O$lAjQ&<R)FgBKTUkR`&yJErVGM;yDBw
z^TuR)c>n^+2D-dhmo)g!KGGqwOzw-~Z7TA-hXn6z6qGErc)j~3C0!EZyZ#{S?Xm6P
zs9@*Gp@>ebQYwesAS8z&1(!b6$=P`$e60T4BkZs5j$TS5HClZBMgjaqvOkV{nB#&y
zcw+TjT|zw6ELb;iTPDEa2+todZ|7L+-L?#LuBqyx(g=igV!p_-(3;}v)V-KJX-&E7
zD+7QLRd`)X`~qGwfSwm_ol9+$Nqw(<*wS`a7O~LuusMmSAK6!bD`oPqWM~@Z+|q7~
zt?AnKupys_JTZkla&2vst)k0n1zZ?Db=BaUglMzdh7q!}#eJqvHZ>wE;$w<KPr1fY
zmH$T-TE-atV0ZEa$Kk4b!*_p3xLP%%>lghI@2YV7wJw)#s~156f+R+EeF#)j!^(gM
z!W0SXum@Rdi(B2Nb@OzGV6@6wsTY>rsmv`^3)HWjzSO%7iMW+3erSKvWs~vxRt&Sf
zJnPtehMhhKWp)XZASip}?iM0h%H28uuBt{Lm7UsajQLu56K&Uq0GE`!1=uL4rlDQx
z*Aa$R$KBvQVg^{7>!91CfHs`N?;P9LzE3<vy%_gD^@*|+hvJ@+c^0>I`UEuL!x&AA
z&5~>rx9O`5EOcEO(7Pj8-vdq)tTAB&ak6n<(1+QNjgF}=M4E4@b<8^mPwl%D{wK@W
zw8Fz`n=F0}88*PFCM6X6sdxY+sCjOo0k(NGb)`5RSWH=0#QbW6qH8P^YqO^;c>8mg
zdgE%dA<fRC<}VAFwC6)bLx10}8wZ_GOOyXcwTb>43vRRQaP#S70N#_t*3#qnuJQC1
znVp^}eTAgqAjmh)1YSG%8*qnar-LFH->o>@%2I-uZqJNTU$MdIgm>0B6T%yqlfv>a
zC+I)l_09A_YTiTi?RNDJ^phy?EBydiUk`*ZZP$*BKQN<)mZktO^4r-=;xQ(Q+s@iI
zQR<#)lTp&Ye;e=r4F5d+fta`_dKKfh#&f8c{^T4t8i$5=TNBqGPxxME^=EcjjbE0M
z70!lNk@_307%U~#sP0&m5-LAt%7L;Shi{CMz`S8fio76_pN~8zasF8Pa1KmRutj0$
zCB*Q?aK!W?HBYK8f+CLWXBCk9QmEuM*CGKuW!wM8JOaRVbaM#dUW|<c>t%TS6DZn0
zI{fhW$%v@XXRGg;9Meemx|#@_?$L$b)1qz78IRyKO-hUV$SBo$S5!u*v&nQg(rWI&
z+;9du3u$i?V>Igvk;%RKG9cBsuf>HD%J(D;t|@#SW7grz?gq^Z=v%TfT*hCY-&XA0
z{0=>SY9SuC1p_`9_w0K%%uJH>?$4Pk>G)+-+T*K0ia=t8ur?z;S_4V(B|3@LPvdhn
zPKy3VWs$L7Bf4}WgYs`e*&l*cb1W?J7#Q9!GD15Gf64=n=Ozn5l2~cCF}uo`)R4IS
zlNCp@o~nC{0z*;-P5-gX$p@C2X;;zL36Q6O$!{b+<@@*f*hu&UP9oYnPFj+NTSZev
zm>?v|hkWspepkzg7q+7&$8AeQ`J8#Xj^rN^RYr`{3@S`;^YR{7oc8UeUZ0yy#j-S7
z+(1+T6soRig>WW)+yC5nW%OZnq3>Z$#-FT%;@G88AOSVKCMf9^zm4F(=UH(rzDh_p
z;*3p$=*~|^phWOD*u_x==Y&FVdiL!fmp{&KfsCPHcD4vh7l8f(L+*k127cqirI~kn
zSL3Mm`E6}homl36C5kqdoO-kaxCjh?9-%XTC>To~v=;dCr;x7epX|p3q3$*GkWi90
z?6fZ@!yUdPA)c|*b8WMG*Js1`b?;e9vZ9hHH7qvGNlFSLfW<;KqHo_Ze7y-s(g(4y
zCwc9;vv@gxXSvKTRiBB()*LcSLib(nxqMnHAexPFkJjGCkMB^qbqK4kbqW-r%QTz`
z^USuokQAXy!><>_Jr>jor`)Lv;MMCpS0Lqk!7-lS^DLw?8f~C&Lywi;>`yHvAu*0{
z9ubtx9?Mp?D@}}4V7pmwPWz?e94<2MWfL&|AXd>%IydA2R(6>a4nMKH!L}nNj2U(?
z9ta&AfrS8nqChde;Ff}qyt?Yi^E=Q&Jt-<Wm)9%ELG5o$oe?>h<*y;^cm}LU+q;P8
zcup^ZwQG*VsQ|L(b#Y#>o)tEhcC728VC`@VEf~G3?|UxBUFgaHEFtmMm_vdPgX~hZ
z+zII!BECHN`Ew=NPv)g;Bv3~$W>|H$wE|PmhJT8@V`JKnUv<f&ag^!2D_XH4nG&Qs
zU*lWry_rY1+wK*kX7Of(L9(&5wqr%3zf$mR6d<3exszhW%Iu-kB$cP2A2}kJxZ*pz
zTJ*@x9h4$WH6lS*_H<@&6*JP3PH{YMe5CFgr4oFtO}9F`Gwv%{LU6yTP*1fU)uy_m
zgh&#w&0=KF67Tk__IMJO_wO7f`FP-&pRd*Yk0Vn+;B|5*zc@QGs3>cF0{;D}36Gtg
zkHEvU*hsmJB?+&o5dKd^ZLtwAiOV(aM<CSz`Q)@u#v@WtV_D0@NqXz6+2R?K#<?qv
z>p8m<B*pXlaIG8bIL9>IRTTJ(tN~L|l)F}cP0~(<#hsC#*+la`KohL>KmAjkuFsx?
z&?wh1Yx^6z8*t(0<IVBk7~*ucCjb4eYFxVNp!Vj&B=kd;oFpgCh<VJ}y*Rm8Qlm-W
zDA$@9)Y{{U_&f8??^Zw5gLTQcaAKr*;fD|F7fiyYyAzA|b>ZJ07u+b`44pYQ?XMH~
zG8L&&=@lLR26d@waxt@PSkrH#bDHe}zbV@b0dAykyy^c8Iqt=O&?xcf(`nI*T6;dD
zE#&}f(i0M64yEhlv`nKkq;!=ALp2$~FHGN6qF%cEj(w;y5~WZGX+gOX`(M5Q24v}I
z6Sz_lR)~J|ZulH#iSy_4coxbVm!=-oFoEDC_L_12?`{Z}L@)o(5}X&50Cs1tjGJ~m
zt>)cx|0MAntQpQqm8Kp>ghN}rD)rxf%vWwD$KHTU7vFlCA>otdWZI!8jq-U(sqCJv
zyQ;1PVbAo0=kjz3tLEwXITdXgYF0lO1|kRP@A(_-OCEmklKaqCx@OzbU(J5f#acR6
z8a<M(yi8&b1RJ_AbwFI6T$|mH5grA=1LBF?GN|WS<Bvh@rw45EX0Cc+JbC_Q{6)zs
zv6I>3%F=FW=B>0IizQ@VpPlxs!(9A*O!`G=&9IuIG}yUr-GoN!jYWoo0~y7TAJ>_%
z9)d^JL9&=fSm`LC>AL2_t{5{$Qz}4H#k$M|+IH6M_*Q%ilk*^1q3Ie{;it-?o5cFX
zOs4OT&8TyHI@diJHERIXL-U@OXhn<?4wi3Y=#2X1<nE;8fMi-VxLR^$4C}|3EB;n&
znsi8WfiS3=j*AdxE|C5#o5Z(G#S&4&zdpkq>1B>-?_h+q^y#=@rED}{>+%0S6f_R5
zD!RM69|B&pj~(|tdMh&a@kBAQaY6&E!Ib=@lE1yVUz&A+uISVZl5&+`b{{wLMDs93
z(1H%Cz7)k`CB(qpsN0mfD)A&{qvh{}t764*4nYCqs=hbS3dcyg0jR=qcCJ6jDC$4s
zwKa{Cfj|Goc$bW)I`1zx$>=&8yn_vAsx7a(jLqoyMckg`lZ(z%L^Sc{Zd1X<hd>Zx
zNE)CaR~Y{8;TJKy-mPQ!@pw%+aPiP5bum**<pBxM;4q9ylaR4=XFT@(ds4C~x@rGc
z<JYNGTkG#Mw@Q8alU3wdGIHkz7zu%kde{4mx4$0z=Bf$^6*8VZC0}&Rd?A=8xl^nV
z>vp=_Mu2g#C-J(dJWW(<6E%<Q)s9i4&G)aXOD$yw&0$~J6D2C8_us&J`}ws!A!uPv
z%Tq1nj@uX%)#`$fA7oyPO+_kiM?%V>c^09ux*i6_7tD__c>9SP5`U&2|H}|);^Tez
zV)Ev{O?KEyrj{BReB;g&cx8`{$KCN<Ti;L`j@;LipWEwC56uwXzV8d41o0a4IeMxv
zHT7F`i=^vQ2DS5<u?@)tgTCWCA0-lY)X>JfGOd=axr)sVSwyKC?eyzFJt5i;SG>Td
zCa6YV@q5O8uB>ox@W^H7Lj{kI{BH{+v_nOWlmD#*kIdNZl57MNn7`xr{=kg(*EPYE
zdFUCgt2)fJ)oi?-d19=Nrh0w32FJxRIwO9yaW3l!IWGSY;IwhK8I{%qF}vPX$ahzF
z#^C8U*FeKG!<8O9Ox$9v)GVMANJhyo-8ORBTvkWTJ2K}ae<@t&_MkdmI%^AF4$zct
zvFm5VQs)U#$~j-)m6d)du`Z7MDU21)vmm~NELG{jLG^k%x4X4*u9mGnv4Zx(ZxRDN
zl)h!NT^N`Dm_K>==`#VQL=6P$o<Pi;Z{N+S-}e*Oi-nr=^%te?q^*B~ubDQ_N<Er(
zQSu-0wbq<|UP+IF+qhY^(euS_Wa*wHeh1)oI_XqX;MUq}PW4d}Vq-ob6v=AO8m%e-
zxuLg>DAc$nb)$;Nn-smq(Q`co`erpHH~jN%{>|pS`i`_Fu%GKPr^T(H<a9n?yNu=M
zg=R)WizO|Y%cHGq+e?Es&Zh>E8#(rt(NCk8*Ry(k46*YO)eJw~60y8My_ni<{1e%#
zFZ-P8wf^`K;toV~4>j8S3c*1&`3<&iSzw%wTYg@~YwhbC#gmEjKY=uQpRAEo>`TJW
zZ?c`<KgCu47FcCl|B3KDIy^|h%Rl+pWozu?cP|HY$~Tgg<T=I@B$SHc6N>MP{_y8>
zjfY(K+j#-|f$W@XNq1X{4W#91eLueVnor(}D83N{Sop2PD*r4mll+hWGI{NHD6%wh
zR67N&*CoQd0=Rv`WwcMN1qRE}COy0N2*WAWg?x{c(`OGf0;_$8xbp`79|k=PWH-*~
zs_&c}%*45@`c-VQ_1HJ-M$2q1v_|o;)oTaISNBEIB$iEH2btv#mOQ1g+S6TiW*%N*
zUK{F4idYm$Lese*b9ZFh%q2xUC)PafGO{#i`^m&gS}?>d?Q$vp6}SD^GW3#9{b9@4
zH@cH$P3{3z8przxo~Pj``Zg+OdFAv;`cskVD>mrAeXGASY-h_d_K#bJ-UR@>g=kp<
zc6BEp(fPVW6u06r(SBgAg!Mn#q!N!p-j=-kpcF{ddcSrUUQe>rV5SkvOyFS=&2?74
zfyGnvA;CA=VP$zbFFm~#QF^SsJ4=tbFI5eaVTtL3E>4j5Sa)^CJ;k;W{1eNzSIcVo
zOyn*lwu^JvqeV(!eN}&LEA_Vt9jB(9zqFFQ)ysVh&}mp~zDgWnnQTi=SlUI)5APdP
z@szN<Rhzr>rAa?)%ul(Q@O?1!4}L#AJ;(WVS?C?`0@O;*pjAaLCp4E`za{XxV(%UY
zz|hzbKGQ~Qn4vw}m}SfcwiFr5*dLR1-L*c8cCR^SBr;+DN0qvNc(`BZTZ=~`2ir8_
z(Fg&Cim!%;S_l&Joq<LO6H(vQc%^1CsD1sjz`!O0{h{E!ALiE&u}wdJm|?nnD$iV=
z{W#>Q_-j#j78bCI@M6OzlHuVCx_^W`ZjL98GS%kmDlT!qU26Q8mG0!!&OkM7D_^x=
zLOE%>q{D4$1b2IV$cB_3h9ne#tqTJ{!-|K&iN}vIo2Vn^Se-o2pKRLgF|2e_hdV8p
zM4=t`35RtRAE#g*6T~Y!aQ6;0IXlj?u`=#m^2$#twaROB`M9r{R)Bw;PuFp$9P1=+
z7hvfAOW11(`e6Im<)vpdKj!BZ8*LbXpM~&R6`hNa>E$8<ib0OCx-@Qb3{lf}AQ6+;
z6|}jV_;(Vk_}W|2+pR4TC2cU2!G>00nTMpyJt7Z{-R`i@7V&;3l05|N!aXlLc#r?8
zL;d_X>pFI4O;;MeY4vAsNSK4$?OBsD25mnS7oybIal_Q>hmT=5Ci_<Ct|_c$#xBY^
zRd<DrB&C6+iRY`jU>SZW-TMMc%w4~H@qtfC2%LBJ?I6LAsAGYp&_OLRft*|8M#s&X
zrVXfN()?XDBwcXl<SJqc#O)XPO?;dxq33nj^I{GU=Vcod7rfnrI>mEimdxWT4A%$#
zDHgMtE3@*>p~f$HHrKdln=1}yX}QQewvPw9*Imo5^$Qm{hYkW_@JO9>Jk2%|j7)3d
zVJsB_V)lEh`}`|inEH{ti&YwpDm=U@&#U5{qHcMB^`s&1B@>JI^$6?C;-3cosqZ+*
zLlRm;9ap+Wv*m6QJQU$$+i8kag(mutWN>*e9)r~z80q=-1L1-X7H!Yvy>B`@aU$8~
zi0j{&o6LTvP%NeG=!#Ku!=fX+L_K^}o10f)Wwk5K{!HHo<#sfL7~0AzS1pk3b1Vs=
zTT53rw)lazUk@IaoN=3A-<Y1Vj699(*&f#Tv-$VTBWXOHEkF%jIwMkyTGgt$kKdU-
z+*wyOIx~+=T+Sk<|LT!3&9%dhHu+PyxY>auR=j;#fA-Dg6?q$P2UMr}*T%6nm0gxW
zXDiu;JM{K72Jg$$6#iDizoZ*}_DaQW#rPEHr&2bV#5tFN&SIz=86Dpag|yhdH8u2W
zd$Jk_!O5^sCoexb`6dd7m+7RcpRkE0>mGq~NDq`<1D8K1AE<t0*fVjwE6mlLJ}$k`
zHR$Ht{cKP`VJ!cE>^~(A77YuD&MfST>VJ53=Lm2(5_T3nP38<kEN&4N05?X-f4#p)
z+cwg^V|;HI^L*t<@?bZ1&&YuOpIS{6-yVyod;cYiYo4+xsp`VndiLV=28~u+j2u^C
zqygTGAB<@H1lOwUc;0Ep`M&oH9Sc7yi_cl#SHv=S>CQzdW6i)q;0uAaY@NB}rbYE^
zz4L6(GNCA~9abfMARD8%NUQq?BOE;|xP^F8eGp2uYUeRu3AvV_M>AG};7f1Ltklf-
zbfj)efmm{6PL$KeWq|j{0eZgQ^r59@RS$bvB*CMSB5gRVmk0C3FOHBG{7%4MkvnN<
zT1fjMB*8y^3T%j{cL2JE>T|H?C%qET)@5ARKZU=72)HCT6M9F3iLH3<t+2M(ad3`k
zBES+cSL8;=lf^CmaV#c#6xKC2lskXy<Pp{!_Eh~F7ZY{Xg35!N77U<LSk~pDXcz}Z
z8udRa@9-A`11I9zO+7#r!^rrnFZ)yYY*qx?eJ(5OYy_fBD?Zq8h%OW@J}nua)&WW9
z;Kw4rG{WQaHh4&2RBulSE6*K_OyubLtY!0e>9X*TMX}QV9x-Nfo;>K^lo=OuOF3T}
zeLp&ul5;L6r0H|<i0S9a@1Vi|j$-R<?uR}iAGjpAy5o9PQSMK6dxYt>T2-Dn4>jZ_
z`$_G5bkELM@>EokyQsJC<Nq|vRej$-UTq@EXIX9_L`5`*`DD225G@K#GnoJPfCaW+
z?tb8XaB$Tb4rvIXWnMLt4`{+BTReP&b=BN=E1><sVWt-KbMV`I#o{!KSLdZzqNkcC
z_%N8dt8MX%G~@7RVN|jxS477^TmbZ23h0&R36|F*QDMpVmzZmTFN`s%{iIs3%`6Ts
zrg#F7x~=*NdRRdWZCHjJ_uSVPvHmbi7NI-2sNRA6JSj>QLp635TW?$U^bD%@_({8_
zl9g4DBh&;0M^BW)QWg+U+^ZY=Uz<mO+*Z1#l&hbBl*oMh{p~29>7<GSl;zw4GEDJX
zQUa&p;EQcF&*3)#?@0a%l3mOCy!Q5!fF~?V*o~dHLW#RV4Ao+RRyw**OT`j3<VKp`
zKz!m^pv+p`(5M4Y+a>SP^5f&?qN{dWwnuq2uV}P<|Lh)7t8f-wEu%DUwj_@3ulHWx
zk%#J-7(=UcOaD8?t5&{Pg}E>dH@YNCN02CkP42ba>)Xv8*l8oyr;8paZtMS?^tR2f
z*!08mJok;36dGNk@om8<WX|-`ZC9~|DFi^wm70k44pq4Scaa8Ks`fnPYeHnT^$D(|
zwkseKm-5#pt}RVPr=JeA?7yA2eud^!QfwrX={8?2k=SWz6q8)DB0refNlk(xKG-4a
zp`EXsjhnR`OgaWD?=;btFrMfMzEs;@flZwVW))}hsJVgeDw+-NtvaE1Fv`hk=D)rr
zK<5v>Y0s9tmabLIa1$?Kz;=%kf3gl_#p{WTrLZjASbo5nFfXTM-7VmFAmKg9U#)qZ
z>v-V99xs4$mTjs>F%Sy3b?)1Z@t->zOFe5qZ}@0(`($l*vZ8GJKoAx!_Vsv2AVzd5
zsxg~^W`t5aypdZR67Ol_KJs2Yc66G7MrnwzG0QM3T&Oi}JS@HHIwvJWuCb;59D2QD
zd!=*y%$?a5<zdzRqBczOvs2RkUbd)fcpa;wFw!AFbm^4_6bl12B<;puB{3xgT>g(r
z#g7b18-3KSW|!3H_zn}7{=%+KCWv5K$=|U8`KlVQwpa1a)q1?|@!?)CcfStGGQ&He
zStxU7*&i%i=jdoN^b({2x#yN@s=CBUFSNKDm*~DFU^XtOpUY?_GTQl?PR+Wcan^TV
zCo6v-jFC<7H8{fzu~37nc;2gS3c|F#9i(vik$GCXXB=J^Me5Gh?t{A{^4q}lXYZQ#
z-H3SSePKAng?LvjoFukgTK7c)XpvU(h!xt9c&H-QmGe(d2|de#f$hPoYJe%9WSufF
zkXkoYS-m|b`|0oL4GO18&tKd<{F#JYLOC%VZrchMZ>sLhNj>@4p;-%JlW7^6{R`2N
zX9_?ok*_@n$b>q{^De@1=cg|!udr(FLTTG;RA$z+=0Kot;OQpEYVqlywhuP&2R9On
zcMBy4F?!<>7ncU(5Z3Ft;Dz;{<uxgR25dmp+AxOMZd|^pG!S+F^>)lI9>rsyKraC4
zPT78vcQ2imn_eQ|nfIx^o&3p?F2Tp&)|8+it0##`h$L8s&)jQwMa&jC%iPgC_}7Sc
zG=hmkZTeEG_5d)sYb<ITn#!_6Jsi}pxaff59X%bPJBEga`WyLGXt;v#lzl1w;$|0^
zlwc=4QFe4tK&dISMAE+w9Nz0T{-(5fCT5vx_<vOHQ9BYL_;nrm?!a3KLc#tgvX>bK
zsZG*ZJ2j~_{hz#fbo$L5d%vm;7oPEGvpEW*474OA>2AqZ`zERx=k{E*sy>U$a8Gk3
z@hSd#SlQH!c&)`}wDV3ZlCUCbUHWI*S5P~~(53Z`qa~51&x&=#9e=$gq*xR^HQ<xJ
zsb7NSus|eE+r_zx!As4!XRhaLzl`r1X8a)e{=(KT4M_AvJb&6$>Z0v?T;)5N4Q$UE
zz4+k1Lb-{}x?~dRZ{_uwZ(y3ic39<qDA918rWVx64i31;Zv+eGI%hdJiZ(OwrB0YR
z%FT8?sq|bGwD;W~^kcb2a9&|fHN3a_UQ_XNj^PJxT3r!th$&@xB*N!r|2&>tQoT4N
z6A@wig<nYW10B0e+72#}73?#{{iHZt&jx#7u_nJm-xT(6Y<|qj4CG#(h07{-J>k7N
z9FbEf<}~UdIGVq)X!|?v^l&+S0(MBv5EdxYpaX%&opP6(A;U*P3KW}jPG3Ad=Lcw#
zkqP@HEF<jaO|~S)8IX<)v=lEUgy9ZsLJBTKkK(|p(TauvMhxTuEMNV@+0U4^*Q=Ye
zis$jgMsiimwX(F!%`aS^2skMB6AoN%es3ifPQirQVi(De#FY?p*DB)3Kq(NL^G(fY
z3dF32ul^&Wc!!2Wxeb!1)lYG71qEB^qfXQbj#Z|9-mkSy$h;ZPzC5g>OZuAy*>h_*
zR#5v&^7}mQg|(pP(_?SwS|Gm5JXvt%9<9Fc&W)(4g|YWNd@tsk*o3+;><j5)ZYB6^
z$82luEXkO1qbW@9Ia?XF3MD_id3>x}6yjNE`ewX^l@3Jj+m?kV+tD`(hFmurLCrEZ
z0Yk!+e?BvMef`PnwU>I_ZJNa63&<E^?VngT?t-hD4A;j=vx>FB5rZgR=spaVbpV~&
zYHC({MvG9Jm>=!iKl?>cOa`9{TBaZB;zkcF0Ypxf>>$WAc~wW6toA>uMc)r?)=mWw
z_tG@XF_^#HSXeOnV@_uRDl~a_C_GO~CqQA|N_wr?m^h)IJ`kdmcP#%saRNyT<E3ok
z5@T*pxqDd2tx=?WMIzimiscAjmurtmqzGfHR2Yr0v$gM^ZDpTdZv)Pr&_CxGZMLO6
z|4A9+46NY*#T!a-a4as2djcZ^J6M2!Pm~#f8AeP8pJp3ZMuhXhjY!Er`eN%+E=g39
zovJ|;k8}2UWqtV<_6)uNJL_{#*{<UYu0THq(1%<}Z9+;RSX{mlYc||tT@yf8*A!J;
zqZ70ZYxIp8_qnQ2BY8;UeX`0Dp=qQ{@e!bEU`&RmtVVn$VFY&wW9|Jq2?)x^Am(iT
zJw)Rzo=+D)-^~l}o)}}$>&jY>as-rnNMl|N@%K~uYCrwVW$=lJi_S`BZ#5c@5f;jg
zigEg6Rav|IGrUmyeEgbMrMo`*F>s-|Cwx(s7r$gT#2^__(5gL<xx1wA+_<RW1x-Rh
zh<mE7#FTQAc@kf~<=Epsmrgg5F3WO1SbPhOjZ0RrE`4K2yzz{57A9NOg{$#AQkY>Q
zs)wi2uZ6wkw(}DXv9^y)akZ!?68P1W4>rR8E?{0qb#+q2W7U^lVTOBiPFst_x|V-E
zrwqQUW#|l0sc}FN<OBEuh4N&H`ua2+BLL*p9WeM7<7eb=w|=Xg2{OIZi;*)w*uq5l
zs;IW>9@kA?>%ldtslh4Mn|`Y~Lt_p9G8_3RUIqc^`JVVsK1{EN%ik5|lYq;KycGsn
z1r$_iF;lY&82775G)y-ylIerzvwRlSX8imbAFcJf;Mb9SOL$>iE$QZ1yV$E8_q^`l
zW2S%mo_9IwpFMZjw21f)HsuM6Y%V%GTshTa$hy|V>V{Yk(%UuPgdI|*w=+2FHa=M3
zMDVK`6iP2a`>`hOZHC%%+Yhv6S8g3Rq43a@#_yy*rbKayvkedCNmbWyVN{|?)NnPU
zmp~g5^MDnb#Maru!xh%eMdz9LEKDAh?s8gvo!;iI<o27-q00qn?*Jw}0qn=vq#F(~
zEuXtyVSy%;u3=)E^9}6*4R6L|wGExp^O|g4JQC6xns8?%%)o_c>0*(^6K;}kCfjzr
zBWn7VWA+n<*e+vtPnf%Vj(3R!+T^-~i|WRW+;jzq%a`5C`I$ayGAs|B!%twX#A?h`
z^nDkt#Mq0C;IsgCpzCDz_JbPD<*HXQ&{f%^-9j(h2zv8~=jnFROLb+e8kZIS`H8+A
zqRFIEG_$bl1S}Q0v=YQ}^BBT?p;)y^0IgnhRR%ZXE(q@Ew<ba%(TcaXdsJx(MPLOU
zW?VyJzel?_4lzy*a#%c27MeZ6+--XccPUkpj{v6VnTJblos!p{m)L3dZct$NviM91
zD{PHba=Py;pU0S<W5fUbt-3JF-StMYO$JujTPq*f>ugPOBc+suYsvz!j*I=(Lwuxb
z_`egT0>&Z7pgnLMxP{y_Tk*jJCv0V_IH%DnU$47WQ{)~jGp)FE$gRGS&gR%|WghDe
ztiirjt(Hm2TZ!xyOi7m^$s<1R^_=o<!(-hKUEPJ<K}jb0GKQy7Q~ErzOAXR~>0Q)q
z?^f$p`Wx^n^uJ(l?FZP}Q`b?FR=<YFfn6C=+@r5cGn)MFB<cZk8;^X*=acQ%L8!FK
zuB>)1iTs!)!Bb~hhG^Xt?w9EmI<mfabjvV!m-PIWS^Kfo`!)BpF`|AE*H8Bm3f7M+
zTjgpGrtRz=2vRAsCU)6|(SCe+d)a6^2aHz<mH-*KlGsHiP<#&tQ()~&9DS;{O@v1Z
zMZ|>rhJLtuL@o6ML4vZwi(;pjTlx<qT@<6JB%`Z}%$DitExqd>q`RV)_3mY1Tw*W@
zbxtQPdg|$eb~+U3my~j}WKPeWg(qe}^S)G=gP4?e2`Z*7y-A0^o8Ed$C#&11UKO5<
z_}(xg**AX5qW{rvDvX*@KLqkb?tVfYIOLTMb$g~nr!Q<bH`Y?*iL+h5mTWtrgGt;2
z6Wd2()$nwfNBr&M>*0vZnIp!qYEhJOdFkd7MOhIL$<or4peB8I%e)Y8#8~NGXWvr%
z!C36AHJ%W#KNo9bhl=mzM=L2PtAm}baY(X#bKvHVJ9{>B@l71W2}rj?rQKtQcbXMh
zt$Sp7Oe{Dn;!6RXbFnalqH1l76;V(mwum_c>_c|WJ+K%OCFi$tJ%8Kvj_m-`Wb}A@
z^5H<gu|lWa1?P!AyYQwo3}tE$abH%-`PdpU3Z^i!1{I3^{#arBGU!9o2!Hp8Q%6g9
zom!wd6!Ij81G*ZXdyAzKXrskv*!}WlWlvSN>$P7;aT}Pw=<@Vq3&tmrXE-c-f+Q<G
z=(B|0dtiLiGp{_RvUrK-;GcxzKa?S|66EnzKVL$IXZcQeR(hk)8n;`@6x29uMioWf
zBxjhB<bFjOIjD6I9rGR(JN*=zfJX6TlG?d24PA-H!y+oTp6L5+B|dp`5J>X!fy@tg
zu51-PUu2oUoQ%X8irsSEm2TG_%?ZR4m|^>YDBJ8<(+_gP+_rL6_rz5NM`d1V<Eo4V
zt}oB*{o@uL;;z616+FEnEjY*8W<`9jdn-Sc5XPCj<stdSzbf=9k<G{d#e;e8NQq<G
zRg^Tk`R~`(QwLLFNNb4bxYWv4q#-eV@R+|W>NSh2$4!0C8vF{Jq?8MRCt3d49Pwu~
zBl*BOMyb+=1$G4ST{!-1y4|e&@rIyHAA!{g)Q8U}KHAl=A$-Mfbgr;mzl|KQ3Mp?`
zOBn(mBqU^y$6!8&Z6$@n{7~pic=Ho8NvkF<R@(Tk*qd5(-rVHv(eckD0=yKMURiW2
z^`D>B)fMDT?E5x?MiMgi&%d3cXFugNknqM&-Cw~WOgq(5E?J<e|FTo%e+H-STwVO2
zC0$I-B|kp4?E|yB<Zjs|<uDoq##(?w&-H2TkCMHEGrh#hnxj<oQs<Q&w#E{b56Eld
zYWkMC3>0NL++g3x&D#pgy6xjyLrQtkJEJ0nk5)tp6Ug3a-5zcZ0WZ!(_f-X$>T4^o
zyDQJ7hVIEH*KN;0TmWBE`20_JP5O{~<z@WibyQ9VhaNpQxkMCAr9_Z9l48ZG$4ZN@
zJ|x|iG239^q+YQMt6xd!554h<N&xr4UB+%jz3DD-{N-6G0m~{zX~RPE$n+ztze!CS
z^F}G+{U7Vu3(llMWIfnh$3wPP6pDvWbt;TlZxHpf(CJZA;}A1dTvLVgPFAQJGNvuf
z^fSQ+_(T((fnK%MeO>-)Kf$-PN_*5nh?nFRud6vYO=Ib>%c*Ky1FQY?sU^ckKOiVT
zp*Oamj+Z+?R$tgc*HtIh!$t?Xl^r-*{`B<dG=h|$16$MY?&?hY!{1)GF^8MgE~j_C
z`Rj%)z*6WgiyU*+d-H~lw$`qc!<Sz-J~u1=^lzYx%hX5;mjLp&Yx2EcUPqKt@+w!s
zzzEv}Jc5#|W_bx80BXMib>LF^8{5#S)p%>dV08TallqoD8;?ziHTlKb#&Jo(_9u*K
zcunqCC*}Sxp89JwS>)+VDG|81xY!a(vxhG=S9+nQ-0{5?(?NbwRowyiZ$GA{8~vvG
z(1~^LE6RC#Pi59oV%*y0&pDpEq^e23J^@9gi(+_M0Urc&$saWvJCzSGzWaW(Gy2N*
zrV^YE9JgNu$`0`0yYQ{xSmcL3|57*BSy4Xg%Q<M9AXU<W^*j2P`_OPxLr8OmYCo~G
zBH70qG0k5S#-W|jPc$!XcIDYrye##yhLs`RGY#hV*AW#Xf2#nbTdt3u_eH&t`p16B
zakX;<61zB#<Bbx0D>ay+kwD@QuS}Jrq`zkl&1-o7<3ZMMycbMOiSq~Sh`bw9C~xaN
zh8F^`3mzsjk7C^i)zR;scK(9@e!*{uWXI`qd>ZI*bR>k~p|Sr7wfxdx@Pp-NKCWgs
zunNxwoZ(Wm9Oia&^!aO)xGIhU(F?-*!W|LLH9vT6H+nleN(y&aO0&SVzT>Pf!i+qp
zjd>?UFW#Lu=~IxB`l2W>8mw!Sd&=nbs-ejUUTfWuHX22*{qow@RNvE{F>Eb!Al^$m
z%r^)~xE;7A=i`0?WvT=i9&3;Ig~ApGddq6O+#7k^PL&=s(cgH_lg?js-ffw%P!ex>
z&*W6zPaK%w>nlA<1#({^Df3)zvOs)<0-8Ur2xi?}mNaGkK9qEwo5fZPmqFh)3yY~{
zil;_?k$F7G*rtACr|aF&f9UWRXZN@khAO$it%(w(1d!P#&EEXXqr8f7RdY!+NoA41
z&f0jW(w6d~Cq$w=hmJzD6#^Q8T6&lIkFmJ)&a9$qr=x|=J<%EBfJFpm<I3LmYdGOh
zH&vTU%FR)6!!?xAcmm-js7$IuC0Ln%>bWz!Ionm~4P|wtm)vw>E1RET&o7uNQF)=m
zI69!KuM+P9JNbwAWxU!*wQWze?VrL3eT?2|@dC&L5|Rh2C>f3OP9BuwtKz3yu+nG#
zPbBKfEr`Ek<aroRNGr1KZq6P?_SN~Voc=<KC}Av$XQ;qSNJ1p9VdUFnovlXz(ua4j
zDNgo_p_mByL(~f{C%wP}Nv_l+NKdK9okfNQ8T8N3Trf!~DWRse)Kz3sLLP8~jd&(}
za`SDYsD81r)XY7}cT##s{BUI^y-kOY*zz2xQfT?+2+7ts^frOT7M{|iEG%qo_^P8d
z|11GSMS$N^F;?8MH4WJv;2(d_X1C&<-Yna2@%~hC%d;PB$%Hp~@2&V1i4O2`d*PJ&
z-&}^zr<Ka51DfoohF^Rzj`s(e;b;+Hk_cQCS-RR~>{qGb1SX+F&siFqV;n`!H8O9h
zJG~Sucokyyn2zJ=iV^w+;cE>p-iLgBZf#<!ER77;Ki*mDW+|tx@>)V+w-Gq6u3v=-
z0cCpuiWy-K#|JWt)<ugs3Je2{{bW;>RxeUwDNm<W&Bt)%PlZ4E8P+EV&&;qQ1jB1K
z6D^~e0poI5Of!xvrHJmhA1y8vY8umOIXhj#xj(~jag94*Cipekj-7Nb)atW>#az;>
zwlLioiX$Z;iuOgBPk>Wdml)%JktP>w?uvH=lf{S*8Q6fE?&*#F`;68xT8+aNWlA%3
z-cknuU0I>vmc+YF4|+aHsrIWk3JHVHu(uCZeY9&x-JqJc|Dzhh4i0x!Vr)AtViA4v
zu1q!4!&9Sa%`z{WB&Z^no2f&Eo;nV5S?7s8ZE7k+=59YH#8>%ZxT7F(ECd&G@iZyK
z)d&}$G8v1w6Zr(cirgLw;A>^I9rExc1{j_*9?_J~L8AK3y%;29O`tDfbj1?wtv$Dw
z$te3}JLnhupgE6zR8#LkoHZCQ!3L%k;<>Phy&G^?OUVj0k`)A<m=KR2=H?2?$^AVJ
zkQ{5o8r|kF8A@ix#PH4VW_~+6VqLY-@wP_~oaREJ0JNf{4b3slWo91JQVp(A7K<BT
zue&0-K~1Bv2)v4Ig0mBEPUxslu5pe?GHZOX;af>Sqo@Sx>|3b+0Gqz*foJ}!nGsh0
zv4+x*?K7B&Z!hL=@0Tk8`~^z$wg<`<x*7&eSCzM0@H|4u`ur_3MHxLEmU<~ggpCKS
z?akQoH|`mZ44tIh9T^+3_P485LjWVjL|peETor<)yEJHwb&tx%+-h$B^hPgS@@e9M
z_V?c99{EOOkeKyV#rn%NNf*xhQRzT6mj+<3Ua0K9wu1|2gzLj}PydlkEkaCiPCUr1
zV`@uSAbv%2W8Cfpguc6Gk3tkA^1n0pD0JaGttOv?29Gj4N56oJQf_c1qu{=;Afn)C
z*6aO_%8wp-Y4MS^6=alAM~@4yL}^u3dVH?Wd#cLhEV-`0t^l#rM{r^BUAp@!JwAdh
zGr`AU{u$li##jtoPTuML8l?!u?||hBfG*H<I;~r{X|=T{`j|O_D3FAm@a7XazA|LA
z1TRM#eXhaA6HK6}OR$U0IbrQ-raqAYt2Rt(*gSPEc*D)zdx3Mj?{*5W;#M2uu-om@
z_kzuR>b=MiM(f6gV4g6-18>~2qrKt5uQ76i_L{A*Sk}AL$NvvdDDNPBjBRwebU^s_
zRjh8Z?B5fq`R|X*2wknbs-}Cw5v?;WiS8v~t#oKBoiC>>xjE7!t#^1LKlQn^S$+MS
zdTN}tJoIp73;WKUF~%i><bf*ak1yYpQ#CW#MC3aU@XEh#<oq;#+7k@>$3rmUyKlcD
zi%m5W@{|<xTHr{YmR4JWf=q6dIlU*96WR&_&JkzO&CkC9(e2%_GWKCbMw`0sTU75w
z7MJDVZ!HL%A1gf-r^rix>gFdPgpI<fEO0#Ybo1(CyTO_<hTYI*wBPNAYdsEZ(^p_|
zq`Zkvke@W+JX>q@U8E0tqnxWzgHH^_zFKgN&scaV+Mjb^pn4BJ#PsR&;=#<Hdt*r5
z*E<oqC>ufN%ci?cr8)<1+(t(wivqmbeLmQ_TkSrcu0uOE+5XA9+xWQ97tF;-E$dV;
zMpzn_G0^(d`x?{~z0j5l^r$14UXL<PR+|IU>pA6k&|yFdf;mak#wyvRR5Au4)$%TA
z>oe`|z(Z`^ze&c5)0=xN012QWAe$v2>3s^yVAyz+UMe2*XM@M#Ivc+EKdQJehXJO7
zv-)3T2p1jktj5n^K<>fVM(S@}>n1&c0r7rLJ*t`R-=}PA4feEC)8x&UP0g+TokB76
zQrv2CAZ7I@uQQq_Gq{VmhIUf7_Cx>k&W4W!@bavgTA*%oILeLTWfJi>dmN<%-^sa2
zh1x#i?&7GenX+G;^x<2YcR$)fO>cRZyK6@eNnj)4>5t|v7IdB}4Q=y=HgLYH*6=v{
zEhQ;5v?%RH^gmm~33H3~BK`)Gmw1RrIYVtk+xN$Aaouy?B-#Si2bn62R+S=o>R!3;
z2`s!c)d@4=Xd1Zv<giO3$L2p4-32?u24tiCot-A)sS8O$yAl^mcOaVb>b}aL7IQIC
z{*M|kh4ttDplp6P$D*&cwA6Wsn%@z>DW{)k!S^aF(GmCDZ)4D`60Ed$8GdI+iR<q3
z2UT(gqyTY)Z#1D|_sx>QW=an@TwK$3Q-4}zYU4*#Hy<raenqW8G@M*==rl-OZ82xJ
zB6E6VWx(z=7itT~whJgM4f0b1P=&Dze`sxR<Wz8(YjF{g`pxQs`IoQVkEA;pK|wxz
zE&|IhE}YT8(jZC0<2bAITYj+US_<RE)T<W<=ET`++OVO=nb+lg+(8}QoUhPx%$Bn7
z_Uhxiw}-Sc+OMd2zDrw;|C=OH?IlX%;K{gUbjgh^RGtgB^{*N&^B)G3Qp4%io+19t
zKFbwCI(db7aP%(1`k!$Aq-o7djsyNmW2oxAb*%EB!7kzC+1)tuv+~M2Ww5ty2HLi{
zs3g_nQdML5z#$$M?jA|gMB*ZNF;}(nR?BxAqt9`*-w@$XgHt6!+M3&v6QId9ILHed
zwjIBf0P+4LI9KZW(dtE7sr63oc9b=yEAKi%m$K4s(Qbi4CyLqGQd1NcG3YDFb*X=F
z8efCLIR2ChIFyBf9)Lz9N=>pX`ZGFpsUQiV@e6_9Zx>hP-g;ENw4~+X5uU;;)M~xi
zZap)3-Hi!zAMf(wi$CJCqrQPPbZHa1PY#xryiPaQ#&m_TJ}~AxUNV>-ttOgrtg1T)
z>WsO-DAa5b%qR==penZ7s5(4x6B|rwi(H!FFX$|KefTIqQdju4>WK@3uR*k~#Dmgg
zcJ(dNX8N9ziH#w;BT*%ofOWby10bB;7Wi?Cx67R`EOb>{Ak3XVou>znOgqBy9>Q&e
z^&e-`8X#@lIK-T@)ts%_gN-E2?oBVa78`%75}Gs`!Tk@h5Zaz;k5b5^5IEZyy17en
z?+(<QCBsuPV_Gk#C3tA<_dWkxb}CO*-qDB6VHkhZm%|p-rnyM329K-c8ZdN@X_;2#
zWhE<i$SNb?1=GvWV>=^A)4pE9wL$r#)Vz*I;bQi<)lja$4-VXE+JlG0cBMrDhKSda
zEI;=5=MNM5bo@UOq4z-Lm~^SgmCGQ4-6iJbzRCs9uHvS(IZ4;WSpG=-;3Vt5P9_z~
zc6WG~QR4kfa0cMSZZEy3?8~_?Iu)^jiL#zXH(X6m`{>bk!)nHA+Hd9wp3DEN2*xCt
z&&<nt!pO?Ll7}}Ot%tw}PQ$8xjVCzE1WK|-SgE<-v-AI==Ut5)e(C#F+Sv~NXA!u>
zY_+(Z?&A+mRc0FnQeR|{oVYa~&CX2yv*^>Jl(>0curci=+3`sW;tS#a8HsDGXM)#`
zBmSaId_$?~bwinc36O#0rQ&fYpCLIdHx4Ap3-*LpO(Zbu;?UOHCKH;C4OZ$WIsX~6
z{*F34_!n8A0fWh3MkKYi5V3gckFFAYi6fU~FwP61Y~Se&S5D0RynxAN@>qi|`Sco~
zF@L;l>!}n<$&q_J8E|6=4Dhhh?jl3MV~e1T)<LuO<~)8B=&Q>N20zC;Y0{NoG?3Xa
zM3+7SYNqCUvFFOoXgkcvQ4l#2aC9gAn|XOYfANo#WkC<$x0|qI<}#DJ54F8rBsog$
z;%9RetMwfo^3)c(LldWM-~ZLO%^zrGZZ}E&2+Z{Ve)0hlLo0Sagz<^g&bR%`Tq(iA
zdkUNSpqHOp?<vm2-PU5{G%eIKQD<0Mb})h@oLM_Yl=_SL#{sIC#tYiNj5w?B?tp1E
zs_e`9mNk!iRP12Gcsjgrst)80j|t;bP7%*_|E|aqRz0VR#YvG|k8Sv$V%kfLXB7|I
zdBWv{>Hy>Y%bvuo9SM8d{Pj;}2bc!AiNupHlK_vtM|t%RI6@8Wu2)bx@A=&s@;58H
zG-hzOv5JP3>s|As1tdOn>7<P%=UnxNUs1&0kf7hf2jNFib@M9dK^ukKSmmSlh1{En
zL&8vGeGjWcOi+iy=pbX={O_kzurBChH;gjZJLdR!4;ha_%dz<s#;I`^M%S<6nVF+P
zW|wGAA_bRD&*HMet;JgY@PAYTldPUEJvyQeFCRDL9c*PTUEu$uD#Ojuxl|r9zB2!h
zq4RKOtNp{cU5b|2qlzT<o>i)~A`#S<G_*)!l-Tn{i=s9OiB)PuZM9>z)ZRs_C1{P%
zVN~>`e%ii2|G~MgbIx;~?{n_^^C8O}urCYc&a6MYM|u%Z{{E$Q!RI#U{!ZKa%!!!>
z1T4){FFJgUpS?{&q@1B7nViOLs(&}Ip!+F@wDou2YrVIITlx#B8tmx6g*KJ<Zp`kE
zx_U3c#h+Hjd^wJ{yc;(tP&`@9+T&P2gXQ&i<N-sbYlsYTNv#)>faq8k_<de;A0^NF
z93KQ)Fp`k6I^uZb6j~&BKb%(zK{M77{py`Fclp+DcKeAa-pL_9njM;JpC6wv2}FGI
zPBW3rOBkfF`%F~3OmP$YmwQR@-gNIJBR~3-g0M}+oooELqT^*R3z!d|dMhw5-Iwrn
zDUfVy%TFpS_jswK9$dGr$%gw(WKsFbpHn9k&;Sq2cdD<M6C!dEig$YgTiP#*7x?9P
zyX&&EX)Z6W`8TGGNEb*;c-8r2D)&Cr2`A-z98TTQ(yU#fGi<0~L-0E|+h@eoR55~U
z`yS}r@qN3qM$}*H@qM?h7~|zUKC$jFdZm6zI`g}e33s<|GSH;?ySjU&76bm+WM@E<
z(Xpb;S9eZMMiDXl;Djjs32dC{QkxP7ixa*_TFXj_AOP}k$oP+ef0`!zq{E<<iVrGN
zsiu%Z-@WweY9{R6nqJgu<*a2k^}k4cJWz4T6(gxsCE7M)K+NFboNrg?Yr^x~eYUHg
zpv?7C8ss$Odzk<&*v|MKD!Sq(ql7`vP*?A<(pLW5vDXDi&bsZn_IsOJi1EaE#|kfl
zlk$1zrOSg4M|zReuS-5P)Vt?j@0;aN<0{xBka(!VLUS0{p|zsjG=@qIKyF+!Jawfc
z_}T+qMt@Y?8kufUTr~!JCv4u~7+Y=}F3vGONwP^Qx!<2{v8eR3kJ|7S^=6@vXR<=5
zBjFnTj4;XpMOu9*tp}M2bRN(%a>lOO2Jo#ePrRsVI9WQijeWkC?Ki=1L90}7tR#Wy
z6;Buxg~^^1HXw*D5Vjrla&wVPfIRLPp270Fr`Rw$Mj!<vlJClfCNg;FIk+f}``OKy
zvfYqsNke#K9wKAP1RcEXgq_*DROaiiHHqG!g9fysrhJvMgF?0^_-#4s^98@(G~u&Y
z58W?$WmzoDP<Qz-g#PRT)FdU?JQIWNY&Sm!3mL;xNZ7n7MRh!Xg=}6-EnFeybJ9S@
z^-=?)0PR2f6FslnF+>&F9=v!3YD9lRqrC>?>79`*=$d7tK|>eMX7288b%?r-Hfpq|
zM!EYxnIWv-$ZTUWje;Wjf`2zZ*WztO(<a$-I$&N}+`LJp>|6N{@7NuHb>^qbpm80e
z8{&_BVp|Sur6PQ+r9*}3zJmKTW4GSiIT|^MA}VicoF!f5$?saXwbNDKy7F}Lj^o&z
z?U$F_Mc_R=#6G%esJP|zgfgJ(qQtY7>KrE7dCm2Rf>!$u>V9s$SQ_|NWKY^x|0w}!
zcjHAIjNb$L?9zqD(VR)1Cyq^*o#2h$`8yVY)1GPUfnM}M?+wq1q6~Q2=fwJll%7lm
z4?~<>hy2I@24jDpo30lu2V4^zcQS>FJq26^31XRUjK?krk1lU#DC~PG?7)EXEfQ8P
zE`z=&6TmDKCnjwgCLE}0i&Yf2Z_dAxc+X;^!iOoRMwr#;+Kj~PM$Q9kFHutcNxD9}
zKaar&T}|pRL4Vws(4=CU8{%%#b^s2aet`1PUAcWyTJb7IR{{eZRx?vM>Eh;!mrcy6
z*qQ)jB-lan0NeHBploZDqVtaxmr;@*exh+MKwq-dl(bFVk2o_0)KfR@UTCZGiA#v;
zr;9wWT?{B+FzClM?Kd_qtYA8_P-V{l^gWdJCY#%3)bKGu3z~04jV2uJ?TIcNa{BUn
zu6&us?UQXhv*b?{lamNr(~kIrdJ%yt-uwWK{-;m-j95-)swpRtKDH`OHuF@7Ba0us
zf!u};dz-^ApK_pcU>2D4^QQLSLbm*Xu#?;WQi`Ij#Hduug>nAOxg8xEf+UR`j<P?_
zR_got?=@c1md!iuSRE^sS^n5skp~(unx?Q#91~MRMw0;Ak>}<HM$9TR!iug9M~2<H
zsUMBBTVD_M>_I=gviP@!m_X!EVpNwh^8e;os7tvJ){}M~tH9rO{uor=&IUHv@#Z;#
zR2G1DRek-h1Bv4+&W3tLphA9#X>AJy(r{;0j0VD5I|Qo*;os(91Ycpdb>6NT0pZP;
zRB07$j6<6HobAs5kM46!h%Y^v2nY~(+j0GiDltIeN5d@0=4eC`E8#JElrVy3XuhpB
zjd6KuU&^`I1D&CD4Bg$P!UY<eeq9(NUI{XpB$qh5+c6r6;gcH9Jd(eCnru5(A*XKh
zu*8{5Q_FlrXl8aCQf<%G)7U>=&-VeCT%|TOZt1*b_spAP&BRYH91_uLm5jjTH@_<^
zKXb*wGygqEuWG<^d`{3g*ViWVX*N_(-pKphdLW`7FIjJK$3~a6C8&l<g<oH`-@kuX
zXY`x>P1Gn7d%;^#AUSC$(kygNr2bKVi3^Jo=L}u?kKtkRB1UZ@Fd4C5(2aMHKQr`b
zjmfy2GaFQD8e$SN4(!p8>!3Ji>8I)tQ$K3#IZ5VN_WtM|_gK^Lwe{>5%?Q4K??Nlr
z8;!7BfGDYxG)>7K+Ah-#qPjN46fQsm1^DXNUwLU4(*6`T(q0+W(TQI-2C-7c+Qua(
z%_llc@lU-RG9PNa^9QFbLG2$Cy#<s#@}P9nG{hM`QJvim!8IdR=6TGi9&?uP`XrI(
zak=Yt)qwvgf9%MT&BC5HY*b)AwN1qn;WvBh^#Tf#=lWEuzrER9ij?ev-7`ap6eiU-
zB(fqkLNd$h6?IvyH$$?HEmN^?ag7I!+qN(INV);E_6VIL_MMC2t0i*uytXY~=4X6K
z#qbrv#d;9^$rYtcqZES{`s^kQriX;=#>D5Ja$(f#*X~UggNIwD^fWv@%{C5WlzFLt
z@Ioag_0V;>rjqF?P%*~TwWbb)Sx<R6T_GE4yJLFwc5GM_sMTdAfHoG*!^^?bg>X!$
zNhPliI!}FM_uH`86%nw82`mU8&>0mtPrK!u1KAJ^{u$4Wfj3#2gfQt31|=V)^=R+b
zZ39np@8%yrEj}M{t1xqO6^{9(EP>FugE*9IU%vIe!4B@tE1d-;Zt+ZXB^^KU7h3~H
ztTaJTPm&a!ZnwScC=M%H5s^*fHv<2mp1Clx+(&xF76W~NHV}4a)@C)Kd9AyNKFls_
z-*ovp`gku9MZw9Y=BaD=i+y25j;UiCuxZSuj{{iLZxt#qzYcA}0rPG`lbJao6gelP
zL0KJQZ>E(M+Bd2uyhRe^t>+XHGG1EWk$Nnw4%#S@&Eno;{kx0JI?%piA?U$`B^K-{
zJen(47c}-64jNJJor@4I*-Evh=C4WTUzRq5iNhsR+CY;|Fm~1^<uoJKA#<-z&d4h0
zwFW0sCLyOpErnDm`lo4Lr6^YC@Xgs5?EtyPm!jSq@q%J)*AISvSQm85*g!}`SWNCq
zibYB#J9K6Gn`JiS3U5=|JGux_<SgO+iZCDS6&L6-qvlR;X73LXIGZ9exN*zX^jkn>
z@0s$-;ok0P4PlDy&jin(&&MR!R-nlm+gtie)y>=NQ&rwyFAVQ%t`iYTJpF@KA2Ln|
z{1JDk;GAj4`*vwFqFuS6_tCm}4<dDKp=5;nxfQX!f_Gb?ZP?SMkf)~%Pn4un_!A)A
z`oXgW;*a_(zu$a>d%1p9=0o5ze@zRymNufmD$ItJR{O<Tz;K3@nvMQ+>u0^sj#2f;
z2{{=pC!SGVJtsf^h>xH^5lWYR++B;e9VEK9?7Ovq4B1f1>BUdHujzY4yCAWsC^(Tz
zm<W#dBbnChb+BW)S_x2K0acP|9mzDtZ%fQ8SaHItY+L1FFw;*Twz$>T;@tTuOGB=3
zVSkx(0JZA<R-*Usyvvxtz4=im1jfyQspea@h!wdDeq3{ADAiWFdGz~v>(>Sl3Dpe?
zd>jc2vsbjhnz@ZS$#)<G({_sTI|rLK`?HQ-+LV~@w@xlmxIyj|vBVX0m@X$*aY=Z4
zmx`S;r%Z`Je|>EIP`zQJJBXsQbdsN2Kr_)Yjq=nMGtI!~fpk2bnIv1K)JHw%LnHBf
ziKzih+RF)l)pyqna-UKXyayyg*@UHXJ}21&)jTX9^Mfkq11sNV^GOtss4$cu-Cvo^
zB=ETXB?%)Oo4$jVh7g}V`y}68N!BS!U-cF0Bz!wsz9)ty*!m|6QBu)XyW4IaIhB`;
znc1fT(&vU#YyOlJ-4e2iN49DI=|21UF>g5KgV7yET>$%?-t3~KePL$IGJXBaZ69>i
z%AbS<{jP=R@y#N56f>3Idn%vLob%>v;FZ%XCvb#mT^L(!#6O>13_`vduN`nT0>q#(
zRT-7-!s>s@RNnHy+eJ3wh#A7!I$$dgx|pk8U$N=37n<dV@^H#=ToV~f#$K9<ov$5w
z))3Sl$DMiAAvSz#uSflf`MU$G+*`3^IP!jU&56O~*IF8;o2zk&2MCQv8_v5wiyv$J
zjn#CZ(C@ML6#~_wf-A`1=p;q13=ta(IFE=Ubb@)x?;O#jtSz#@T5`A_VW9DG_G;cy
z$&4iCQgB`Uv)T)=vzr^Cs=rd5G#gqlA~6-619dwBU{^2mPM8}du)7oPoNe*8eRVJO
zg>IRLXF?z7nE&~RJu~uiOVHhT<h&Abq2y}q|9wP7Qt~gFQc*e*CRUe4coZ7$<fDO~
zB|#X0jKeuak0THKlY+h-f(&W?5EOIkb)JJfu}E!(BSSjLQnOxlnyL0Bc#Cq9D2Z4#
zZk;e_6l>?5y?ZcEP%1m)Y?Dr8xr7_2k+e@{$M(pxI7fIZFHcq^hPm^48u*{_#)FQC
zc8@H7cS^#VSWMsxm|z!FA(!U{nS?k=9Mws%7$0Xk6uGS_!1B=NuLFU)PQCbQ_Ju!k
zPulnt=;zSZqhe0%G<7WftkJn7iFJr7APlO8rbolJ`g=Q{?DJZ(uC}fWR|?Xh7P2#v
zN=tiORy%$vdPaGQ!lm?CPTR=im1(T6{JkSi1sLBzkeb?a4SuuKm;{%4nLP&M_V8fN
zR+1CMgk`oDSIIji4OxIoET!UEX9oC~GO87>iUpnbL?}l^^VcfxF?mr#0vjU{Yb{9d
zaY;JAhC+)aMh78hH}Y+euzBH4M_G5CXmsaVM-E1Zi1G5R?kE#HU}-T!vOAWN*t*le
z{RGeE&Nvg=qksATynvRgWD#I8I*OjA+49Xai`H5Xv3Wx_vln+aYeM(`SvQYb-2dkW
zNlzyg9XJQ_6K1{L#ZXcmL2?cpbpB!x#&T0PT^lZT;d^Vp`tWQ;I@0E4UgD)ct8baL
zQu8qx@}x^EhO^GOseS3%zSIB}KK|@5&y&B<ge7U9uSXV4p{-3#f9v?#?IrEO2Qtri
ztZJqLSIBlQV}7(lk1%E6WHaQH@wj<Rp*VOfW!){ex^$ZPn$`8en^v=x0X~M$nWO9)
z$#j@jOG9pL#{?s?P@vQ_o=9{R-G22cZ-i~+_0ZKT7gJjVKME(Pd>EuWoq^|Sjhhi|
z&g|3zXm);?E8ZC^@WA9+Jres8PH8o{k_*B~!)~<qcM_-ZmxyV#j`;WUCa4zUansIY
zDGlNGJ?!_F#aB&_o@R<}RFP;RM6lgHaOM)Du#2D%@T{>k_#!7<c?+DB_u~^ecgVo*
zHHjnI=N?q}E??Ig6WM(BSYTTr{OQ%M8ByMAsbrl%7j|^%diZcAPN})Rp|#hF8J87m
z^#Tn7#eOYjET~cO9gFtIMm7Gc`V$_T%k;naoC1NyQz&XbQUPd2EQ~u-vDqjjBb885
zCyIcHV@=b=Ij;MD*7rEj8a;J54fTkUi7bXTe=}TJ(>ZTq{&WUq<&edhu`289#ai*<
z)DCn-;<mKa`~YU9E^R+90y~<xaH*#&dE31z#q8$2^^4tJrXonGChf96>l9RHU;cf9
zze~S0YIQ=NI<9Ja9X*6on!rg@)j7ok0-m+MOeFz?nfc^n%T^bDws*XL;UP<~Rccx^
z_wSsS*MLb&QIqp&J?^>vx{&GciDzG29#=lR?HkZcHU4X9=K}lN>X+}BZh#x=!Rh(s
zhplk1?4FtJ$5bJAd)nGp1lJ?|MJH(<qX1YOT9dr0^@J6I^55zmG*tV>@N0?vcRK79
z>~Kf~Xd{zZ^|WLL<ae2hO3uh=N%ux9FZ<3O;7*att9PSM8g=9<NQlO#dFjBMWUxX5
zz$0h7J*}#*GvFD{t6M8GDpd5A9X$Q)rPIz`4FQt8WR~PqP>|>)*KZB9u|vd;>ju;i
zL!vJeb8RTk|AKWEX!}-i%VHu3W2C5y<scZJqdESmH`EPnw`;sKt;9$DCfaaXZL_95
z@-9=oBVqZ|DW&krD_=o)Y<af^aP;WVVb<klo>2IS9h{}e14&l%`S8h`7?YpDr?Ld4
z25DMTxYr!R<;6%Hk~jB?-ZvF{d7UVGK5iRf-4k+8%EM`nh;g9V%rY8UAXVFeXoW|C
zZ}X}nwx?c{$eJXZwRt6hNb7H5A+cI5{%JZ22fVtb<dGeMcpEF&G-ws~@c911p(+(h
zbu;*>iC7ivN&W`+^a|EZRv&MU+xxbhrF&Lnb@1z-nX2~uBXeAs$O4T*I+(oMO4itO
zz&hXy(O3Rs=)ODx=cY{_2Ad#mlF9=DNlxh!^{gX9C{E5n?qfxH-jvNS@DDUk4M|ls
zd{y;-&1O^G`-fU0jihKXc1(Wk$Vh)VVP(gO2+)~KcpHOXh1S?2@8r8tbxGZ)jjbr$
zT?Z0dGRpK^prbE3qjPUgOft$b?aT<1p??@AFEKO8+(6>B;ya|!KiI^-fyeqXmaelp
zV$>~wu1Q?BGm2e&QE8Rg|0d>8uk(Fv?P$*r`UY5)>N|dcZ=~Tp3V-i-G%z<iPvG;U
z)-S^B+aJ@YR@p<juM5FV`I^&sm%gc!^cOtp&`C%&$L<i{O+8!!G#uYGA+;%g=k@g!
zC!I{@n^E~2TLj<C@uT8I-l<d$-lu^Wyy^Hd_E_YuZs-rgO4jWkk1JPkMF_VdFnSim
z?6IG&)Zl0lQ|Fv44DzCME|NP@69=L=g75}d%9+uk&0i$k=2%MDMZ&QFz&!?m*WNd6
zr|7D35Td8BDQ{#`)A{2gt}0$Z+$@(=!iEc8Ht%^wTG#c$d-cH%RJcF=ueX`y$(*uc
z4*mCHnUoPLWWhDl8K3likg}MVZ@=2ro^^Zg*ZWd!IcWv{7C?)O&idn(*nKC#;aho$
zRuMtfqjZ=b7k)Us8+=9ve>9V)^Pjo2#|K_rlTr8hU%K%p?^mx2J5dJ-%T<iiCVM{;
zh5^I%<`i*udhwWm%N%Wa@Z<u67-fbtS@VaYWo(Sh^qkfs;-J?ioBw%7EVpHux>dDQ
zd96>1b@uvYd_&c0dnT_WBa?aZYMlurJMK-ziixCr1XmCUUqz*A*Qbz^os*Eck!ZE>
z$!0wVM*s_`aRQWp+tE{U44@eQxRfUQbov;agcv?D2Spd@c)1z8NKurot22z9*`xf&
z;7`(f1^<sh$G$i(_4nMGmBP4d5e&^57*ACiP&+%7f7{X=H}JzGEZy_WH9nO{EY*V1
zOn?>Rz}_&iA~1v*5WuCV5-C->j#`$^KtU2wRTU{7XURK8pyvkJd^0?XPdy6H-qdwC
zFCGfsvhXE$Wy6iXOaCdAAwZuNWu|Zf96yM#^bq(Het-TFiL!ri<@?PCDN=+R_va_v
zL5)C*jW}G(==cCj&b6j*FIz^p2*myW7{nTtD?hYf+;{`mvMlcd5iV=|IG@;k#0UKV
zuzp*2c&$@LK+phcg@?5B1;)AZ;yD)q76xwa?1HGb8Kn36zG;)1y2ML}Yj?S)Gg3u3
zb0QtXK|Jsv#_^=GB9WN0yc7@d5!DH;v^o@K>3B57Zo{<y_EW8?FF)sFj>f#ALju^7
zBR$qq?PL_Sz|N-?+F84PwruNdXNdEgW56&z6oW?#VM$+j(jffggR<D4;%Nd;t%!`Q
ztyo8U+z_y?^H*Lnl)cG~ciLqHT(w%0&&l%rdLj5-2$XmE!DQ+asDlP%`W0^Srtk#c
zguBv#DnK^j;2`vqdK>9M`!o-93fHlE?Pv<H-Av^#^e~uDPnDpRG$+_AS7j43U#zj_
zy(Q>!;}5e~yz_lpoYr=@b6Pc?%U=l95N{5>FG9tQl~dyB*LIit(!D>pv#I?^G4<G1
zb8F(V9i^sgnVMrmF+FLh+6Wkbi;y%FSw^ga{xFy-WQiic$5U*(>a-q)h(E%n0=<7y
zkfCc|kF|0NRKV~TC?Dy_s-Qyf&h39&O&#Bj3Lq!(9-hYsO_F`25VS$Xif4B=`<I1g
zGigV}o3^NC0kep(NK}MWU4IqrZ`BDB&DT1&J*Q|)7v8@8B?B4tvA%tRKBh0lI4cW&
zZ>4XYwj{^e-{j@}1og!8WO&1Vf?La0Hm{*GeFrigXd%1Co*4|Qj7ZE>IXL1x`!OQ_
zjO1*8lh9g|i3N;wI4;MuP<E^auOv<Xpsuga?0oHf$=wH7b(tLKN;F73dqP`@zYx#1
zFy!AjgL)raltuV)igyD$Z(mSrUYX_#u{xq{)bOy^)4-ZL=XXS|%T5*jS^3pA8d0=f
zTr(=UxUjy?S+eh|cyriEKVk1$LezL=Oe22h!i85dHSyh9NJy}g&3V`dP)$-Dd2`4M
z(M?*ljLI-3U*Ck-#`OX|pKE$2`1;oDOZIm?-dBut<s1PRL<6+K*T0?*42T#8Kb4F!
zbbndpGX1}*{$X9`@J^E8e++%ZcWdk(2GCwLesVTY4)TUi&dCoj=E1J4-OJvNyD6`Q
z{%3PXuE}vns8Q_9mY7>Bb#I$!dPa6~<hp-jYY0n1)oN{F4ek}2lC1oc=1XBqjyC1S
z^`=w@CdjTQckcP<m@PV>X4(5_*+<7PhHmQh=VyHqs@{adjJu<6cdFI2u3?b>KL)bO
z=)DjWl~41d`Sp)gq4>~PyA9>P<BKr9rbVDXLB`DS8121UvwF@a_Wf)AK3b=gGzvvW
zM;7UHV>>kAyBdX3fmH&FG2?9(C^u&}#{_9}TtrY9dGbTVW1o5Dm@bTOZy<e4X@0aT
zg>9`{kSd?=sK|EZElsq)gVw*c?Yxizez!{`K>eTfIkP4{yyuydt@`L|!8iz{Yb40*
zl(>?1uOUAd^j&+^j{F~kFVSg#lYpSTx%pxXI3hJOTqm$#ey7VujO$yjxj%mVB;N+^
zKXroUb)<MO`7^L`sz_(1*XlPjlcp}LLd<JE7nkLGto1(iH^o<{yO1e85HC^$X7=$$
zgEW#DPcoqO^5PMquM3LYXBzBQ!I>4vQ~^6{4(}o8cc4}dB!k*IVqRcS21)9C9u_U#
z7WwFZJ7e}lL8xDYS0*9I8v(`FM_K*te&NW1MSnKUeiHcgzVf?+#fi7uPwZ6Ym%-#5
z)6U{1mT&lSu`Ris&zKwTop+!-79G!hejJZ@{C4pnMFgGQ)#_{$2W=0Ox=Y_!E^)b5
z6O_~1oYCyBh`#&F`6Wy{FWlCrQM1P~KcsD%P*dbRjIYjr8n+2pb{-(ef^9!?lCHBH
zf{7BF2T|zkDIYgVr=c&lf=$gjruOo<3rB+cJsr2QNvYLEL+-D<Nb`sgP(JS-Oty<;
za)QaUwIozF4M$RhS9Oaxjp;RxB&83xx1KXvZSa`2|C8$z;Y63CB)lcpYK(~|seq@H
zQUqAYwHQ_Yawh}9`~Gs*R0L5{ES491YT0&f7VqRQASJ?-;5Jov8XG}V7YTK9s-592
zm=S;F&bB70t7`)VC4ZVu846KTlo?iUl};%TXBB^v3e4L1w5?{vN^GF`-n?W2^0?^3
zx4yZcgsG>3Khmx}6J!z3AsF#4n%b;Jk($9@kcP`FsXa9G;4x4U<d>r#+#At42{H5o
z>m$nmgBQh<fh9xJ^eCP*5f9hp+=mzu@|7*$0PYSwhS<qX`lhemMkmibD%oTfx++!R
zDH)77$W=)>*Dx-bt}7GwR)>ph$Erk1_vnjq0I=q1a`RXKVI;wFTYfnBzzGSY9y2;|
z(P!k&0oDOPy7OJd(0pBEFN|7Z<mBxsu7?FfiEfaO%cHA*>~_}asNUYlh#@+)(q%Sc
zRF{u8OM{lsVA~MsnWuW%YA<lmRFzB*i;lkD!Qlm%0st!m#Gp3aDRO6NdCX$1S2?qC
z2TvLsWokBny%&}1Hqo{Hyk<zs9iX!@BUifMr)T3}=o>j@>Hj^?I{X**GgeS+j9%TE
z_U*Qs)!!`aDt;K_Nie(dXB%*qY<6WY%h40&3z(g7+5onZ;L*K#sAw!f5VpyM?M%YR
zhNk7LMVZ0$GTt~A8Iu}i)=GLTmx7~SW7@mu>++t8B3Ux2)mg^Ol8(G%ykLtOoe!5Y
z8d=M%D~FbNF1Qyh9WOpM^^tvj3pSn3MqZZ$bcaV3UvOF_ZcVhHKe|OOX*U|3_%>=&
z_ialIQDMhbDhXQ09vaYN;llmXM1l{Z-B_Nhnd^7i`w%S+P|hmIKUdGUUQX=|#51Y-
zfs_h0NSS-bMiDcnHuQTvChLWMIe5Y7*8ie{C$rp<pfJ*c`thwg?gg0trUugBO`S~~
z|KNQ^IYDqI!mTG64wKMx>rBN&JK1vJ1;O4s87BPZQ=BTN1aY!L4QpyxXx2vN)LaKP
z>+_Jb@|$K<g$RS@tFOE}94Ud{L7an5$udnV`5!$rt#&8E0=)ks0Rg$wjuh8AuDyke
zRn>%M0Mj5Gq<#DAmPc5LYMWy1NaVd|q`XG1(mGTx|Cj(RjET!tWV}|E!SGy3_R2+a
z2Ck3kPFaOrUHOb_R7CZx${<Z#R6e4Er00Zv5d5jvV_&^Py7YW8M+egT*WObKwO>s%
zVSEE;X`-v@4}Pj){8pflb!%y$cVvc>^t|09%3FmNZ?}YKQLIRmhNQMODp^`)hg_Az
zdi^<|(|$L%B7Q|Bs;$&yNnKW0ee~7FTs4;k^Jad8k8eAb-y)-z6W<;OxHVO+z6Qni
zl`b%!1QOH}A+uPZ$F|_=nS<WmRCDsgOR--gN30EgO+PPQk>tNSYn8oO-^^szK+p&j
zIfw=)x~-$P888mP)<UCN(H+fsDPh9f(XzejY~gB_5^Q1%y6kE(&BFTFp^CGBWJoR?
z9<8qqK0gz+uB1VfRfM~r)vlZ})a_`S><Hv2isuR=&5I$K%1h51q*0U;tKY%dx>E^J
zpiZ61>!B?Kqm1zcbK&3@0AmKGj;GoCq7tNiUo^`pVC43))f}Fc))$S#Z?nErj7rzB
zDA}DZoFmn7I+MPw{p_yl&Ywy4ZcKn+RHzFp-g$ZF){qbPIWApxh)a7TuW~!Z{qIEk
zx!E*+yb1qx5wf{+GP)+S)=l<ckW{FHlp@b`uPVFt{qH2)=3A<7<<OtvK<Y3@$iqz`
z&$VF3X9f@?$7(fimLodj2~ZNTV*a|6F4%d_?p>XS8WA(o`k|pc9sRqekCJ&A=;g7k
zL9ZzraSZ_Atm%9AXa9#;IHRb4vToFxogasuzwEKbm=$|X&NjsKe+0OEt+pwKH!Fjy
zJ{tLo`(e5g0zO4W@2{xQp6C$^ofW&q%fZ9GE!B~?oeAFMCKolJ@qO|9wi-Ao#R>$_
zO6@O_=B-wi*oMHPIM!&Sro}tIoR!y~E#>zA+pg(P(vMCdgtrphx!f_Fe0z91r|?UY
zDiv!Nm}uMSn}NR-7sG^fdY*iP2L)%U5+BzpEsjNL<SFr;qTaOIkMGYFbRKDFGJSOg
zR}X!<I%go`Dly7_SVf<{>sgOiFrb^I+UXhInQfW4GA7~}D$R`I*hr85a*;cVTb+~7
z@?He*(};FHoVa6vfrv_hxoT14?jC?8ul!xQd6NIBc@<0~;^Jv@l)ywE2;#E)+U<z>
zbHS6;3htCq7xk=_Q7N?F1wUQz=uZkYC1T=2+9!z=;w^}RdR$B<6~MlyMzRH0+l<5`
zGaD>W$KpCK<nKdqO{aeBowV11WeRmn7oe}44Qzet3+*<tl{kU<;@8&%pxv2Cdvfw(
z+2^cd5!=QpgIgJFbZ4$L5*w=;E0r`G)J$d4jBt8|jaz9-WeyJK`a;lSrY3P9ccCYz
zhnQz)--Yn|Gyzc&bwO;o6axb#j>8WUm736yNyXpsPtg94S~m7o9p?{2aj^Cp;%`E|
z+PP_h@eG&U_<@NgG!4Iv3p7c}d8YAu*)Y4-du6)wwAuAlb5CKGZ_e~_-{i;RMtVzM
z)}uwPlynuC)j<_9{6n(7mFddL=E5ee1beQhBJJZzSWe{`_+@9(hcW4%gfJ%SxW0K7
zkvO>*5bgqN-P}agZV-igQ7usgirSO;T%%0n7a9?~k`*8J1%r%2xFVJw-OT~fo6PD{
z68=;x%jO9bIf-q6+OEoR8S=a(*=NfvPLw`YK=_d^42Z#dxo6WaR%9I=oz1V*{R;jV
zsz{<*D~^MptRo}jpsF58CV8(&z7TUz5c#R+$+768GUmxv-6_Z6c|*d{Fwlpv<^&<!
zKz}R^0y|6gWx-7&5`^W#295BbRJr&KN@-*{K}K)~YPama@3<ZABNj1D-C|IApww%E
z<rk&H{HX`HJxLUTVhk+$+@A4ZT5dntZo2ZiM%@crUDcW7%+I}DUF|K<%A(+uoUw;B
z`!dJfM)FgJ4}|sH-#o(&{G1UQx<^R}tLJP-iJdDJ5Ec%6*$-5BMuIdeU`m!{R$_UW
z%VqU-nN_Y^Isbc*;#c|JfV0l!FWrekA$<K!DU~!fZJFaBZmwbx#%06_JQ+}_P)1T1
z6ZIQjL$YPEd=TOgClI6wU&%$&7L$Y1PiE5AFy}L^H0Bnz@a}ha*9E&C{Pf1=t)1oH
zmP&fGlJ5bt4Iw5t7m3)kU=*s=l$!o+dC~cGL7rB6y<>_?12TU`Cs&DVcmY&3&1l2l
zrR-Jn#=TPf0Nfm5sz0j;kELFc>_E{z25+y=r2Fws?AE5b4E*@L0f2ev6N3Sk9X%Hi
z@!{+UHS_k7{-vK2cEym1wG)FGfL5>`Fu2`xNH0pFzo|_WsW7DV*dzJV+~bxR1E{iv
zlnLN$YYOZyrZ6bTaHOdQ_3$x2NA(sgX@+L2NI~(xCmKI!SYVR*`WhAtYR?OKEL?6N
zF<CcEn|*K<9VsyF&guXyMJ9zYfj682JWb;(a;_)pc4*=g+zm!stEQ2};2r%M&)#V0
zI(+o}MxogN0Mg3Abd?l1-~N(4Sz|%Z2)~=(?NfQCxeV&0?sS|h_u%d-qeJhE`QfS6
z2lECqWS*?WDc;NMHk<{ydu@Wpq+8?ZpeBEJM>-f`;^rbEDm*>I32e)8ERYi;#|zr>
z+mO9U{z@eJ=yIu?E0EsCVns|En*D}!a&$;tf(XAM6~$4yD0xQUmI#<9MFWB#Rk1|V
zjOW#q)jheDJdM#McUa$vXdP-Vv1ZTp6n)^iwXmlujI@)5uAL@lPG6z35v%Sqo~0!X
z{i@!A^>J>THHDsLYKs-8+`rmk>FPPiWR_(JWwbSk9g*-i3Ak}v$?O`rdhemKXq56+
zmPlStZ6VnSykhQXTzAnmte#qYuIAFx@j5~7=gYP^?vax+90pYk69JgnOT4WN|9Yu(
zSppe)c3HedARnaj!MS;)x{$~E+}IVGCJi2U)FAL@_QHaBFr^G4H;ZCwL%jSc6#EgJ
zxE-op@KoW&CP+1Kavk%$cdFn`ToPhC$;<BL^GB5YqLE3LkrUq(O1+Uml0i}?l$Tl2
z|I9J`LR1k~Da+L0BfY+ZC_TBVBX+C&ow1!jYT?sD1AM}{X}0hU)<TpwR!YI@!TH0T
zlUS4C@Sa=(J=uq67~mY0#pe7lTMr9n5K)vA){{1E?dwWy+-N&T8ObN;i@~^ujV8&e
zx)V}Th0|hCRuDQau>7hK?(@DK&7-Z0uF`-embbzlU}*OcCn@Xd(y|3Exb-<e)W)pA
zmv!qW@E?#8FF(WOu#*~4nq=`1axCQGsbR2wp2!M1LtituL&CT+tXO{U=QTkwk;=A~
zAA337a3ceI<R!19on#Gqxv;Y@(p5aiD71H(wx2UqUipv@m9C$Z05vqr@+vjC;-sHf
zx(U17+RRICWz%TyB4RS1wV*@XZ+GlQYn6(1be$W7)J=JV3oEEs76I0Dt>9Fyhu>yx
zK?!=>Se6E=Xeb}tEytXn@HP7HtN?$1d(QaDGJSFPfz-Q6#~?Wek5_)e3O%H&K|zYz
zMNttN{$4$o!R&CCO_2$7x5wkW20McIXZE+pA$tob>SSkUPadQ4Zq|}wc)Z}6gS0fH
z@FU#sO41N+icRjyWbPiX*@@h}g$q`(lRzhQ-P`F#%vfTLFciU)+3U|}Qz+{$Kr510
z_UP*GZs~35Yd6g)iz57qsdZfvW^^AP;(mp`nLxf)_deKNV;a~+IQU8n3r%~^1rsF?
zB&*_QKUhsZ*yZhfcRq<emxQW^`J5oO)2FbD2Qs(&Oa5c{CorvF%$K9fz5C;y2*~lz
zUM<Lmv(|7bD8$!YX4%P@YMCvwtttUzCbE)bg#Gpyt`G_&{T>2m2hQzXKpcwtpw`jZ
zq`ZOwhS=3ssmmgD!@<;#d&x2hvu{4&Ugo_O&X11r0B5FhQg*0Gmz3_X2uPmY9(}<4
z*njy&D`7CI5wT(>Fw<@qrSfgmEMu75scW&jjhjAas${$LIECA^(AwW{k>j{Yiqh@v
zwBr55khjd4X|4H#5>tyC##Y#Fa3($7cPct%zmasNDxDsiVZ}=+^cVc<#w~v5#d6wk
zd1uscE5Z7+W$0XqNAksxHRJ)Lt{Rx$svr>}@!LEJUa=_?3V8Za4mnY30qwiUxVY^A
zPfptK_A2_O2MPh8a+rYD<)UWSB|U@zk3PT1eoVVJ@i2d>%`ClFu90L_U?z=9@))l7
zWPsUb6T5BV93rw_dj;RuZO5;`5z79ksZL^|<>xV(2aJJ*H&$)jSEZ&S6urdvK`l6+
zh}X-F7`7Y4w^}HS()MS{bmlQbmvUE02kqG3!}kT9X^i&9*e~OGUXm0W$A+Gtgf)WJ
z-R;XgoBt2xt?=%1>#k!k6co<O63RH;lB1)kW;1>^XRJX!|5KeDdd>7#!sdGr(!k=J
zM%b&|OWuUBXp}`duy~R#JWy)-T7G5u@x%@-E90o24hjEy740bFd$oVRz?4)!!zIIl
z(VxU%fVPwplpmYDB>GA$9@^;9hdsuL%9RZ3)EB2*q!?}41`K*@ls6Dt<7NbyKq^U&
z&@P+w^FM};YY<hP$jvTTHDT=u4B*FWUA1<dM!GR%wWBEAV2Hk%a*%KIS?A=R^htv+
z<|~yX8>y8e!goc$ya8|9nVmtJE6)TMcu7;UrsW^mZla%T`?+V8mc0=mfXH^O8b)UF
zMnr+m!1xvDyQpZ#l&7;(1gceZl$T&ju@?-BJQP9ONeM-}VRI4=U<4SmMXS!)?_<EG
zOxMC$2sH`0V)jnD#6;&jy*oh@a3@n#uT<Wh_1Y$T+J6kHcs>recLlL3l2#g?J(aV%
zJbB8dqizlg2Bq?shNcQVi~k6OmRbgr6HG(Ouaxd=?$8>-SGlX*AiV9bA09j2{hu7y
ztDrm)sHdr8p4;?{9URTIR9t~LXe<PkV58L|Scj$8@Yv5V(19JIQgS?7GBxdYFL68H
zBKaGt;B#|=Ct#9rsjVYt4A@@D7q=CPRhce#_Rag$oo?aSAg27*)m7N58`YH;Wlz1>
zH{f@dS<07S@118|&lqhO935kZYcH#=kkjNaeSPuMw;vXLeNs4VGg)V;@J9HVbUuqT
zq4LxpBtqca7TZjQDoOfwc`_1lWL~RemQiY|kJl%W)s`0U(XpIo%k|>NH=(6QkyS`n
zl@k~^F$p+rg#N6axqX&S;Cdo9-)z9Vm3S)jiTD2cmgTu)RSDUm9LO_^)+;j4q|Znv
zW!-V9h0+IV0t)+@^akf;GT_o?qBuI)o5ro#<uTrvoWh@Kax+=)4mn<u35M;+iWWgO
zx0wq1kl3&LnXy>1FnoqqVWbM57~1|dju8GA6-|S#?A+K)SQA_qKxKZJ6dCkxo$2RF
zl~*dfGaZx>Z@waUq~Z@kj8h<jCwGBSHp6>oyrkSmw%bk)Vr?YPaqeCZZs7g*z_fL4
zwnK+2PbRv0Izn^Q+CI^M$!7zZj$3xtrrwTs!XaO^4ihOt8Urd`aY(HSgsZq&P&BiK
z>bPrPX}6i&gHys7VIE5O;8hW$vY^%etaTzd9+(ihQ!x6Wd_~85+^v?mIXXn#Zu8E*
z<Rw~K=r^r7u4NOhV4uLT@S`4!m%jXPzEyU|Q<kI?7JTCcJ8g#jZ0ykb_?k;Pthu8D
z3ojN-kV_i&H|R|8bxN~Mt#Z@{65U;Cm2^kIjZN42`plH}xz;tfWU=qP!>+>cgYFe<
zN<Mu<&oHR7@JJ*RL7Cyo>|*$G((=*jp>+JxtSr(_AFAShB}X`SCKZU}A{Z%Q#)Pjc
zu-NhcrPEde@4<s)OF$aMPt8hL>H~$w39c>4S5GP$K^ZNdD-!Owj6HE%Q6>*t9If2(
z=UsR3OqPdR0YTms4@maF7bif#0rg2Qhq#k`6tiwVOJ-OKt!SCFvG0{h3tsno9gEIS
zbbSuI+QVjyh>i-AK^!W1MI&33n%5@dfzGM(<;xPLT{l)=694Qt7JJ(YhXmgLjD#6v
z`csra>M$RJv{oU?)7=4Cu_48qpPv^RkKf5Cj*fhhFyq!zv@V;BuD)0NG>tv401vfP
zii3+a_%)suC^YNW4O3doqaGcBIK!^YgPQN0s=OWLo%ZKpYQ1QC6{3$XF}6;b`kPW(
z?i4o(9>{hTjkwzlxBku&NnLGDp%575jI0CeuThpODOtYyHTznpkwM|EAm1HnUcS`A
z;y|o~trBM^WI?TpoIXjIUA`!3`U*U|?+^q$RMoMx%=+Ugd|NR<@jnJ-g8}Cvg1%1`
zMNs|TSoPPMWJXbS7?;~kkK0P|JOio3CwvKzcal8dd6oQ!EtTtiwkY$UAP@w4au~3t
z@tcsOQBsCUbR9--b5AdAC~x&-`D{Tbj{WwWuB+@rwO1Hia92<sYTq;burCV?VmHEm
zG}VT=zc2@nB)$yOdEO!VRVZNU215xx(b%!zFi*R#g+9cjzSYv5vHB%&NW8aH43bzm
zK{+LuF7}wS<6XVn+a4`DVh|_eO=e!jH*oFm`Z;`rNo$E2K)_yDipslBQs%0=!*dxE
zeEw2Al4~Bm`jO>DikK|(q+Q-WMfyGyDaK!1^PmTCVK_ky1KhPdOHDhSe{-ZoI%x$z
zBOOn-nz`MM2-wB*NR2w2)wfUWj2m}Z4cFRRT~m1}JQmeEHEk7DD*)UZ2C4u3eq|7E
z9hfv3cR8MRpm!0ZTDx7W-3R#leUhWiBSU7yPv%oW;PNd5mV(*Qlku_RcNgZB8KH{S
z0)qky;z@ewiHXrmcNk8tvfQ(}lo%?rxZfz-*45AVy&^L8*+p|BHKwm@HCa0{;Zlfv
zSBU_J6X)8mEBcudRJ$Lvndt+qGrJMbEF%^PhkQe8nj_J?U;}z3<6?ZWv4M51K77D>
zZu&h_N6)K&kV5dpCan%$8|k)-&u|97gvaunPoH}$!66-U)MDT7G63P3h7<VC?2mHy
zfQwk24`c8^<$YJB0=G?(^uFE;$Zl1S0eymR`7DCq`iB&nqlHtdDnbmGA|=(Cr&ZaV
zl3f?;`ZNV~1%Jd=;GmzzLFNG}`;wWmxY3ohfs6_*dR$qTVh5OTV>raXqE>tyKN#dW
z$6Dlq4o0<}Ielkt_Tg|uOb)m^9t&*bn2tAgVx9)>pTEa+o`c@lyvAgGilq34hbL%f
z-_|!59P<sLccHagR;!A(d!pse#lwS*P7(>s0D%ClGhFxW$Knrsz@(qq>f2&3kR>86
zQUCBw`RyRrHy3C?ldymwt(5r+5ySUlhl=W1m*|sP8Iz2Z2g*XUk#Srj?x1mt%A!EP
zGmY?n)y->d@VrrRN!_?gSyy96RxH)bi5v1!Xj~}B=o%INa8ayQ+DpH$zjYPTkh&`(
zNyq0t5|)3EADqDcxSb?GSmBJ9ecopgGk}h=SVdV3ThzD7)0GM$Qfk;!%)C}V6-RC4
zPhLdmNn)KcOJWf|Na@VWhv4#KUVmv@wbhw|-yi>4lERk`-En?0E&0>!^vYqj4GG<Z
zb>*~TrYS$<{8~BP26yMq*^Iv@Dnxl2vNs|&yRjnj+=GK>N+jjg*|oF@T5Ij)uFLB2
zpj6NA$_*-yW3O;G7m9wBhJGx6tR3gBIU=*zogH(DaVn;E^R`H~Fm>gklP+p5FtiHu
zr|^#MG8Q3q+l_2#cF!Qj?fBj(6xr4#Hc#lE#t~Ak4}b98TLVyj1w{jbfDPv}aSRtz
zpvGMhz0+Iv8;1GhU$0Hx@AQ=(!|&?7#QBfqY5Iz(L8o^E2r<p&*Cy!inmzB#7Ue{8
zzWMPR()o_hvR%+w9^|p)dnqz$2*#DhC1Y$m(|4eAv*zx_Q6^82OzLOl%h$~OLwn_T
zoe)iK^qeVhou!-iHo(&uX_1ie$`3RWEJDO63K`)lkR#;D&2@Hk!h#kda0}a<bz^f-
z@6DN=@thR=iNc?v>+5PC>)&$vEd7nZdqH&F`reMHa7G>RzMfJ)>#d;M=!_zUgB5!-
z2P<7~AbpxeaG16P&X^0Q+IHZX&bk9kT3>Sb5<?e4t+?#cKL?FWg1*Z#J-pLzSB2A2
zmUGIrsvKETv@*9WCYU5T{@JyOaj8=8)m$aQDvQrFuX^SoDAUre&P4ZrU6d%xDi<aM
zAP{bly+hUL`?Nv{HcI(y)XbTWC`m6VcJN<yIIFV%M}?`RD!H5PMWK{bmz0s@r14dB
zOm{(L05~vJy1{E&AI??3VFF=wZhJjbc+UFi`SrYJ6D7OY9$^%4B8q*uX_hd$PjFBm
zAg-2diI!vtT~*E_J()4f-@mH5;?<LqtC3<W+*@uR%7eklg;y$@hXk>lH$ESKw?i+T
z6(Ft1SM@mz_KG+=IC|9ct^ys2kk3YDb;qtU<tH6&bQPA~HLv#6dwO2Cy?l`{#LkdH
z-vfPoT+;8(JD2VA@1=d+jgAD`h6SG5kl$QefQdG!9cB(kXFnIsd=*eERv?geNl^sX
zWTd~+&gZ&{VoCEB@UP-}d-Dl{vQ(lc1RmQ6gih1%3auf9VeS|7f2o|iIM(O+Vo{vi
z=Dva-i+7Xqr;;`BFe#+?6yRo@iA7CS$4^GTMr;<td~B%{PL&9_2PIH}BPaIKNh_9j
z#gg-~HEAF%U!^Da04VAwmvwW0EDR0LPrj`oY2+I(KG$Mn8jb~Lz|vt6Ks@m+a^t-=
z40w#j&4FLpK3O#pIYx&%KV@U_>U6#`3v(Mc)~Ml4AMW+O|2a0zCtP3T+I=|EGsT>L
zK5AI_gCR!B(x`A^lJRxel&<2V>}z?X7hVn}P0|G9$2=06H;Cw9yyg2ea!^$?=|){R
zMc%;1s3$ZF4wdXi(0WS|6E4CNZ`w7k8VVj?2WT89)$s)%{l~zoHFD(t6sumu)|+s!
zw7ELkdHS$4f>cW*ILG!j;~DVgg)$2x(#Ga<ysKoAAdFuvN>O0mJL6k9md@11N?Z*V
z)aBw8dDbd5Ddo!8$bPs%(yvio(6f_k@+fs9@ISLSC+I+u*GliI8=JDz-^#6Dt2Z#B
zjc_%cj#}w}3cxcjiv)FTr9EU=Sqwuyx9NymXYddP7Nb2EC6G?Ddvjhvm-W|BHBjuz
z$R<ICi({3{J&b`Y--q5i{qfND)gOprM`(y|&jv!ko9Hlh94c4E_Gv@RT--)$IZxlE
zJv`nPCB#y%^JN;pe}|K2fJ;pbLYrWWZ%pkIs;By(A3V2ySMg)H3o&v|WewqTYbdpS
zlms1IYbFRi@@@X5-c%3<Yrm@lmB0|ZUp$@miTrrblH@#;lyXBXe1cZ6_8?gJPk?iK
z+R(kurN+g*i15ywK_w2&0sIPiKr1Nsa(saJ{P2D2$01te8hduFf4x=x+Di<nlkW)Z
zYj%outxpV>pD+M!4T4jm%2JX)DWz`AEiY&db#_6O9a8#!;Wpugj&ItzfGG`h4TaW}
zm9;nS5iGE*Md@^bTy*TK=PW;5@85aub?y*6p{L7xcok@A!GJ6$v12?l3U&J|8$ltX
z3$QZERoqF!p@B1SCe5k$wRfEQzCGt$m!3o7oQ9rUOt+vr|H36VVT0OraBQ+_EBle}
zHUKG7&cPL@6fF`{1I*<GWp)=KpGdFfT9McTnC?yRL`NyFux}LEjJp?%H|_haM`~8K
z=0iMOUhN1m3BFBJ#P&W9SuxvPwYoxkNBB5y_;%bvnAde&H(1_TvSG3eTReO7$sEi*
z<m3xtlAv*2yNG?qZA9#kUofR8$(o%PvdhZAT3by;0_5(Q(Ft<08gQkT0aCahib^4R
zURLvG%L*VQvxrXZJ%Cw@sXg~vRY{L2ot#vTkcO<ISuY!jnu0GvgMU5DrFm!^75|e-
z8_c(%WWg|$626&C#O%g2;f=1=tVfBxGzg+7$~$<ueqxO?(|05y0DEbrGVKCg;U}%b
zxJy!MGvz!|&ah}xolTQ`#G-MwR@Fa8^=ow3Eg}x|QPMWTSMSx&@Reo$nCA&hA~{8l
z(>|bijBO3-Poe_uZ_fLx*wm6lL_M=2*){@1hik!a6hV77Ib*vn?kT8*>upmvCvZ2C
z;Vqzix$r5aqzd|v=8Sf?M|*9blhV0FU=M#l|MF-zHY^p9>cQ`RP|tz}CEo6FmH+NS
z<GJb>lmAVxAbjtrL~4S(su%i1s?4|Q)3w@ryUxX``pSWseN_Y}e5LwXv3u$krxeyE
ztIgFs$qQQfReQ#muKbAMMYLkA;UvH}Wjx|jAhVhD@MN1g-|9Waj<HYqySb+={d!H<
zCr&+?FG0}FRv))m<4sHnZ+SP^cJ<9b9^BY*4dPCuh<Ff;-rZ{Hepi`{25m@$C$SUc
zJ13Oz(?|KwGzx}B&IkH{YU!!Q4Y_bWGw{24>qV=bSAw#rTBS8Km)l+4nRHM0b$&Kw
zF<yz?d-&>Py_f#};Ebx?<dP|N6;nlZ^}dXl{v61g&u#}-(sO1=T<nQLS9$20eWnO7
zVTt{H#qoq^cd}Zm8o(;^jXmX5X-o<h{OwO($6oSVPOsy>-W?|$yFZ0friY?L3Zq2}
zF{2RBlO>{gpO!#f9RjbWdiif&|5>}0zn2mJU>2Vd>?bb{zp2#}q16>z?WyrEXL0o1
zeLWQ=x0I^#3vv<Mqec4fU*{~EG#B!|9#+EhtA|EIqFf;F*Y$_?s89V}eFXi~!+UQp
z&aR~j?Lb)&dVc-H$?YP<WjPI%dwL$uL%5(r<<C90U$sA$*7j|lWD-N^!Hx^pp(qUw
zly6A|b#_WiMW))Yb7|fM^{pr`9s@(!9~-}%^y)~4xjNvbu6y+{A~e{BFM~2S0Y|wp
zsDvGPaL?cOrQaUt&NxO^vbv(f%z{PoC%QD@oFy~Dm-`OEDi40W)I}Y(Q+t;M$G_bv
z#G#>^MPO$z<ln?u(~xEywea_IWs;YV{NRy^aeTrMd5+&FCI2$QkJp4<!C+wGKL&{(
zmJGpPPCj!$^V%b1f3;x+hMQgPK^GK>c`2Kv8i>uuJsTic1ot;}@nnW?{|}fFXYC_-
zx56*RJwGr>_Di&tU(R-GYk5JJ%!&75hXI%~NE6HRB!(wb33tH{#mxpZh7+dhUP7c1
zva=y!8nPEaQ)ddsSA?iT3!>~Qk{IK;AH@v|&yl3nFN^;Gq%8Ll#A2P=RNBuB$~QO5
z9D97lMGg>oYMVaGelLl-Hmf^Dd#gavwi<Pr9z+3>Sm!W#=*p@**=1E=U6o^t=Ms5P
zYFhk7(<5~fYw`V{Ceat$WRVb}qDI3v0a(1qyZ1^!0N^xoNp#W2<4*~-hQq1pMjt8<
zD45Ze0fC~Jv?e&joLlTDQ6I{Xh};>H5upA*(dR4XYgREd(uQ64>2n-y_SYz0DGLD6
z6A5CnBC<S<6A=t$a`iumS}gV-YLiv8o^qECsP_U$q7uAd!st-RECf76rgBiuc0}+;
z8hECz{{U>YlH%43TK?}7%QpP1aYTy}Jc_Q;Ad}}*J5E%pDk7RLElXZU8e7h`^F`&#
z-(-Z&V2muHb%0>U`=2ehZu#*c^9W|edrNpMTGry@$PzD`DzUkWWM&a8kt;?K@$)bQ
zINI4Lb`^3YisIUF_FEfCCcAWw8%QIwL%vxfRFtt|?&m5(D96nE*UKYeuRftQwZy($
z7LXUWDHqu!Ke>)mynxEtW3}2cBrZa+Q_79Gb@V@iwC@k=&>c};`IA_REjoBSrBsZ&
zpE4csI>_I;w2W+ABx@&`<*ZJ~nVuH#0_av#$R>{GQ;y=^Smd_2WH(mqjUyrjW-_5M
z84=?^>J!XD(#Bv;{{Tiw^!tl<bc`eyw)RbMw$TV)c*|Pl0^txmT$Tk|H!BEfvE(Mk
zkzmHc+REHXBcdddOCqe$rNDcJB2+9?nC1f}Ia*@jJjXcR+&-_P&7!}ZWdw%aG>ThD
zk%^i$Dq7tcU3aUKVQU)iPGm5yBq=bsG|5Vz?C5^UJ-a=;5Jl(71X660NTQKh8-gS9
z2$730N$iL+NgRJ@)YG*`7Pj}X-rpFdiVK+mMzvR!;)dZQ*%6oiJ|$O;fRAZ!H4upl
z3yT)9{f#Xrf<HLRiLEf6TxZF*ib$}qCetB=NfBroO~AGiNYup+g6WV!Ja)2Jd9i%<
z>k`|=43lj}Rq~w22FVB5VRbRHV7EaU#Uku2<ENK%HP<FrC8ONx^TE0~ks?Xhw)oN6
zB2e2I8Jrj5u3*_2W?3yQAhdbj=66XTg;k_UnE7Oca!|Hr-SWQUkD1h0yR^2lh?yd^
zcd|%Q)&pXR3MZeK;)JnKC2f%>`pgGNn`-0(ma(p%<;P_l5`CH{k|nlFcHbqo=!}4(
zZ&vcrV3kr9E9XYB<7*Qnx`b9~JbHcPkxjkT5&;dwtkJT@8f7vxw+>d?bMlbpG?7RW
zqSZYwPlnRY(l@rAQ4FmGoH5O7I8zY~_ITb_$=Yl{8$@RgtmDi_kv1o@o65ek2kkd+
zX!2aZ653R`AzmojbRsrpl|tkKsr!wgl|kQfY3ARk+_bV<+H5NKvax|}qD7DvRFiVE
ztAfSKA~HH0xK2VXAiG48+DK%$c4j8w+UfRO4VVa7nhnyDa=}qtD=1cAy#2M)YhEUj
z7~bvdZ5~ETakfIvFO^-S^Bt8$Z*3zX;F#rM5Df{bG|BYo^{GeMATdQKw1V71!BQ9|
zF{?xsF(St@$HOQvGf2Vww?f(aZLiujX>}N^r!Nkxb1YwGTstyJbs18|FDsueRRFwd
zKGx;Gd$w6A-09;?@f>=6tdYE*Vvf=^Yxv<<nmOAC%@LP{+B?Nfk*aL_N-SZN?}wz5
z$hot()}#I9gUY&`ci*~2F_Q`NWhcsXWrWCs1dl0O%-%>t&G?@9IIy(1hC54Zi-_)J
zh2xEq0W4+Yl%phWBHkQ6^0G-A-sJ+O<?Amq6r=31*tF2yv5w9Qm_w}LjI1LM7y9XK
z<dK{f7|sC!no*x7vX=7O{i)|=highfyNI(&(8{c1B)V>4GDi_v6^eN~(6Nl+j}<~i
zfVC0EVn~uEhQt)M+Z<sUD1@%06EuiKds*X_Fpf)Gne*n>Z)7nUp}Vx1k>E#LnPqrb
zNem9C`7Ypo`Z*O__mW$}>E+8jOxPNSi7lciA5^r`?j&?rZLMWU&AF1=;yC0@yHg62
z`9e&nVQX&1mO0i)@XwF*xb<igN)R;9DR`Zv@*uY>B&ARpBOvf$NXsgseU{PR0ZdVI
zad__S?x3D#jkKFvbhT?_jRT+EFi6#8b~_UWFyAtTW-g3ol_ie<0K;voEv&kHkY26j
z*@Wv7HN!pBzHP}Yz=9G+K^qu;X<PS20~cXgceeU%o5sn1B>H{5#F*2kb(Hzra>@)+
z0MQ+=p_mxUgOpRSfhCQaPp)fb{NG7&ZRbxk*Qlt>i?~X&2M^^;`+}qV+hr=aC4($_
z#BsgrTVLxk6t}pMr&(d2?N1{*d5-bOb_wv?SZ@HEatj}opP!yZn&Mef7~n^8%M@jb
zpeOE)#GDSCl6^_2>f{l?_VGmXT1NBS1!-gw?zccb@!AL|+w;I?{oep*=DCaW7M`|H
zc@tglj@}DcWD`soRu*8yW!6HjyF(BdNCK!hHZAR9zqPZnj^oer_o~~#?mWwhV%-^4
zJDH>|q9zF%r|#n${&3>OorFzsXLWCB1W-xkx*6kno*0eOFP!F0mhZHx#!D55?@@r;
z%Gb1eg|UWvd&%LR*3-;cNfWFHvpWV>Kwj0n(GsY~Eg@pcuYw|4+IiAI@FZi)xQtyi
z6BwoW<cSUy%*taMSZzfTI*9^>83vq&C|#ZjVU8q1<|QctNT9s47#*B>a!(ji!0yJ<
z0Yep6-MWA6IVGM+rI*f2>-hJ_EXbZ@v9gtaF^jSQNyZ2+0DqK<#@(e@tt0zn(|Ll`
zBw}9VGYF$m6j?FM4(Hm>gN5LXd4x9UZFO&TWi9eY1g7NQ+m&e{fJ&&67}dXZAYe`!
zPD`c;7-o)Txr0j($zgUNL{iOg&$20I!>ot~(52#yMjLkErHAnCxj1x`*)^0FziE`L
zR?9Pej&r(X6M4-x)8(^mM#(}H?k5euF62UNpm;5#jSI4uYk=~z1dn!95w$mDugX62
z4bQiaK=@hxwWUoZ{hid1THU-T!5p%<S%D{NHsb2R0gQlMCMX$NXt(=4rmSbT0{Nu3
zhwSr3a~0FcaSV7KOrC1VBMIP*l_QbVqbs41;wy$~*ows5Tz#hPZp4=f8Z5Kf$ZiyZ
zut*)F7>U$0n<RzOJX}iQ3aNIvbtG3(&vA7m5<?H3uW-)sMH(Y*X(O3kgc3%Q%^MOC
z-H`H%yjRrhAk?hpwYs$XEu7NL0`HC?Y$TN2!d!;(=G`HYcWfZBkpeR-J0CCBe$}L2
z8KwRG)x@s$wvzc0i@6kE2Y`X{yF1-tR8x@RWlg)SmF!yTmg{HcLVvWaM)!s1xGJ|W
zF_6fTlYzEjYi#aLF(chG<s!I=dW(4f0JI<M%OBbv>&|m=a-THo_JoA_@v0dcB(Iwi
zx~i?LDIkF)F|Ng?$?WbgBeL@$y0o~SYhwbuR|reWku$|^!c}2+ld+%XLKn?GYc|3?
z$C}Lr<o8}&MFU%rBi$GoHv&jlA&|M2He3SS5Xt4?LLxCtZLc>ij87WfLumIi#}3kt
zi7OZLCKAKBh8X;+tb~xp;4?>X_Yy~UZvnVdv^kljVoW$F0|?^4jzCn7q_|u@?ECO7
zG`}+POSsZEGfQ`Vk=#Tik8E+tDk=F8uu1;_cjblh%Q27U2ZPe$itkanlXsH=wEHlH
zmE@CtZfDCNktLQ$<%qIMh$hQQt~}I{qwgb*7@loH=v~^xA9cx)h>f}h7X!|joS6|E
z$fL_+7!tA-Ay|n#tB7oNT-d;{NB)y8%{)5!vCY0o7BrQZw7=^k05dBBSe7AbOP5&Q
z>PeqXf_rq9@us=CX@!~EV~Smkw_-GFA#5@LLx5XzHCP^WcMkDG9ih9pP*mC%XJjNh
zyQAX|6lxH*HvFLEkb{@-<jtXcH_>$~VH-`UKAQ6@#-UWs*6}{jpkM`Kv>b)`RACiR
zSNMFBO=On;0ByThpF**}6M3bXCb>pgSSw`-EpD=9m5%u(B%S0|ew%)<>N>QaVYGdk
zow_2ru>ei1PZMNk<|@&7s9Pl@l1;c%uxNPhHnq67o=K#+eLusRozL$=k3Hiytfk5Y
zDno^EV<<x?Do09>!`4w+_~huW^W1-D#d8c-l1}S0s+${vUtv^cX)YUkY~0~gF>jl8
z9n5VX_C31ICpQvV`K%S38+~3FMA;zz_1a-HjnU+WBEYC*Z$$7@OL5@c2J%UN*J)OS
z!jYtLqj_MGs;V)az+>)!qX2WB4_%b%O{7HrWKM1_Y*uuhMv-HSQHsq7XJ+}r&*tvx
zWri0d`CwOwPw_{@a>*;k)|Tbm$@`dkN%qgRhvc2bWF#nTfULj_vlGwV_=i%xvP)U6
zWZ0-9ZLZ25HAqoWlpUA?-Y$0Jl?92y;=@4=r-GooNTYj=LiT%UB#}cH<Aq>w6F+pb
zOY=8eC;)(5G@c&$v|kd5KY0vVde7uPDAIZHM6P>=Q8SQ12eHbtD{f62P4Pm<!e(g~
zO|#Y`(^YV+9V57OM|jv6i-99&<iRY&f?dmH_+snq>#u5X+rX`7r70Hfo@^4amI!kq
zKH&VnngRJlil-PGYeQPINqi+^;&Ok}rL?oOXv!<Z6K&<TLa;wJ%Q(n6;foQEmucZE
zG{4dHi=;ng@;to75-X&}D@&=zm?R8YT1#lzlRFPTFA2AkywvV*t?gi*Nf|BEYVMWW
zCjob1n1FUHY4U(J#)BMW)1st~d7(*?DP%;MHcG0*2VKFi-lKA<!R`U=Tbd{QPH(Sm
zrT+j&^Q|wgr+ZJ`dAlKL(lUeO5s4vFv?%I*7i}}G%1S7=j9aU)Ho|GVwt&ba7UX%E
z@`HlF0vjwzVsJ+0pQJ%|sdzI^k+BZ96mZ<K!xr>bzm*9_*^t;l^BlKT&fk`-TUn*9
zhPt{OT_%W{lw}cOG0vB!%^6t&vh6}2hWVsW&AS+*O11vb(5$By6Wec#Q-mxp_ZHU2
z%?hm9Wmz71Oo#|p-gp=o<?i))@4WA{ubbxl{{Xz2SKBje^ClT{nIFsfiO4xP0}HpL
z)O6*w)%;;=9nIgFp(N2;-5J}>mLWVgf+-I|f+k^w3-_>cxKW?tX`4y$F1w^eBbEzo
zPU#^s#-v6Gc;9Sb2$Zl1k`NGMO}lYX%1yt9blqJR193K?BuuSq2~1l>2badqbLTej
zavuP&Bxa-6;D^KhD%3RFIHO^vYICGhPNGJUQTC{jPsqS*&NhthY~)}9_6T&HCrFwI
zqmq3}$>)+uls}jI>xc@VKPUxNPDm^nK~lAkB=by=q_W8A3T%m4i3q!kVSNVXV}ab0
z-oB6U?wbwYh2K}5q?YbWjWW%=;v_@%n`>l}LaYcc{+o8(f~?cCI=RL@KzLTgWqAbG
ze><xj%a-|IFbqH654DLhhVxGVxlj~Gq5lBH;@W%Jf6?3fLh3nVwf)eUp}8@}?!)FR
z5(HE8ZD2?si~+E=Q7@N=pZ9XS%bDEen|49T`IqN7Q<WH80kv_D3rjzUZ*-@ZGg;|S
z7_}cQKGGUznOx^?&P)-u0`17;5r8ZBzRD!i;kpkwk+oevAkO7EytW4jPSN)l7#wAY
z<(obcp?{-ldR!ysFD`+nysgBq9n5b#6ClHGOe!G<3aJ?bd~v$<{t(ri_;bR#gIhpl
z)V4H=yOAT79YPyXEMZt|W{TyJfcbW$XcR`f4(5lb8_UlPTHL`Lhf%V&xR&G0k!Dx9
zwYx0A!vbAa)+p9S%z-xo<gqoOdE$$f@YRm7Ev2N>-FRMIW#W`OM6=t7C68(r!hq8;
zBz(teeBUUp@$G!e#khNk%BBiJA8IQA;FF9N$bLf-zbcRc8K~`a*lnF=c9Q1oCew2{
z4Cg9=v48>w^3at)sz}Z=TwjVm(CvId4WIfm=$ceoy|u#p(@AmVT*ewnA1wG-V;Rm^
z0<2jWso2mhbA7DaCB*TzpQtPeIDE-67;UA*xyX^Rh=Z^$5l79qmNFQHmx%O@9^cE3
zKe1g)9Loe^NMnwBY(SV@s}Wb&Ml*y{ox^o(9X1xYxSiTYl4pqTQX^$p$SRwV1}VF9
zVTsR}<L;bRUYgS0Uu)KI%k~&-uHM=)X&MZ)u){f&?o*iq%OU>h+;=M;Yfx#h#$DiP
dA)ZH5B;bdU)JSC5S;HNfcL09~au;tH|JmQOr9%J!

literal 0
HcmV?d00001


From efd324ba7320356ae085ae4baabbfcf74d0f6336 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Mon, 20 Jun 2016 23:09:38 -0400
Subject: [PATCH] Turn on and off individual pixels

---
 apps/eink-advanced/main.c | 26 +++++++++++++++++---------
 1 file changed, 17 insertions(+), 9 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 3a233b379c991269e689a36c6653f730323a8b73..03167834600d370fcc0e14453de37803c6254ac1 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -10,6 +10,7 @@
 #include "nrf_delay.h"
 #include "app_gpiote.h"
 #include "app_util_platform.h"
+#include "math.h"
 
 #include "board.h"
 
@@ -363,27 +364,34 @@ uint8_t lab11[15000] = {
 130,144,82,9,40,74,128,74,255,255,239,251,126,251,215,245,255,255,255,255,253,255,222,219,237,255,123,127,239,127,223,255,162,0,64,0,16,2,182,202,148,137,0,0,17,32,8,0,32,0,
 };
 
-
 //set pixel value at x and y coordinate
-static void changePixel(int x, int y, int value){
+static void changePixel(int x, int y, int on/*1 or 0*/){
     int height = 300;
     int width = 400;
 
     int index = (y * 50) + ((50 * x)/400);
-    lab11[index] = value;
-}
+    int bitsIntoByte = 7 - (x % 8);
 
+    //turns the nth bit on or off
+    lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte);
+}
 
 
 int main(void) {
-    /*
+    //clear screen
     for(int i = 0; i < 15000; i++)
     {
         lab11[i] = 0;
-    }*/
-    
-    //lab11[49] = 255;
-    changePixel(392, 0, 255);
+    }
+
+    //change screen
+    changePixel(0,0,1);
+    changePixel(1,0,1);
+    changePixel(2,0,1);
+    changePixel(3,0,1);
+    changePixel(4,0,1);
+    changePixel(5,0,1);
+    changePixel(350, 200, 1);
 
     // Initialize.
     led_init(LED0);

From 41a943e24502e3e4f80846bdccd2185f6974c247 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Tue, 21 Jun 2016 16:13:58 -0400
Subject: [PATCH] Add grid of pixels to image

---
 apps/eink-advanced/main.c | 51 +++++++++++++++++++++++++++++++++++------------
 1 file changed, 38 insertions(+), 13 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 03167834600d370fcc0e14453de37803c6254ac1..e1a4f707c16154b2f96efa74ce539f0fbf6fc17f 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -11,6 +11,7 @@
 #include "app_gpiote.h"
 #include "app_util_platform.h"
 #include "math.h"
+#include <string.h>
 
 #include "board.h"
 
@@ -365,10 +366,11 @@ uint8_t lab11[15000] = {
 };
 
 //set pixel value at x and y coordinate
-static void changePixel(int x, int y, int on/*1 or 0*/){
+void setPixel(int x, int y, int on/*1 or 0*/){
     int height = 300;
     int width = 400;
 
+    //index in lab11 array
     int index = (y * 50) + ((50 * x)/400);
     int bitsIntoByte = 7 - (x % 8);
 
@@ -376,22 +378,45 @@ static void changePixel(int x, int y, int on/*1 or 0*/){
     lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte);
 }
 
+void clearScreen(){
+    memset(lab11, 0, 15000 * sizeof(lab11[0]));
+}
 
-int main(void) {
-    //clear screen
-    for(int i = 0; i < 15000; i++)
+//inserts a grid of pixels into the image - NOTE - coordinate is @ uper left
+void insertPixelGrid(int width, int height, int grid[height][width], int xcoord, int ycoord)
+{
+    for(int y = 0; y < height; y++)
     {
-        lab11[i] = 0;
+        for(int x = 0; x < width; x++)
+        {
+            if(grid[y][x] == 1)
+            {
+                setPixel(x + xcoord, y + ycoord, 1);
+            }
+            else
+            {
+                setPixel(x + xcoord, y + ycoord, 0);
+            }
+        }
     }
+}
 
-    //change screen
-    changePixel(0,0,1);
-    changePixel(1,0,1);
-    changePixel(2,0,1);
-    changePixel(3,0,1);
-    changePixel(4,0,1);
-    changePixel(5,0,1);
-    changePixel(350, 200, 1);
+int main(void) {
+    clearScreen();
+
+    int grid[8][8] = {
+    {0, 0, 1, 1, 1, 1, 0, 0},
+    {0, 1, 0, 0, 0, 0, 1, 0},
+    {0, 1, 0, 0, 0, 0, 1, 0},
+    {0, 1, 0, 0, 0, 0, 1, 0},
+    {0, 1, 0, 0, 0, 0, 1, 0},
+    {0, 0, 1, 1, 1, 1, 0, 0},
+    {0, 0, 1, 0, 0, 0, 0, 0},
+    {0, 1, 0, 0, 0, 0, 0, 0},
+    };
+
+    insertPixelGrid(8, 8, grid, 0, 0);
+    insertPixelGrid(8, 8, grid, 9, 0);
 
     // Initialize.
     led_init(LED0);

From 5b05e6dd0c96da53dfa0da39d24a029214d6719b Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Tue, 21 Jun 2016 17:10:26 -0400
Subject: [PATCH] Added font and properly prints characters

---
 apps/eink-advanced/font/font8x8    |   1 +
 apps/eink-advanced/font8x8_basic.h | 152 +++++++++++++++++++++++++++++++++++++
 apps/eink-advanced/main.c          |  45 +++++++----
 apps/eink-advanced/writetext.c     |  59 ++++++++++++++
 4 files changed, 244 insertions(+), 13 deletions(-)

diff --git a/apps/eink-advanced/font/font8x8 b/apps/eink-advanced/font/font8x8
new file mode 160000
index 0000000000000000000000000000000000000000..55dc0b2f870d6892bb91177c32d7397fc6fc9050
--- /dev/null
+++ b/apps/eink-advanced/font/font8x8
@@ -0,0 +1 @@
+Subproject commit 55dc0b2f870d6892bb91177c32d7397fc6fc9050
diff --git a/apps/eink-advanced/font8x8_basic.h b/apps/eink-advanced/font8x8_basic.h
new file mode 100644
index 0000000000000000000000000000000000000000..43ec3479b6416136aaed24ea1401e554340d6596
--- /dev/null
+++ b/apps/eink-advanced/font8x8_basic.h
@@ -0,0 +1,152 @@
+/** 
+ * 8x8 monochrome bitmap fonts for rendering
+ * Author: Daniel Hepper <daniel@hepper.net>
+ * 
+ * License: Public Domain
+ * 
+ * Based on:
+ * // Summary: font8x8.h
+ * // 8x8 monochrome bitmap fonts for rendering
+ * //
+ * // Author:
+ * //     Marcel Sondaar
+ * //     International Business Machines (public domain VGA fonts)
+ * //
+ * // License:
+ * //     Public Domain
+ * 
+ * Fetched from: http://dimensionalrift.homelinux.net/combuster/mos3/?p=viewsource&file=/modules/gfx/font8_8.asm
+ **/
+
+// Constant: font8x8_basic
+// Contains an 8x8 font map for unicode points U+0000 - U+007F (basic latin)
+char font8x8_basic[128][8] = {
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0000 (nul)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0001
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0002
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0003
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0004
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0005
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0006
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0007
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0008
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0009
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000A
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000B
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000C
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000D
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000E
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000F
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0010
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0011
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0012
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0013
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0014
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0015
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0016
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0017
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0018
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0019
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001A
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001B
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001C
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001D
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001E
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001F
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0020 (space)
+    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
+    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
+    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
+    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
+    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
+    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
+    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
+    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
+    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
+    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
+    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
+    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
+    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
+    { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0030 (0)
+    { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
+    { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
+    { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
+    { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0034 (4)
+    { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
+    { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
+    { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
+    { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
+    { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
+    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
+    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (//)
+    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
+    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
+    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
+    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
+    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
+    { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
+    { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0042 (B)
+    { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
+    { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0044 (D)
+    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
+    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
+    { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
+    { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
+    { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
+    { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
+    { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+004B (K)
+    { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
+    { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
+    { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
+    { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
+    { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
+    { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
+    { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0052 (R)
+    { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
+    { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
+    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
+    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
+    { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
+    { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
+    { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
+    { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+005A (Z)
+    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
+    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
+    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
+    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
+    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`)
+    { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0061 (a)
+    { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0062 (b)
+    { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0063 (c)
+    { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0064 (d)
+    { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0065 (e)
+    { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0066 (f)
+    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0067 (g)
+    { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0068 (h)
+    { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0069 (i)
+    { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+006A (j)
+    { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+006B (k)
+    { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+006C (l)
+    { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+006D (m)
+    { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+006E (n)
+    { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+006F (o)
+    { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0070 (p)
+    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0071 (q)
+    { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0072 (r)
+    { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0073 (s)
+    { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0074 (t)
+    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0075 (u)
+    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0076 (v)
+    { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0077 (w)
+    { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0078 (x)
+    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0079 (y)
+    { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+007A (z)
+    { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({)
+    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+007C (|)
+    { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (})
+    { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007E (~)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}    // U+007F
+};
diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index e1a4f707c16154b2f96efa74ce539f0fbf6fc17f..cf168bde7c23cdc4fdb72768c29c14c4047f8ea7 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -15,6 +15,9 @@
 
 #include "board.h"
 
+//font
+#include "font8x8_basic.h"
+
 // Need pin number for LED
 #define LED0 18
 #define LED1 19
@@ -401,22 +404,38 @@ void insertPixelGrid(int width, int height, int grid[height][width], int xcoord,
     }
 }
 
+//reverse the bits in the char
+unsigned char reverse(unsigned char b){
+    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
+    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
+    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
+    return b;
+}
+
+void writeText(char text[])
+{
+    int numberOfCharacters = sizeof(text)/sizeof(text[0]);
+
+    //loop over each character to be written
+    for(int i = 0; i < numberOfCharacters; i++)
+    {
+        char find = text[i];
+
+        char *bitmap = font8x8_basic[find];
+        //write each row of the character pixels into the picture
+        for(int j = 0; j < 8; j++)
+        {
+            int index = (i) + (50 * j);
+            lab11[index] = reverse(bitmap[j]);
+        }
+        
+    }
+}
+
 int main(void) {
     clearScreen();
 
-    int grid[8][8] = {
-    {0, 0, 1, 1, 1, 1, 0, 0},
-    {0, 1, 0, 0, 0, 0, 1, 0},
-    {0, 1, 0, 0, 0, 0, 1, 0},
-    {0, 1, 0, 0, 0, 0, 1, 0},
-    {0, 1, 0, 0, 0, 0, 1, 0},
-    {0, 0, 1, 1, 1, 1, 0, 0},
-    {0, 0, 1, 0, 0, 0, 0, 0},
-    {0, 1, 0, 0, 0, 0, 0, 0},
-    };
-
-    insertPixelGrid(8, 8, grid, 0, 0);
-    insertPixelGrid(8, 8, grid, 9, 0);
+    writeText("PooP");
 
     // Initialize.
     led_init(LED0);
diff --git a/apps/eink-advanced/writetext.c b/apps/eink-advanced/writetext.c
new file mode 100644
index 0000000000000000000000000000000000000000..28c78d46cf912ae67603df34da240e7a1445c67a
--- /dev/null
+++ b/apps/eink-advanced/writetext.c
@@ -0,0 +1,59 @@
+/*
+static char alphabet[26] = "abcdefghijklmnopqrstuvwxyz ";
+
+static char alphabetPixels[26][13] = {
+    {0x0C, 0x0E, 0x0E, 0x0A, 0x0A, 0x1F, 0x1F, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, },//A
+    {0x1E, 0x13, 0x12, 0x1F, 0x16, 0x12, 0x12, 0x1B, 0x0E, 0x00, 0x00, 0x00, 0x00, },//B
+    {0x1E, 0x12, 0x03, 0x02, 0x01, 0x11, 0x13, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, },//C
+    {0x1E, 0x33, 0x12, 0x22, 0x22, 0x22, 0x32, 0x17, 0x0E, 0x00, 0x00, 0x00, 0x00, },//D
+    {0x3E, 0x02, 0x03, 0x1E, 0x06, 0x02, 0x02, 0x0A, 0x1E, 0x00, 0x00, 0x00, 0x00, },//E
+    {0x3E, 0x02, 0x02, 0x1E, 0x16, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, },//F
+    {0x1E, 0x1A, 0x01, 0x19, 0x11, 0x11, 0x13, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, },//G
+    {0x02, 0x33, 0x22, 0x3F, 0x36, 0x33, 0x12, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, },//H
+    {0x07, 0x03, 0x07, 0x03, 0x03, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, },//I
+    {0x08, 0x18, 0x08, 0x18, 0x08, 0x09, 0x09, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, },//J
+    {0x12, 0x1B, 0x0A, 0x0F, 0x0F, 0x0A, 0x1B, 0x12, 0x22, 0x00, 0x00, 0x00, 0x00, },//K
+    {0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x03, 0x17, 0x1E, 0x00, 0x00, 0x00, 0x00, },//L
+    {0x23, 0x33, 0x33, 0x77, 0x37, 0x3C, 0x2D, 0x2F, 0x08, 0x00, 0x00, 0x00, 0x00, },//M
+    {0x23, 0x23, 0x27, 0x2E, 0x1A, 0x3A, 0x3B, 0x32, 0x20, 0x00, 0x00, 0x00, 0x00, },//N
+    {0x1E, 0x1A, 0x13, 0x11, 0x11, 0x11, 0x13, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, },//O
+    {0x1E, 0x12, 0x33, 0x12, 0x1E, 0x06, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, },//P
+    {0x1E, 0x33, 0x21, 0x21, 0x3F, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },//Q
+    {0x1E, 0x32, 0x23, 0x12, 0x1E, 0x16, 0x12, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, },//R
+    {0x0E, 0x1A, 0x03, 0x06, 0x0C, 0x18, 0x11, 0x1B, 0x0C, 0x00, 0x00, 0x00, 0x00, },//S
+    {0x3F, 0x0E, 0x04, 0x04, 0x0C, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, },//T
+    {0x22, 0x33, 0x22, 0x23, 0x32, 0x33, 0x32, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, },//U
+    {0x31, 0x13, 0x13, 0x0A, 0x0E, 0x0E, 0x0C, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, },//V
+    {0x3D, 0x25, 0x1F, 0x1F, 0x1F, 0x1E, 0x1A, 0x1B, 0x02, 0x00, 0x00, 0x00, 0x00, },//W
+    {0x13, 0x1A, 0x0E, 0x0C, 0x0C, 0x0E, 0x0A, 0x1B, 0x10, 0x00, 0x00, 0x00, 0x00, },//X
+    {0x13, 0x1A, 0x0A, 0x0E, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, },//Y
+    {0x3F, 0x10, 0x08, 0x0C, 0x04, 0x06, 0x02, 0x0F, 0x1F, 0x00, 0x00, 0x00, 0x00, },//Z
+    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },//SPACE
+};
+
+void writeText(char text[])
+{
+    int numberOfCharacters = sizeof(text)/sizeof(text[0]);
+
+    //loop over each character to be written
+    for(int i = 0; i < numberOfCharacters; i++)
+    {
+        char find = text[i];
+
+        //find which array of pixels corresponds to that character
+        const char *ptr = strchr(alphabet, find);
+        if(ptr) {
+            int index = ptr - alphabet;
+
+            char characterBytes[7]; strcpy(characterBytes, alphabetPixels[index]);
+
+            //write each row of the character pixels into the picture
+            for(int j = 0; j < sizeof(characterBytes)/sizeof(characterBytes[0]); j++)
+            {
+                int index = (i) + (50 * j);
+                lab11[index] = characterBytes[j];
+            }
+        }
+    }
+}
+*/
\ No newline at end of file

From 4e5850480f0e0158e5258c4ae96c67767b63b7b5 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Tue, 21 Jun 2016 18:23:37 -0400
Subject: [PATCH] Now writes long strings of characters

---
 apps/eink-advanced/main.c | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index cf168bde7c23cdc4fdb72768c29c14c4047f8ea7..75c929ef3c368445e28c456c7724667ba200d456 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -414,18 +414,19 @@ unsigned char reverse(unsigned char b){
 
 void writeText(char text[])
 {
-    int numberOfCharacters = sizeof(text)/sizeof(text[0]);
+    int numberOfCharacters = strlen(text);
 
     //loop over each character to be written
     for(int i = 0; i < numberOfCharacters; i++)
     {
         char find = text[i];
-
         char *bitmap = font8x8_basic[find];
+        uint8_t line =  (i / 50);
+
         //write each row of the character pixels into the picture
         for(int j = 0; j < 8; j++)
         {
-            int index = (i) + (50 * j);
+            int index = (i) + (50 * j) + (line * 50 * 8);
             lab11[index] = reverse(bitmap[j]);
         }
         
@@ -435,7 +436,7 @@ void writeText(char text[])
 int main(void) {
     clearScreen();
 
-    writeText("PooP");
+    writeText("My beard grows to my toes, I never wears no clothes, I wraps my hair Around my bare, And down the road I goes.");
 
     // Initialize.
     led_init(LED0);

From b1c1ed0985388e131bcde0299faeb49c8ea6d04f Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Tue, 21 Jun 2016 22:31:32 -0400
Subject: [PATCH] Write string of text at exact pixel location

---
 apps/eink-advanced/main.c | 114 ++++++++++++++++++++++++++++++++++++----------
 1 file changed, 89 insertions(+), 25 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 75c929ef3c368445e28c456c7724667ba200d456..e03bf3fff05e1826bf5fb3c80749ff93e119adc2 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -51,6 +51,7 @@ static void spi_init () {
 
 static void wait_for_not_busy () {
     uint8_t found_busy_low = 0;
+    uint8_t count = 0;
     while (1) {
         uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
         if (found_busy_low && pin) {
@@ -59,6 +60,13 @@ static void wait_for_not_busy () {
         if (pin == 0) {
             found_busy_low = 1;
         }
+
+        if(count > 1000)
+        {
+            break;
+        }
+
+        count++;
     }
 
     // Then wait a little longer so we don't violate the T_NS time.
@@ -368,6 +376,14 @@ uint8_t lab11[15000] = {
 130,144,82,9,40,74,128,74,255,255,239,251,126,251,215,245,255,255,255,255,253,255,222,219,237,255,123,127,239,127,223,255,162,0,64,0,16,2,182,202,148,137,0,0,17,32,8,0,32,0,
 };
 
+//reverse the bits in the char
+unsigned char reverse(unsigned char b){
+    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
+    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
+    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
+    return b;
+}
+
 //set pixel value at x and y coordinate
 void setPixel(int x, int y, int on/*1 or 0*/){
     int height = 300;
@@ -378,15 +394,15 @@ void setPixel(int x, int y, int on/*1 or 0*/){
     int bitsIntoByte = 7 - (x % 8);
 
     //turns the nth bit on or off
-    lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte);
+    lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte); //jeremy ruten stack overflow
 }
 
 void clearScreen(){
-    memset(lab11, 0, 15000 * sizeof(lab11[0]));
+    memset(lab11, 0, 15000 * sizeof(uint8_t));
 }
 
 //inserts a grid of pixels into the image - NOTE - coordinate is @ uper left
-void insertPixelGrid(int width, int height, int grid[height][width], int xcoord, int ycoord)
+void insertPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord)
 {
     for(int y = 0; y < height; y++)
     {
@@ -404,44 +420,94 @@ void insertPixelGrid(int width, int height, int grid[height][width], int xcoord,
     }
 }
 
-//reverse the bits in the char
-unsigned char reverse(unsigned char b){
-    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
-    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
-    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
-    return b;
+void writeCharacterAtLocation(char character, int x, int y)
+{
+    uint8_t grid[8][8];
+    char *bitmap = font8x8_basic[character];
+
+    for(int i = 0; i < 8; i++)//loop over each row in the character
+    {
+        uint8_t bits[8];
+        for(int j = 0; j < 8; j++)//loop over each bit in the character
+        {
+            grid[i][j] = (bitmap[i] & (1 << j)) >> j;
+        }
+    }
+
+    insertPixelGrid(8, 8, grid, x, y);
+}
+
+void writeStringAtLocation(char *str, int x, int y)
+{
+    for(int i = 0; i < strlen(str); i++)
+    {
+        if(x + (8 * i) + 8 < 400)
+        {
+            writeCharacterAtLocation(str[i], x + (8*i), y);
+        }
+    }
 }
 
+uint8_t offset = 5;
+
 void writeText(char text[])
 {
     int numberOfCharacters = strlen(text);
+    //uint8_t offset = 0;//used to prevent word wrapping
 
     //loop over each character to be written
     for(int i = 0; i < numberOfCharacters; i++)
     {
-        char find = text[i];
-        char *bitmap = font8x8_basic[find];
-        uint8_t line =  (i / 50);
+        //prevent word wrapping
+        if(text[i] == ' ')
+        {
+            uint8_t wordLength = 0;
+            //find the next word length
+            for(int k = i + 1; k < numberOfCharacters; k++)
+            {
+                if(text[k] == ' ' || k == numberOfCharacters - 1)
+                {
+                    wordLength = k - i;//length of next word
+
+                    if(((i + offset) % 50) + wordLength > 50)//if that word would wrap
+                    {
+                        led_on(LED0);
+                        offset += wordLength;//set the offset to be more
+                        continue;
+                    }
+                }
+            }
+        }
+
+
+        char find = text[i];//character to write
+        char *bitmap = font8x8_basic[find];//bitmap of that character
+        uint8_t line =  ((i+offset) / 50);//which line to write it on
 
         //write each row of the character pixels into the picture
         for(int j = 0; j < 8; j++)
         {
-            int index = (i) + (50 * j) + (line * 50 * 8);
-            lab11[index] = reverse(bitmap[j]);
+            int index = (i + offset) + (50 * j) + (line * 50 * 8);//index of lab11 to place it
+
+            if(index < 15000)//make sure nothing is written beyond the array in memory
+            {
+                //each chunk of 8 pixels is written right to left, so we need to reverse it first
+                lab11[index] = reverse(bitmap[j]);
+            }
         }
         
     }
 }
 
-int main(void) {
-    clearScreen();
-
-    writeText("My beard grows to my toes, I never wears no clothes, I wraps my hair Around my bare, And down the road I goes.");
-
-    // Initialize.
+int main(void) 
+{
     led_init(LED0);
     led_off(LED0);
 
+    clearScreen();
+
+    writeStringAtLocation("hello world! asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf", 90, 90);
+    
     // Setup input for busy
     nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
 
@@ -504,8 +570,10 @@ int main(void) {
     pic[19] = 0;
 
     // Send header
+    //THESE 2 LINES SCREW EVERYTHING UP AND IT FREEZES
     nrf_drv_spi_transfer(&_spi, pic, 20, NULL, 0);
     wait_for_not_busy();
+
     nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
     wait_for_not_busy();
 
@@ -545,7 +613,6 @@ int main(void) {
         wait_for_not_busy();
     }
 
-
     // Actually render the image
     tx[0] = 0x24;
     tx[1] = 0x01;
@@ -558,10 +625,7 @@ int main(void) {
 
 
     nrf_gpio_pin_set(nTC_EN);
-
-    // led_on(LED0);
-
-
+    
     // Enter main loop.
     while (1) {
         sd_app_evt_wait();

From 27117536573a45abfe7485392c6de95d628fd8b3 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Wed, 22 Jun 2016 15:02:00 -0400
Subject: [PATCH] Displays 21x21 qr code

---
 apps/eink-advanced/main.c | 89 +++++++++++++++++++++++++++++++++--------------
 1 file changed, 62 insertions(+), 27 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index e03bf3fff05e1826bf5fb3c80749ff93e119adc2..a15fbcdb452690f74a86a71d836184d860be169d 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -397,6 +397,20 @@ void setPixel(int x, int y, int on/*1 or 0*/){
     lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte); //jeremy ruten stack overflow
 }
 
+//sets a block of 8x8 pixels on or off. x < 50 & y < 38
+void setBlock(int x, int y, int on)
+{
+    for(int i = 0; i < 8; i++)
+    {
+        if(on == 1){
+            lab11[x + (50 * i) + (50 * y * 8)] = 255;
+        }else{
+            lab11[x + (50 * i) + (50 * y * 8)] = 0;
+        }
+        
+    }
+}
+
 void clearScreen(){
     memset(lab11, 0, 15000 * sizeof(uint8_t));
 }
@@ -420,6 +434,25 @@ void insertPixelGrid(int width, int height, uint8_t grid[height][width], int xco
     }
 }
 
+//inserts a grid of pixels, but much larger
+void insertBigPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord)
+{
+    for(int y = 0; y < height; y++)
+    {
+        for(int x = 0; x <width; x++)
+        {
+            if(grid[y][x] == 1)
+            {
+                setBlock(x, y, 1);
+            }
+            else
+            {
+                setBlock(x, y, 0);
+            }
+        }
+    }
+}
+
 void writeCharacterAtLocation(char character, int x, int y)
 {
     uint8_t grid[8][8];
@@ -448,8 +481,6 @@ void writeStringAtLocation(char *str, int x, int y)
     }
 }
 
-uint8_t offset = 5;
-
 void writeText(char text[])
 {
     int numberOfCharacters = strlen(text);
@@ -458,36 +489,14 @@ void writeText(char text[])
     //loop over each character to be written
     for(int i = 0; i < numberOfCharacters; i++)
     {
-        //prevent word wrapping
-        if(text[i] == ' ')
-        {
-            uint8_t wordLength = 0;
-            //find the next word length
-            for(int k = i + 1; k < numberOfCharacters; k++)
-            {
-                if(text[k] == ' ' || k == numberOfCharacters - 1)
-                {
-                    wordLength = k - i;//length of next word
-
-                    if(((i + offset) % 50) + wordLength > 50)//if that word would wrap
-                    {
-                        led_on(LED0);
-                        offset += wordLength;//set the offset to be more
-                        continue;
-                    }
-                }
-            }
-        }
-
-
         char find = text[i];//character to write
         char *bitmap = font8x8_basic[find];//bitmap of that character
-        uint8_t line =  ((i+offset) / 50);//which line to write it on
+        uint8_t line =  ((i) / 50);//which line to write it on
 
         //write each row of the character pixels into the picture
         for(int j = 0; j < 8; j++)
         {
-            int index = (i + offset) + (50 * j) + (line * 50 * 8);//index of lab11 to place it
+            int index = (i) + (50 * j) + (line * 50 * 8);//index of lab11 to place it
 
             if(index < 15000)//make sure nothing is written beyond the array in memory
             {
@@ -506,8 +515,34 @@ int main(void)
 
     clearScreen();
 
-    writeStringAtLocation("hello world! asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf", 90, 90);
+    writeStringAtLocation("<- should be umich.edu", 185, 60);
+
+    uint8_t qrCode[21][21] = {
+        {1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1},
+        {1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1},
+        {1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1},
+        {1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1},
+        {1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1},
+        {1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1},
+        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
+        {0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
+        {1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0},
+        {0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0},
+        {1,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0},
+        {1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,0},
+        {1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0},
+        {0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,1},
+        {1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0},
+        {1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1},
+        {1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0},
+        {1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0},
+        {1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1},
+        {1,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0},
+        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0}
+    };
     
+    insertBigPixelGrid(21, 21, qrCode, 14, 8);
+
     // Setup input for busy
     nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
 

From 4a78a89e1b2eb256dc95c81b217d1b25efcc4c62 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Wed, 22 Jun 2016 17:22:31 -0400
Subject: [PATCH] Scale graphics

---
 apps/eink-advanced/main.c | 42 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 41 insertions(+), 1 deletion(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index a15fbcdb452690f74a86a71d836184d860be169d..ff8d7814f1d05c676e14737951bd0c1dec1f9679 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -515,7 +515,10 @@ int main(void)
 
     clearScreen();
 
-    writeStringAtLocation("<- should be umich.edu", 185, 60);
+    /*
+    writeStringAtLocation("<- umich.edu", 185, 60);
+
+    writeStringAtLocation("YAY IT WORKS!", 130, 200);
 
     uint8_t qrCode[21][21] = {
         {1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1},
@@ -542,6 +545,43 @@ int main(void)
     };
     
     insertBigPixelGrid(21, 21, qrCode, 14, 8);
+    */
+
+    //try scaling a graphic
+    uint8_t graphic[8][8] = {
+        {0,0,0,0,0,0,0,0},
+        {0,0,1,0,0,1,0,0},
+        {0,0,0,0,0,0,0,0},
+        {0,0,1,1,1,1,0,0},
+        {0,1,0,0,0,0,1,0},
+        {0,0,0,0,0,0,0,0},
+        {0,0,0,0,0,0,0,0},
+        {0,0,0,0,0,0,0,0},
+    };
+
+    uint8_t scaledGraphic[16][16];
+
+    for(int y = 0; y < 16; y++)
+    {
+        for(int x = 0; x < 16; x++)
+        {
+            scaledGraphic[y][x] = graphic[y/2][x/2];
+        }
+    }
+
+    uint8_t biggestGraphic[32][32];
+
+    for(int y = 0; y < 32; y++)
+    {
+        for(int x = 0; x < 32; x++)
+        {
+            biggestGraphic[y][x] = graphic[y/4][x/4];
+        }
+    }
+
+    insertPixelGrid(8, 8, graphic, 0, 0);
+    insertPixelGrid(16, 16, scaledGraphic, 10, 0);
+    insertPixelGrid(32, 32, biggestGraphic, 28, 0);
 
     // Setup input for busy
     nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);

From ab38d3bccbaccaa598ea863fffda3c89b36ad4a7 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Wed, 22 Jun 2016 17:49:05 -0400
Subject: [PATCH] Scales text correctly

---
 apps/eink-advanced/main.c | 64 ++++++++++++++++++-----------------------------
 1 file changed, 24 insertions(+), 40 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index ff8d7814f1d05c676e14737951bd0c1dec1f9679..82626484ca4a1ffefef697ccc88bd3d6e74c0728 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -453,7 +453,7 @@ void insertBigPixelGrid(int width, int height, uint8_t grid[height][width], int
     }
 }
 
-void writeCharacterAtLocation(char character, int x, int y)
+void writeCharacterAtLocation(char character, int xcoord, int ycoord, uint8_t scale)
 {
     uint8_t grid[8][8];
     char *bitmap = font8x8_basic[character];
@@ -467,16 +467,34 @@ void writeCharacterAtLocation(char character, int x, int y)
         }
     }
 
-    insertPixelGrid(8, 8, grid, x, y);
+    //scale the character by the scale multiplier
+    if(scale != 1)
+    {
+        //uint8_t scaledGraphic[8 * scale][8 * scale];
+
+        for(int y = 0; y < 8 * scale; y++)
+        {
+            for(int x = 0; x < 8 * scale; x++)
+            {
+                //scaledGraphic[y][x] = grid[y/scale][x/scale];
+                setPixel(xcoord + x, ycoord + y, grid[y/scale][x/scale]);
+            }
+        }
+
+        //insertPixelGrid(8 * scale, 8 * scale, scaledGraphic, x, y);
+        return;
+    }
+
+    insertPixelGrid(8, 8, grid, xcoord, ycoord);
 }
 
-void writeStringAtLocation(char *str, int x, int y)
+void writeStringAtLocation(char *str, int x, int y, int scale)
 {
     for(int i = 0; i < strlen(str); i++)
     {
-        if(x + (8 * i) + 8 < 400)
+        if(x + (8 * i * scale) + 8*scale < 400)
         {
-            writeCharacterAtLocation(str[i], x + (8*i), y);
+            writeCharacterAtLocation(str[i], x + (8*i * scale), y, scale);
         }
     }
 }
@@ -547,41 +565,7 @@ int main(void)
     insertBigPixelGrid(21, 21, qrCode, 14, 8);
     */
 
-    //try scaling a graphic
-    uint8_t graphic[8][8] = {
-        {0,0,0,0,0,0,0,0},
-        {0,0,1,0,0,1,0,0},
-        {0,0,0,0,0,0,0,0},
-        {0,0,1,1,1,1,0,0},
-        {0,1,0,0,0,0,1,0},
-        {0,0,0,0,0,0,0,0},
-        {0,0,0,0,0,0,0,0},
-        {0,0,0,0,0,0,0,0},
-    };
-
-    uint8_t scaledGraphic[16][16];
-
-    for(int y = 0; y < 16; y++)
-    {
-        for(int x = 0; x < 16; x++)
-        {
-            scaledGraphic[y][x] = graphic[y/2][x/2];
-        }
-    }
-
-    uint8_t biggestGraphic[32][32];
-
-    for(int y = 0; y < 32; y++)
-    {
-        for(int x = 0; x < 32; x++)
-        {
-            biggestGraphic[y][x] = graphic[y/4][x/4];
-        }
-    }
-
-    insertPixelGrid(8, 8, graphic, 0, 0);
-    insertPixelGrid(16, 16, scaledGraphic, 10, 0);
-    insertPixelGrid(32, 32, biggestGraphic, 28, 0);
+    writeStringAtLocation("Hello", 0, 0, 20);
 
     // Setup input for busy
     nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);

From 98928c920c559f5ed0588eea86ffcaaef1c82f00 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Wed, 22 Jun 2016 18:25:39 -0400
Subject: [PATCH] cleaned up code

---
 apps/eink-advanced/main.c | 177 +++++++++++-----------------------------------
 1 file changed, 40 insertions(+), 137 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 82626484ca4a1ffefef697ccc88bd3d6e74c0728..868c8715107125f0cdf67aa9804d74409605c197 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -73,7 +73,7 @@ static void wait_for_not_busy () {
     nrf_delay_us(5);
 }
 
-uint8_t lab11[15000] = {
+uint8_t screen[15000] = {
 255,253,255,255,255,255,255,255,251,127,255,255,127,255,255,253,0,0,9,127,255,127,255,111,127,127,247,191,255,255,255,255,255,255,255,255,255,255,255,191,255,192,0,0,0,0,0,0,0,0,
 255,183,175,91,250,181,106,170,173,182,247,251,171,118,255,190,170,74,164,55,245,213,117,181,213,213,93,106,255,255,251,182,219,109,182,182,182,239,189,245,111,128,0,0,0,0,0,0,0,0,
 253,253,255,255,111,255,255,255,238,255,127,190,223,223,187,253,0,0,18,253,190,182,223,251,110,190,239,219,127,255,111,255,254,254,255,255,239,186,235,111,253,128,0,0,0,0,0,0,0,0,
@@ -376,7 +376,9 @@ uint8_t lab11[15000] = {
 130,144,82,9,40,74,128,74,255,255,239,251,126,251,215,245,255,255,255,255,253,255,222,219,237,255,123,127,239,127,223,255,162,0,64,0,16,2,182,202,148,137,0,0,17,32,8,0,32,0,
 };
 
-//reverse the bits in the char
+//reverse the bits in a char
+//each element of screen is 8 bits, each representing a pixel
+//each set of 8 is written backwards, so they need to be reversed first
 unsigned char reverse(unsigned char b){
     b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
     b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
@@ -386,146 +388,78 @@ unsigned char reverse(unsigned char b){
 
 //set pixel value at x and y coordinate
 void setPixel(int x, int y, int on/*1 or 0*/){
-    int height = 300;
-    int width = 400;
-
-    //index in lab11 array
+    //index in screen array
     int index = (y * 50) + ((50 * x)/400);
     int bitsIntoByte = 7 - (x % 8);
 
     //turns the nth bit on or off
-    lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte); //jeremy ruten stack overflow
-}
-
-//sets a block of 8x8 pixels on or off. x < 50 & y < 38
-void setBlock(int x, int y, int on)
-{
-    for(int i = 0; i < 8; i++)
-    {
-        if(on == 1){
-            lab11[x + (50 * i) + (50 * y * 8)] = 255;
-        }else{
-            lab11[x + (50 * i) + (50 * y * 8)] = 0;
-        }
-        
-    }
+    screen[index] ^= (-on ^ screen[index]) & (1 << bitsIntoByte); //jeremy ruten stack overflow
 }
 
+//clears the screen by setting all elements to 0
 void clearScreen(){
-    memset(lab11, 0, 15000 * sizeof(uint8_t));
+    memset(screen, 0, 15000 * sizeof(uint8_t));
 }
 
 //inserts a grid of pixels into the image - NOTE - coordinate is @ uper left
-void insertPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord)
-{
-    for(int y = 0; y < height; y++)
-    {
-        for(int x = 0; x < width; x++)
-        {
-            if(grid[y][x] == 1)
-            {
-                setPixel(x + xcoord, y + ycoord, 1);
-            }
-            else
-            {
-                setPixel(x + xcoord, y + ycoord, 0);
-            }
-        }
-    }
-}
-
-//inserts a grid of pixels, but much larger
-void insertBigPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord)
-{
-    for(int y = 0; y < height; y++)
-    {
-        for(int x = 0; x <width; x++)
-        {
-            if(grid[y][x] == 1)
-            {
-                setBlock(x, y, 1);
+//the grid of pixels is in the form of 0s and 1s, a 0 representing pixel off and 1 representing pixel on
+void insertPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord){
+    for(int y = 0; y < height; y++){
+        for(int x = 0; x < width; x++){
+            if(grid[y][x] == 1){
+                setPixel(x + xcoord, y + ycoord, 1);//pixel on
             }
-            else
-            {
-                setBlock(x, y, 0);
+            else{
+                setPixel(x + xcoord, y + ycoord, 0);//pixel off
             }
         }
     }
 }
 
-void writeCharacterAtLocation(char character, int xcoord, int ycoord, uint8_t scale)
-{
+//writes a single character at (x,y) with a given scale
+//a scale of 1 produces an 8x8 pixel character
+//each character in font8x8_basic.h is written in 8 lines of 8 hex bytes where each bit of the 8 bytes represents a single pixel
+void writeCharacterAtLocation(char character, int xcoord, int ycoord, uint8_t scale){
+    //convert the 8 hex bytes from font8x8_basic.h into an 8x8 pixel array
     uint8_t grid[8][8];
-    char *bitmap = font8x8_basic[character];
+    char *bitmap = font8x8_basic[character];//selects array of 8 hex bytes from font8x8_basic.h based on character code
 
-    for(int i = 0; i < 8; i++)//loop over each row in the character
-    {
-        uint8_t bits[8];
-        for(int j = 0; j < 8; j++)//loop over each bit in the character
-        {
+    //loop over each row in the character
+    for(int i = 0; i < 8; i++){
+        //loop over each bit in the character
+        for(int j = 0; j < 8; j++){
+            //select the jth bit from the hex byte to add to the 8x8 pixel array
             grid[i][j] = (bitmap[i] & (1 << j)) >> j;
         }
     }
 
     //scale the character by the scale multiplier
-    if(scale != 1)
-    {
-        //uint8_t scaledGraphic[8 * scale][8 * scale];
-
-        for(int y = 0; y < 8 * scale; y++)
-        {
-            for(int x = 0; x < 8 * scale; x++)
-            {
-                //scaledGraphic[y][x] = grid[y/scale][x/scale];
+    if(scale != 1){
+        //loop over a scaled version of the character
+        for(int y = 0; y < 8 * scale; y++){
+            for(int x = 0; x < 8 * scale; x++){
                 setPixel(xcoord + x, ycoord + y, grid[y/scale][x/scale]);
             }
         }
 
-        //insertPixelGrid(8 * scale, 8 * scale, scaledGraphic, x, y);
         return;
     }
 
     insertPixelGrid(8, 8, grid, xcoord, ycoord);
 }
 
-void writeStringAtLocation(char *str, int x, int y, int scale)
-{
-    for(int i = 0; i < strlen(str); i++)
-    {
-        if(x + (8 * i * scale) + 8*scale < 400)
-        {
+//writes a string of ascii characters at an x,y coordinate with a given scale
+void writeStringAtLocation(char *str, int x, int y, int scale){
+    //loop over each character in the string
+    for(int i = 0; i < strlen(str); i++){
+        //if the character won't be written off the edge of the screen
+        if(x + (8 * i * scale) + 8*scale < 400){
+            //write the character that the location after the previous characters
             writeCharacterAtLocation(str[i], x + (8*i * scale), y, scale);
         }
     }
 }
 
-void writeText(char text[])
-{
-    int numberOfCharacters = strlen(text);
-    //uint8_t offset = 0;//used to prevent word wrapping
-
-    //loop over each character to be written
-    for(int i = 0; i < numberOfCharacters; i++)
-    {
-        char find = text[i];//character to write
-        char *bitmap = font8x8_basic[find];//bitmap of that character
-        uint8_t line =  ((i) / 50);//which line to write it on
-
-        //write each row of the character pixels into the picture
-        for(int j = 0; j < 8; j++)
-        {
-            int index = (i) + (50 * j) + (line * 50 * 8);//index of lab11 to place it
-
-            if(index < 15000)//make sure nothing is written beyond the array in memory
-            {
-                //each chunk of 8 pixels is written right to left, so we need to reverse it first
-                lab11[index] = reverse(bitmap[j]);
-            }
-        }
-        
-    }
-}
-
 int main(void) 
 {
     led_init(LED0);
@@ -533,38 +467,7 @@ int main(void)
 
     clearScreen();
 
-    /*
-    writeStringAtLocation("<- umich.edu", 185, 60);
-
-    writeStringAtLocation("YAY IT WORKS!", 130, 200);
-
-    uint8_t qrCode[21][21] = {
-        {1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1},
-        {1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1},
-        {1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1},
-        {1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1},
-        {1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1},
-        {1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1},
-        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
-        {0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
-        {1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0},
-        {0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0},
-        {1,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0},
-        {1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,0},
-        {1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0},
-        {0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,1},
-        {1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0},
-        {1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1},
-        {1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0},
-        {1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0},
-        {1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1},
-        {1,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0},
-        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0}
-    };
-    
-    insertBigPixelGrid(21, 21, qrCode, 14, 8);
-    */
-
+    //write the string "Hello" at x=0 y=0 and scale of 20x
     writeStringAtLocation("Hello", 0, 0, 20);
 
     // Setup input for busy
@@ -662,7 +565,7 @@ int main(void)
     // display an image
     pic[3] = 250;
     for (i=0; i<60; i++) {
-        memcpy(pic+4, lab11+(i*250), 250); // Lab11 logo
+        memcpy(pic+4, screen+(i*250), 250); // screen logo
         //memset(pic+4, 0xFF, 250); // Black screen
         //memset(pic+4, 0x00, 250); // White screen
 

From 5f45ddfc9474429b4b607552c444904bd99ef98a Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Thu, 23 Jun 2016 18:16:37 -0400
Subject: [PATCH] generates and prints qr codes

---
 apps/eink-advanced/Makefile                     |    4 +
 apps/eink-advanced/bitstream.c                  |  232 ++++
 apps/eink-advanced/libqrencode/bitstream.c      |  232 ++++
 apps/eink-advanced/libqrencode/bitstream.h      |   43 +
 apps/eink-advanced/libqrencode/mask.c           |  357 +++++
 apps/eink-advanced/libqrencode/mask.h           |   38 +
 apps/eink-advanced/libqrencode/mmask.c          |  177 +++
 apps/eink-advanced/libqrencode/mmask.h          |   34 +
 apps/eink-advanced/libqrencode/mqrspec.c        |  232 ++++
 apps/eink-advanced/libqrencode/mqrspec.h        |  152 +++
 apps/eink-advanced/libqrencode/qrencode.c       |  884 ++++++++++++
 apps/eink-advanced/libqrencode/qrencode_inner.h |   88 ++
 apps/eink-advanced/libqrencode/qrinput.c        | 1628 +++++++++++++++++++++++
 apps/eink-advanced/libqrencode/qrinput.h        |  123 ++
 apps/eink-advanced/libqrencode/qrspec.c         |  514 +++++++
 apps/eink-advanced/libqrencode/qrspec.h         |  174 +++
 apps/eink-advanced/libqrencode/rsecc.c          |  149 +++
 apps/eink-advanced/libqrencode/rsecc.h          |   31 +
 apps/eink-advanced/libqrencode/split.c          |  324 +++++
 apps/eink-advanced/libqrencode/split.h          |   47 +
 apps/eink-advanced/loopmain.c                   |  605 +++++++++
 apps/eink-advanced/main.c                       |   87 +-
 apps/eink-advanced/mask.c                       |  357 +++++
 apps/eink-advanced/mmask.c                      |  177 +++
 apps/eink-advanced/mqrspec.c                    |  232 ++++
 apps/eink-advanced/qrcode.c                     |   65 +
 apps/eink-advanced/qrencode.c                   |  886 ++++++++++++
 apps/eink-advanced/qrencode.h                   |  559 ++++++++
 apps/eink-advanced/qrinput.c                    | 1628 +++++++++++++++++++++++
 apps/eink-advanced/qrspec.c                     |  514 +++++++
 apps/eink-advanced/rsecc.c                      |  149 +++
 apps/eink-advanced/split.c                      |  324 +++++
 apps/eink-advanced/writetext.c                  |   27 +
 33 files changed, 11064 insertions(+), 9 deletions(-)

diff --git a/apps/eink-advanced/Makefile b/apps/eink-advanced/Makefile
index 62e09141017d29ba4108f6e0d8e1c3eee3888f5e..bbe06def0a20563e062fa43298788cfef497bae4 100644
--- a/apps/eink-advanced/Makefile
+++ b/apps/eink-advanced/Makefile
@@ -1,6 +1,7 @@
 PROJECT_NAME = $(shell basename "$(realpath ./)")
 
 APPLICATION_SRCS = $(notdir $(wildcard ./*.c))
+
 APPLICATION_SRCS += softdevice_handler.c
 APPLICATION_SRCS += ble_advdata.c
 APPLICATION_SRCS += ble_conn_params.c
@@ -18,10 +19,13 @@ APPLICATION_SRCS += nrf_delay.c
 
 NRF_BASE_PATH ?= ../..
 LIBRARY_PATHS += . $(NRF_BASE_PATH)/devices ../../include
+LIBRARY_PATHS += ./libqrencode
 SOURCE_PATHS += $(NRF_BASE_PATH)/devices ../../src
 
 SOFTDEVICE_MODEL = s130
 RAM_KB = 32
 
+CFLAGS += -D__STATIC=''
+LDFLAGS += --specs=nano.specs
 
 include $(NRF_BASE_PATH)/make/Makefile
diff --git a/apps/eink-advanced/bitstream.c b/apps/eink-advanced/bitstream.c
new file mode 100644
index 0000000000000000000000000000000000000000..9d5fc90d67630e74fa59f02d5d19573a47d56700
--- /dev/null
+++ b/apps/eink-advanced/bitstream.c
@@ -0,0 +1,232 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Binary sequence class.
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "bitstream.h"
+
+#define DEFAULT_BUFSIZE (128)
+
+BitStream *BitStream_new(void)
+{
+	BitStream *bstream;
+
+	bstream = (BitStream *)malloc(sizeof(BitStream));
+	if(bstream == NULL) return NULL;
+
+	bstream->length = 0;
+	bstream->data = (unsigned char *)malloc(DEFAULT_BUFSIZE);
+	if(bstream->data == NULL) {
+		free(bstream);
+		return NULL;
+	}
+	bstream->datasize = DEFAULT_BUFSIZE;
+
+	return bstream;
+}
+
+#ifdef WITH_TESTS
+BitStream *BitStream_newWithBits(int size, unsigned char *bits)
+{
+	BitStream *bstream;
+
+	if(size < 0) return NULL;
+	if(size == 0) return BitStream_new();
+
+	bstream = (BitStream *)malloc(sizeof(BitStream));
+	if(bstream == NULL) return NULL;
+
+	bstream->data = (unsigned char *)malloc(size);
+	if(bstream->data == NULL) {
+		free(bstream);
+		return NULL;
+	}
+
+	bstream->length = size;
+	bstream->datasize = size;
+	memcpy(bstream->data, bits, size);
+
+	return bstream;
+}
+#endif
+
+static int BitStream_expand(BitStream *bstream)
+{
+	unsigned char *data;
+
+	data = (unsigned char *)realloc(bstream->data, bstream->datasize * 2);
+	if(data == NULL) {
+		return -1;
+	}
+
+	bstream->data = data;
+	bstream->datasize *= 2;
+
+	return 0;
+}
+
+static void BitStream_writeNum(unsigned char *dest, int bits, unsigned int num)
+{
+	unsigned int mask;
+	int i;
+	unsigned char *p;
+
+	p = dest;
+	mask = 1 << (bits - 1);
+	for(i = 0; i < bits; i++) {
+		if(num & mask) {
+			*p = 1;
+		} else {
+			*p = 0;
+		}
+		p++;
+		mask = mask >> 1;
+	}
+}
+
+static void BitStream_writeBytes(unsigned char *dest, int size, unsigned char *data)
+{
+	unsigned char mask;
+	int i, j;
+	unsigned char *p;
+
+	p = dest;
+	for(i = 0; i < size; i++) {
+		mask = 0x80;
+		for(j = 0; j < 8; j++) {
+			if(data[i] & mask) {
+				*p = 1;
+			} else {
+				*p = 0;
+			}
+			p++;
+			mask = mask >> 1;
+		}
+	}
+}
+
+int BitStream_append(BitStream *bstream, BitStream *arg)
+{
+	int ret;
+
+	if(arg == NULL) {
+		return -1;
+	}
+	if(arg->length == 0) {
+		return 0;
+	}
+
+	while(bstream->length + arg->length > bstream->datasize) {
+		ret = BitStream_expand(bstream);
+		if(ret < 0) return ret;
+	}
+
+	memcpy(bstream->data + bstream->length, arg->data, arg->length);
+	bstream->length += arg->length;
+
+	return 0;
+}
+
+int BitStream_appendNum(BitStream *bstream, int bits, unsigned int num)
+{
+	int ret;
+
+	if(bits == 0) return 0;
+
+	while(bstream->datasize - bstream->length < bits) {
+		ret = BitStream_expand(bstream);
+		if(ret < 0) return ret;
+	}
+	BitStream_writeNum(bstream->data + bstream->length, bits, num);
+	bstream->length += bits;
+
+	return 0;
+}
+
+int BitStream_appendBytes(BitStream *bstream, int size, unsigned char *data)
+{
+	int ret;
+
+	if(size == 0) return 0;
+
+	while(bstream->datasize - bstream->length < size * 8) {
+		ret = BitStream_expand(bstream);
+		if(ret < 0) return ret;
+	}
+	BitStream_writeBytes(bstream->data + bstream->length, size, data);
+	bstream->length += size * 8;
+
+	return 0;
+}
+
+unsigned char *BitStream_toByte(BitStream *bstream)
+{
+	int i, j, size, bytes, oddbits;
+	unsigned char *data, v;
+	unsigned char *p;
+
+	size = BitStream_size(bstream);
+	if(size == 0) {
+		return NULL;
+	}
+	data = (unsigned char *)malloc((size + 7) / 8);
+	if(data == NULL) {
+		return NULL;
+	}
+
+	bytes = size  / 8;
+
+	p = bstream->data;
+	for(i = 0; i < bytes; i++) {
+		v = 0;
+		for(j = 0; j < 8; j++) {
+			v = v << 1;
+			v |= *p;
+			p++;
+		}
+		data[i] = v;
+	}
+	oddbits = size & 7;
+	if(oddbits > 0) {
+		v = 0;
+		for(j = 0; j < oddbits; j++) {
+			v = v << 1;
+			v |= *p;
+			p++;
+		}
+		data[bytes] = v << (8 - oddbits);
+	}
+
+	return data;
+}
+
+void BitStream_free(BitStream *bstream)
+{
+	if(bstream != NULL) {
+		free(bstream->data);
+		free(bstream);
+	}
+}
diff --git a/apps/eink-advanced/libqrencode/bitstream.c b/apps/eink-advanced/libqrencode/bitstream.c
new file mode 100644
index 0000000000000000000000000000000000000000..9d5fc90d67630e74fa59f02d5d19573a47d56700
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/bitstream.c
@@ -0,0 +1,232 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Binary sequence class.
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "bitstream.h"
+
+#define DEFAULT_BUFSIZE (128)
+
+BitStream *BitStream_new(void)
+{
+	BitStream *bstream;
+
+	bstream = (BitStream *)malloc(sizeof(BitStream));
+	if(bstream == NULL) return NULL;
+
+	bstream->length = 0;
+	bstream->data = (unsigned char *)malloc(DEFAULT_BUFSIZE);
+	if(bstream->data == NULL) {
+		free(bstream);
+		return NULL;
+	}
+	bstream->datasize = DEFAULT_BUFSIZE;
+
+	return bstream;
+}
+
+#ifdef WITH_TESTS
+BitStream *BitStream_newWithBits(int size, unsigned char *bits)
+{
+	BitStream *bstream;
+
+	if(size < 0) return NULL;
+	if(size == 0) return BitStream_new();
+
+	bstream = (BitStream *)malloc(sizeof(BitStream));
+	if(bstream == NULL) return NULL;
+
+	bstream->data = (unsigned char *)malloc(size);
+	if(bstream->data == NULL) {
+		free(bstream);
+		return NULL;
+	}
+
+	bstream->length = size;
+	bstream->datasize = size;
+	memcpy(bstream->data, bits, size);
+
+	return bstream;
+}
+#endif
+
+static int BitStream_expand(BitStream *bstream)
+{
+	unsigned char *data;
+
+	data = (unsigned char *)realloc(bstream->data, bstream->datasize * 2);
+	if(data == NULL) {
+		return -1;
+	}
+
+	bstream->data = data;
+	bstream->datasize *= 2;
+
+	return 0;
+}
+
+static void BitStream_writeNum(unsigned char *dest, int bits, unsigned int num)
+{
+	unsigned int mask;
+	int i;
+	unsigned char *p;
+
+	p = dest;
+	mask = 1 << (bits - 1);
+	for(i = 0; i < bits; i++) {
+		if(num & mask) {
+			*p = 1;
+		} else {
+			*p = 0;
+		}
+		p++;
+		mask = mask >> 1;
+	}
+}
+
+static void BitStream_writeBytes(unsigned char *dest, int size, unsigned char *data)
+{
+	unsigned char mask;
+	int i, j;
+	unsigned char *p;
+
+	p = dest;
+	for(i = 0; i < size; i++) {
+		mask = 0x80;
+		for(j = 0; j < 8; j++) {
+			if(data[i] & mask) {
+				*p = 1;
+			} else {
+				*p = 0;
+			}
+			p++;
+			mask = mask >> 1;
+		}
+	}
+}
+
+int BitStream_append(BitStream *bstream, BitStream *arg)
+{
+	int ret;
+
+	if(arg == NULL) {
+		return -1;
+	}
+	if(arg->length == 0) {
+		return 0;
+	}
+
+	while(bstream->length + arg->length > bstream->datasize) {
+		ret = BitStream_expand(bstream);
+		if(ret < 0) return ret;
+	}
+
+	memcpy(bstream->data + bstream->length, arg->data, arg->length);
+	bstream->length += arg->length;
+
+	return 0;
+}
+
+int BitStream_appendNum(BitStream *bstream, int bits, unsigned int num)
+{
+	int ret;
+
+	if(bits == 0) return 0;
+
+	while(bstream->datasize - bstream->length < bits) {
+		ret = BitStream_expand(bstream);
+		if(ret < 0) return ret;
+	}
+	BitStream_writeNum(bstream->data + bstream->length, bits, num);
+	bstream->length += bits;
+
+	return 0;
+}
+
+int BitStream_appendBytes(BitStream *bstream, int size, unsigned char *data)
+{
+	int ret;
+
+	if(size == 0) return 0;
+
+	while(bstream->datasize - bstream->length < size * 8) {
+		ret = BitStream_expand(bstream);
+		if(ret < 0) return ret;
+	}
+	BitStream_writeBytes(bstream->data + bstream->length, size, data);
+	bstream->length += size * 8;
+
+	return 0;
+}
+
+unsigned char *BitStream_toByte(BitStream *bstream)
+{
+	int i, j, size, bytes, oddbits;
+	unsigned char *data, v;
+	unsigned char *p;
+
+	size = BitStream_size(bstream);
+	if(size == 0) {
+		return NULL;
+	}
+	data = (unsigned char *)malloc((size + 7) / 8);
+	if(data == NULL) {
+		return NULL;
+	}
+
+	bytes = size  / 8;
+
+	p = bstream->data;
+	for(i = 0; i < bytes; i++) {
+		v = 0;
+		for(j = 0; j < 8; j++) {
+			v = v << 1;
+			v |= *p;
+			p++;
+		}
+		data[i] = v;
+	}
+	oddbits = size & 7;
+	if(oddbits > 0) {
+		v = 0;
+		for(j = 0; j < oddbits; j++) {
+			v = v << 1;
+			v |= *p;
+			p++;
+		}
+		data[bytes] = v << (8 - oddbits);
+	}
+
+	return data;
+}
+
+void BitStream_free(BitStream *bstream)
+{
+	if(bstream != NULL) {
+		free(bstream->data);
+		free(bstream);
+	}
+}
diff --git a/apps/eink-advanced/libqrencode/bitstream.h b/apps/eink-advanced/libqrencode/bitstream.h
new file mode 100644
index 0000000000000000000000000000000000000000..ce4d7e0e5db8eb0088d6dc2000648ca58940806f
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/bitstream.h
@@ -0,0 +1,43 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Binary sequence class.
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __BITSTREAM_H__
+#define __BITSTREAM_H__
+
+typedef struct {
+	int length;
+	unsigned char *data;
+	int datasize;
+} BitStream;
+
+extern BitStream *BitStream_new(void);
+#ifdef WITH_TESTS
+extern BitStream *BitStream_newWithBits(int size, unsigned char *bits);
+#endif
+extern int BitStream_append(BitStream *bstream, BitStream *arg);
+extern int BitStream_appendNum(BitStream *bstream, int bits, unsigned int num);
+extern int BitStream_appendBytes(BitStream *bstream, int size, unsigned char *data);
+#define BitStream_size(__bstream__) (__bstream__->length)
+#define BitStream_reset(__bstream__) (__bstream__->length = 0)
+extern unsigned char *BitStream_toByte(BitStream *bstream);
+extern void BitStream_free(BitStream *bstream);
+
+#endif /* __BITSTREAM_H__ */
diff --git a/apps/eink-advanced/libqrencode/mask.c b/apps/eink-advanced/libqrencode/mask.c
new file mode 100644
index 0000000000000000000000000000000000000000..1033b58e3c6cff693230ebee2377fb6c18c079f9
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/mask.c
@@ -0,0 +1,357 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Masking.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "qrspec.h"
+#include "mask.h"
+
+__STATIC int Mask_writeFormatInformation(int width, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned int format;
+	unsigned char v;
+	int i;
+	int blacks = 0;
+
+	format = QRspec_getFormatInfo(mask, level);
+
+	for(i = 0; i < 8; i++) {
+		if(format & 1) {
+			blacks += 2;
+			v = 0x85;
+		} else {
+			v = 0x84;
+		}
+		frame[width * 8 + width - 1 - i] = v;
+		if(i < 6) {
+			frame[width * i + 8] = v;
+		} else {
+			frame[width * (i + 1) + 8] = v;
+		}
+		format= format >> 1;
+	}
+	for(i = 0; i < 7; i++) {
+		if(format & 1) {
+			blacks += 2;
+			v = 0x85;
+		} else {
+			v = 0x84;
+		}
+		frame[width * (width - 7 + i) + 8] = v;
+		if(i == 0) {
+			frame[width * 8 + 7] = v;
+		} else {
+			frame[width * 8 + 6 - i] = v;
+		}
+		format= format >> 1;
+	}
+
+	return blacks;
+}
+
+/**
+ * Demerit coefficients.
+ * See Section 8.8.2, pp.45, JIS X0510:2004.
+ */
+#define N1 (3)
+#define N2 (3)
+#define N3 (40)
+#define N4 (10)
+
+#define MASKMAKER(__exp__) \
+	int x, y;\
+	int b = 0;\
+\
+	for(y = 0; y < width; y++) {\
+		for(x = 0; x < width; x++) {\
+			if(*s & 0x80) {\
+				*d = *s;\
+			} else {\
+				*d = *s ^ ((__exp__) == 0);\
+			}\
+			b += (int)(*d & 1);\
+			s++; d++;\
+		}\
+	}\
+	return b;
+
+static int Mask_mask0(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((x+y)&1)
+}
+
+static int Mask_mask1(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(y&1)
+}
+
+static int Mask_mask2(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(x%3)
+}
+
+static int Mask_mask3(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((x+y)%3)
+}
+
+static int Mask_mask4(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(((y/2)+(x/3))&1)
+}
+
+static int Mask_mask5(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(((x*y)&1)+(x*y)%3)
+}
+
+static int Mask_mask6(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x*y)&1)+(x*y)%3)&1)
+}
+
+static int Mask_mask7(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x*y)%3)+((x+y)&1))&1)
+}
+
+#define maskNum (8)
+typedef int MaskMaker(int, const unsigned char *, unsigned char *);
+static MaskMaker *maskMakers[maskNum] = {
+	Mask_mask0, Mask_mask1, Mask_mask2, Mask_mask3,
+	Mask_mask4, Mask_mask5, Mask_mask6, Mask_mask7
+};
+
+#ifdef WITH_TESTS
+unsigned char *Mask_makeMaskedFrame(int width, unsigned char *frame, int mask)
+{
+	unsigned char *masked;
+
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+
+	return masked;
+}
+#endif
+
+unsigned char *Mask_makeMask(int width, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned char *masked;
+
+	if(mask < 0 || mask >= maskNum) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+	Mask_writeFormatInformation(width, masked, mask, level);
+
+	return masked;
+}
+
+
+//static int n1;
+//static int n2;
+//static int n3;
+//static int n4;
+
+__STATIC int Mask_calcN1N3(int length, int *runLength)
+{
+	int i;
+	int demerit = 0;
+	int fact;
+
+	for(i = 0; i < length; i++) {
+		if(runLength[i] >= 5) {
+			demerit += N1 + (runLength[i] - 5);
+			//n1 += N1 + (runLength[i] - 5);
+		}
+		if((i & 1)) {
+			if(i >= 3 && i < length-2 && (runLength[i] % 3) == 0) {
+				fact = runLength[i] / 3;
+				if(runLength[i-2] == fact &&
+				   runLength[i-1] == fact &&
+				   runLength[i+1] == fact &&
+				   runLength[i+2] == fact) {
+					if(i == 3 || runLength[i-3] >= 4 * fact) {
+						demerit += N3;
+						//n3 += N3;
+					} else if(i+4 >= length || runLength[i+3] >= 4 * fact) {
+						demerit += N3;
+						//n3 += N3;
+					}
+				}
+			}
+		}
+	}
+
+	return demerit;
+}
+
+__STATIC int Mask_calcN2(int width, unsigned char *frame)
+{
+	int x, y;
+	unsigned char *p;
+	unsigned char b22, w22;
+	int demerit = 0;
+
+	p = frame + width + 1;
+	for(y = 1; y < width; y++) {
+		for(x = 1; x < width; x++) {
+			b22 = p[0] & p[-1] & p[-width] & p [-width-1];
+			w22 = p[0] | p[-1] | p[-width] | p [-width-1];
+			if((b22 | (w22 ^ 1))&1) {
+				demerit += N2;
+			}
+			p++;
+		}
+		p++;
+	}
+
+	return demerit;
+}
+
+__STATIC int Mask_calcRunLengthH(int width, unsigned char *frame, int *runLength)
+{
+	int head;
+	int i;
+	unsigned char prev;
+
+	if(frame[0] & 1) {
+		runLength[0] = -1;
+		head = 1;
+	} else {
+		head = 0;
+	}
+	runLength[head] = 1;
+	prev = frame[0];
+
+	for(i = 1; i < width; i++) {
+		if((frame[i] ^ prev) & 1) {
+			head++;
+			runLength[head] = 1;
+			prev = frame[i];
+		} else {
+			runLength[head]++;
+		}
+	}
+
+	return head + 1;
+}
+
+__STATIC int Mask_calcRunLengthV(int width, unsigned char *frame, int *runLength)
+{
+	int head;
+	int i;
+	unsigned char prev;
+
+	if(frame[0] & 1) {
+		runLength[0] = -1;
+		head = 1;
+	} else {
+		head = 0;
+	}
+	runLength[head] = 1;
+	prev = frame[0];
+
+	for(i = 1; i < width; i++) {
+		if((frame[i * width] ^ prev) & 1) {
+			head++;
+			runLength[head] = 1;
+			prev = frame[i * width];
+		} else {
+			runLength[head]++;
+		}
+	}
+
+	return head + 1;
+}
+
+__STATIC int Mask_evaluateSymbol(int width, unsigned char *frame)
+{
+	int x, y;
+	int demerit = 0;
+	int runLength[QRSPEC_WIDTH_MAX + 1];
+	int length;
+
+	demerit += Mask_calcN2(width, frame);
+
+	for(y = 0; y < width; y++) {
+		length = Mask_calcRunLengthH(width, frame + y * width, runLength);
+		demerit += Mask_calcN1N3(length, runLength);
+	}
+
+	for(x = 0; x < width; x++) {
+		length = Mask_calcRunLengthV(width, frame + x, runLength);
+		demerit += Mask_calcN1N3(length, runLength);
+	}
+
+	return demerit;
+}
+
+unsigned char *Mask_mask(int width, unsigned char *frame, QRecLevel level)
+{
+	int i;
+	unsigned char *mask, *bestMask;
+	int minDemerit = INT_MAX;
+	int blacks;
+	int bratio;
+	int demerit;
+	int w2 = width * width;
+
+	mask = (unsigned char *)malloc(w2);
+	if(mask == NULL) return NULL;
+	bestMask = (unsigned char *)malloc(w2);
+	if(bestMask == NULL) {
+		free(mask);
+		return NULL;
+	}
+
+	for(i = 0; i < maskNum; i++) {
+//		n1 = n2 = n3 = n4 = 0;
+		demerit = 0;
+		blacks = maskMakers[i](width, frame, mask);
+		blacks += Mask_writeFormatInformation(width, mask, i, level);
+		bratio = (200 * blacks + w2) / w2 / 2; /* (int)(100*blacks/w2+0.5) */
+		demerit = (abs(bratio - 50) / 5) * N4;
+//		n4 = demerit;
+		demerit += Mask_evaluateSymbol(width, mask);
+//		printf("(%d,%d,%d,%d)=%d\n", n1, n2, n3 ,n4, demerit);
+		if(demerit < minDemerit) {
+			minDemerit = demerit;
+			memcpy(bestMask, mask, w2);
+		}
+	}
+	free(mask);
+	return bestMask;
+}
diff --git a/apps/eink-advanced/libqrencode/mask.h b/apps/eink-advanced/libqrencode/mask.h
new file mode 100644
index 0000000000000000000000000000000000000000..17506864697a8a00a3d4d788db9bf5238edbd39a
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/mask.h
@@ -0,0 +1,38 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Masking.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __MASK_H__
+#define __MASK_H__
+
+extern unsigned char *Mask_makeMask(int width, unsigned char *frame, int mask, QRecLevel level);
+extern unsigned char *Mask_mask(int width, unsigned char *frame, QRecLevel level);
+
+#ifdef WITH_TESTS
+extern int Mask_calcN2(int width, unsigned char *frame);
+extern int Mask_calcN1N3(int length, int *runLength);
+extern int Mask_calcRunLengthH(int width, unsigned char *frame, int *runLength);
+extern int Mask_calcRunLengthV(int width, unsigned char *frame, int *runLength);
+extern int Mask_evaluateSymbol(int width, unsigned char *frame);
+extern int Mask_writeFormatInformation(int width, unsigned char *frame, int mask, QRecLevel level);
+extern unsigned char *Mask_makeMaskedFrame(int width, unsigned char *frame, int mask);
+#endif
+
+#endif /* __MASK_H__ */
diff --git a/apps/eink-advanced/libqrencode/mmask.c b/apps/eink-advanced/libqrencode/mmask.c
new file mode 100644
index 0000000000000000000000000000000000000000..babdaec4fd6cd7721b0d9dce1c3c456f06459179
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/mmask.c
@@ -0,0 +1,177 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Masking for Micro QR Code.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "mqrspec.h"
+#include "mmask.h"
+
+__STATIC void MMask_writeFormatInformation(int version, int width, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned int format;
+	unsigned char v;
+	int i;
+
+	format = MQRspec_getFormatInfo(mask, version, level);
+
+	for(i = 0; i < 8; i++) {
+		v = 0x84 | (format & 1);
+		frame[width * (i + 1) + 8] = v;
+		format = format >> 1;
+	}
+	for(i = 0; i < 7; i++) {
+		v = 0x84 | (format & 1);
+		frame[width * 8 + 7 - i] = v;
+		format = format >> 1;
+	}
+}
+
+#define MASKMAKER(__exp__) \
+	int x, y;\
+\
+	for(y = 0; y < width; y++) {\
+		for(x = 0; x < width; x++) {\
+			if(*s & 0x80) {\
+				*d = *s;\
+			} else {\
+				*d = *s ^ ((__exp__) == 0);\
+			}\
+			s++; d++;\
+		}\
+	}
+
+static void Mask_mask0(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(y&1)
+}
+
+static void Mask_mask1(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(((y/2)+(x/3))&1)
+}
+
+static void Mask_mask2(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x*y)&1)+(x*y)%3)&1)
+}
+
+static void Mask_mask3(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x+y)&1)+((x*y)%3))&1)
+}
+
+#define maskNum (4)
+typedef void MaskMaker(int, const unsigned char *, unsigned char *);
+static MaskMaker *maskMakers[maskNum] = {
+	Mask_mask0, Mask_mask1, Mask_mask2, Mask_mask3
+};
+
+#ifdef WITH_TESTS
+unsigned char *MMask_makeMaskedFrame(int width, unsigned char *frame, int mask)
+{
+	unsigned char *masked;
+
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+
+	return masked;
+}
+#endif
+
+unsigned char *MMask_makeMask(int version, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned char *masked;
+	int width;
+
+	if(mask < 0 || mask >= maskNum) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	width = MQRspec_getWidth(version);
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+	MMask_writeFormatInformation(version, width, masked, mask, level);
+
+	return masked;
+}
+
+__STATIC int MMask_evaluateSymbol(int width, unsigned char *frame)
+{
+	int x, y;
+	unsigned char *p;
+	int sum1 = 0, sum2 = 0;
+
+	p = frame + width * (width - 1);
+	for(x = 1; x < width; x++) {
+		sum1 += (p[x] & 1);
+	}
+
+	p = frame + width * 2 - 1;
+	for(y = 1; y < width; y++) {
+		sum2 += (*p & 1);
+		p += width;
+	}
+
+	return (sum1 <= sum2)?(sum1 * 16 + sum2):(sum2 * 16 + sum1);
+}
+
+unsigned char *MMask_mask(int version, unsigned char *frame, QRecLevel level)
+{
+	int i;
+	unsigned char *mask, *bestMask;
+	int maxScore = 0;
+	int score;
+	int width;
+
+	width = MQRspec_getWidth(version);
+
+	mask = (unsigned char *)malloc(width * width);
+	if(mask == NULL) return NULL;
+	bestMask = NULL;
+
+	for(i = 0; i < maskNum; i++) {
+		score = 0;
+		maskMakers[i](width, frame, mask);
+		MMask_writeFormatInformation(version, width, mask, i, level);
+		score = MMask_evaluateSymbol(width, mask);
+		if(score > maxScore) {
+			maxScore = score;
+			free(bestMask);
+			bestMask = mask;
+			mask = (unsigned char *)malloc(width * width);
+			if(mask == NULL) break;
+		}
+	}
+	free(mask);
+	return bestMask;
+}
diff --git a/apps/eink-advanced/libqrencode/mmask.h b/apps/eink-advanced/libqrencode/mmask.h
new file mode 100644
index 0000000000000000000000000000000000000000..f6556e877d55636a783f19ac79da3eea0e89bcb2
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/mmask.h
@@ -0,0 +1,34 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Masking for Micro QR Code.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __MMASK_H__
+#define __MMASK_H__
+
+extern unsigned char *MMask_makeMask(int version, unsigned char *frame, int mask, QRecLevel level);
+extern unsigned char *MMask_mask(int version, unsigned char *frame, QRecLevel level);
+
+#ifdef WITH_TESTS
+extern int MMask_evaluateSymbol(int width, unsigned char *frame);
+extern void MMask_writeFormatInformation(int version, int width, unsigned char *frame, int mask, QRecLevel level);
+extern unsigned char *MMask_makeMaskedFrame(int width, unsigned char *frame, int mask);
+#endif
+
+#endif /* __MMASK_H__ */
diff --git a/apps/eink-advanced/libqrencode/mqrspec.c b/apps/eink-advanced/libqrencode/mqrspec.c
new file mode 100644
index 0000000000000000000000000000000000000000..fe7b5d5018785df847b83b25f2ac774f6b62bb86
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/mqrspec.c
@@ -0,0 +1,232 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Micro QR Code specification in convenient format.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * The following data / specifications are taken from
+ * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
+ *  or
+ * "Automatic identification and data capture techniques --
+ *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "mqrspec.h"
+
+/******************************************************************************
+ * Version and capacity
+ *****************************************************************************/
+
+typedef struct {
+	int width; //< Edge length of the symbol
+	int ec[4];  //< Number of ECC code (bytes)
+} MQRspec_Capacity;
+
+/**
+ * Table of the capacity of symbols
+ * See Table 1 (pp.106) and Table 8 (pp.113) of Appendix 1, JIS X0510:2004.
+ */
+static const MQRspec_Capacity mqrspecCapacity[MQRSPEC_VERSION_MAX + 1] = {
+	{  0, {0,  0,  0, 0}},
+	{ 11, {2,  0,  0, 0}},
+	{ 13, {5,  6,  0, 0}},
+	{ 15, {6,  8,  0, 0}},
+	{ 17, {8, 10, 14, 0}}
+};
+
+int MQRspec_getDataLengthBit(int version, QRecLevel level)
+{
+	int w;
+	int ecc;
+
+	w = mqrspecCapacity[version].width - 1;
+	ecc = mqrspecCapacity[version].ec[level];
+	if(ecc == 0) return 0;
+	return w * w - 64 - ecc * 8;
+}
+
+int MQRspec_getDataLength(int version, QRecLevel level)
+{
+	return (MQRspec_getDataLengthBit(version, level) + 4) / 8;
+}
+
+int MQRspec_getECCLength(int version, QRecLevel level)
+{
+	return mqrspecCapacity[version].ec[level];
+}
+
+int MQRspec_getWidth(int version)
+{
+	return mqrspecCapacity[version].width;
+}
+
+/******************************************************************************
+ * Length indicator
+ *****************************************************************************/
+
+/**
+ * See Table 3 (pp.107) of Appendix 1, JIS X0510:2004.
+ */
+static const int lengthTableBits[4][4] = {
+	{ 3, 4, 5, 6},
+	{ 0, 3, 4, 5},
+	{ 0, 0, 4, 5},
+	{ 0, 0, 3, 4}
+};
+
+int MQRspec_lengthIndicator(QRencodeMode mode, int version)
+{
+	return lengthTableBits[mode][version - 1];
+}
+
+int MQRspec_maximumWords(QRencodeMode mode, int version)
+{
+	int bits;
+	int words;
+
+	bits = lengthTableBits[mode][version - 1];
+	words = (1 << bits) - 1;
+	if(mode == QR_MODE_KANJI) {
+		words *= 2; // the number of bytes is required
+	}
+
+	return words;
+}
+
+/******************************************************************************
+ * Format information
+ *****************************************************************************/
+
+/* See calcFormatInfo in tests/test_mqrspec.c */
+static const unsigned int formatInfo[4][8] = {
+	{0x4445, 0x55ae, 0x6793, 0x7678, 0x06de, 0x1735, 0x2508, 0x34e3},
+	{0x4172, 0x5099, 0x62a4, 0x734f, 0x03e9, 0x1202, 0x203f, 0x31d4},
+	{0x4e2b, 0x5fc0, 0x6dfd, 0x7c16, 0x0cb0, 0x1d5b, 0x2f66, 0x3e8d},
+	{0x4b1c, 0x5af7, 0x68ca, 0x7921, 0x0987, 0x186c, 0x2a51, 0x3bba}
+};
+
+/* See Table 10 of Appendix 1. (pp.115) */
+static const int typeTable[MQRSPEC_VERSION_MAX + 1][3] = {
+	{-1, -1, -1},
+	{ 0, -1, -1},
+	{ 1,  2, -1},
+	{ 3,  4, -1},
+	{ 5,  6,  7}
+};
+
+unsigned int MQRspec_getFormatInfo(int mask, int version, QRecLevel level)
+{
+	int type;
+
+	if(mask < 0 || mask > 3) return 0;
+	if(version <= 0 || version > MQRSPEC_VERSION_MAX) return 0;
+	if(level == QR_ECLEVEL_H) return 0;
+	type = typeTable[version][level];
+	if(type < 0) return 0;
+
+	return formatInfo[mask][type];
+}
+
+/******************************************************************************
+ * Frame
+ *****************************************************************************/
+
+/**
+ * Put a finder pattern.
+ * @param frame
+ * @param width
+ * @param ox,oy upper-left coordinate of the pattern
+ */
+static void putFinderPattern(unsigned char *frame, int width, int ox, int oy)
+{
+	static const unsigned char finder[] = {
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+	};
+	int x, y;
+	const unsigned char *s;
+
+	frame += oy * width + ox;
+	s = finder;
+	for(y = 0; y < 7; y++) {
+		for(x = 0; x < 7; x++) {
+			frame[x] = s[x];
+		}
+		frame += width;
+		s += 7;
+	}
+}
+
+static unsigned char *MQRspec_createFrame(int version)
+{
+	unsigned char *frame, *p, *q;
+	int width;
+	int x, y;
+
+	width = mqrspecCapacity[version].width;
+	frame = (unsigned char *)malloc(width * width);
+	if(frame == NULL) return NULL;
+
+	memset(frame, 0, width * width);
+	/* Finder pattern */
+	putFinderPattern(frame, width, 0, 0);
+	/* Separator */
+	p = frame;
+	for(y = 0; y < 7; y++) {
+		p[7] = 0xc0;
+		p += width;
+	}
+	memset(frame + width * 7, 0xc0, 8);
+	/* Mask format information area */
+	memset(frame + width * 8 + 1, 0x84, 8);
+	p = frame + width + 8;
+	for(y = 0; y < 7; y++) {
+		*p = 0x84;
+		p += width;
+	}
+	/* Timing pattern */
+	p = frame + 8;
+	q = frame + width * 8;
+	for(x = 1; x < width-7; x++) {
+		*p =  0x90 | (x & 1);
+		*q =  0x90 | (x & 1);
+		p++;
+		q += width;
+	}
+
+	return frame;
+}
+
+unsigned char *MQRspec_newFrame(int version)
+{
+	if(version < 1 || version > MQRSPEC_VERSION_MAX) return NULL;
+
+	return MQRspec_createFrame(version);
+}
diff --git a/apps/eink-advanced/libqrencode/mqrspec.h b/apps/eink-advanced/libqrencode/mqrspec.h
new file mode 100644
index 0000000000000000000000000000000000000000..4d1202c8e6db1f2e0bb9e3df07c2e8e5db4b91a1
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/mqrspec.h
@@ -0,0 +1,152 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Micro QR Code specification in convenient format.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __MQRSPEC_H__
+#define __MQRSPEC_H__
+
+#include "qrencode.h"
+
+/******************************************************************************
+ * Version and capacity
+ *****************************************************************************/
+
+/**
+ * Maximum width of a symbol
+ */
+#define MQRSPEC_WIDTH_MAX 17
+
+/**
+ * Return maximum data code length (bits) for the version.
+ * @param version version of the symbol
+ * @param level error correction level
+ * @return maximum size (bits)
+ */
+extern int MQRspec_getDataLengthBit(int version, QRecLevel level);
+
+/**
+ * Return maximum data code length (bytes) for the version.
+ * @param version version of the symbol
+ * @param level error correction level
+ * @return maximum size (bytes)
+ */
+extern int MQRspec_getDataLength(int version, QRecLevel level);
+
+/**
+ * Return maximum error correction code length (bytes) for the version.
+ * @param version version of the symbol
+ * @param level error correction level
+ * @return ECC size (bytes)
+ */
+extern int MQRspec_getECCLength(int version, QRecLevel level);
+
+/**
+ * Return a version number that satisfies the input code length.
+ * @param size input code length (byte)
+ * @param level error correction level
+ * @return version number
+ */
+extern int MQRspec_getMinimumVersion(int size, QRecLevel level);
+
+/**
+ * Return the width of the symbol for the version.
+ * @param version version of the symbol
+ * @return width
+ */
+extern int MQRspec_getWidth(int version);
+
+/**
+ * Return the numer of remainder bits.
+ * @param version version of the symbol
+ * @return number of remainder bits
+ */
+extern int MQRspec_getRemainder(int version);
+
+/******************************************************************************
+ * Length indicator
+ *****************************************************************************/
+
+/**
+ * Return the size of length indicator for the mode and version.
+ * @param mode encode mode
+ * @param version vesion of the symbol
+ * @return the size of the appropriate length indicator (bits).
+ */
+extern int MQRspec_lengthIndicator(QRencodeMode mode, int version);
+
+/**
+ * Return the maximum length for the mode and version.
+ * @param mode encode mode
+ * @param version vesion of the symbol
+ * @return the maximum length (bytes)
+ */
+extern int MQRspec_maximumWords(QRencodeMode mode, int version);
+
+/******************************************************************************
+ * Version information pattern
+ *****************************************************************************/
+
+/**
+ * Return BCH encoded version information pattern that is used for the symbol
+ * of version 7 or greater. Use lower 18 bits.
+ * @param version vesion of the symbol
+ * @return BCH encoded version information pattern
+ */
+extern unsigned int MQRspec_getVersionPattern(int version);
+
+/******************************************************************************
+ * Format information
+ *****************************************************************************/
+
+/**
+ * Return BCH encoded format information pattern.
+ * @param mask mask number
+ * @param version version of the symbol
+ * @param level error correction level
+ * @return BCH encoded format information pattern
+ */
+extern unsigned int MQRspec_getFormatInfo(int mask, int version, QRecLevel level);
+
+/******************************************************************************
+ * Frame
+ *****************************************************************************/
+
+/**
+ * Return a copy of initialized frame.
+ * When the same version is requested twice or more, a copy of cached frame
+ * is returned.
+ * @param version version of the symbol
+ * @return Array of unsigned char. You can free it by free().
+ */
+extern unsigned char *MQRspec_newFrame(int version);
+
+/******************************************************************************
+ * Mode indicator
+ *****************************************************************************/
+
+/**
+ * Mode indicator. See Table 2 in Appendix 1 of JIS X0510:2004, pp.107.
+ */
+#define MQRSPEC_MODEID_NUM       0
+#define MQRSPEC_MODEID_AN        1
+#define MQRSPEC_MODEID_8         2
+#define MQRSPEC_MODEID_KANJI     3
+
+#endif /* __MQRSPEC_H__ */
diff --git a/apps/eink-advanced/libqrencode/qrencode.c b/apps/eink-advanced/libqrencode/qrencode.c
new file mode 100644
index 0000000000000000000000000000000000000000..1d7ebec00ce1a0eed7a1cdac28afc8ece1dc8391
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/qrencode.c
@@ -0,0 +1,884 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "qrspec.h"
+#include "mqrspec.h"
+#include "bitstream.h"
+#include "qrinput.h"
+#include "rsecc.h"
+#include "split.h"
+#include "mask.h"
+#include "mmask.h"
+
+/******************************************************************************
+ * Raw code
+ *****************************************************************************/
+
+typedef struct {
+	int dataLength;
+	unsigned char *data;
+	int eccLength;
+	unsigned char *ecc;
+} RSblock;
+
+typedef struct {
+	int version;
+	int dataLength;
+	int eccLength;
+	unsigned char *datacode;
+	unsigned char *ecccode;
+	int b1;
+	int blocks;
+	RSblock *rsblock;
+	int count;
+} QRRawCode;
+
+static void RSblock_initBlock(RSblock *block, int dl, unsigned char *data, int el, unsigned char *ecc)
+{
+	block->dataLength = dl;
+	block->data = data;
+	block->eccLength = el;
+	block->ecc = ecc;
+
+	RSECC_encode(dl, el, data, ecc);
+}
+
+static int RSblock_init(RSblock *blocks, int spec[5], unsigned char *data, unsigned char *ecc)
+{
+	int i;
+	RSblock *block;
+	unsigned char *dp, *ep;
+	int el, dl;
+
+	dl = QRspec_rsDataCodes1(spec);
+	el = QRspec_rsEccCodes1(spec);
+
+	block = blocks;
+	dp = data;
+	ep = ecc;
+	for(i = 0; i < QRspec_rsBlockNum1(spec); i++) {
+		RSblock_initBlock(block, dl, dp, el, ep);
+		dp += dl;
+		ep += el;
+		block++;
+	}
+
+	if(QRspec_rsBlockNum2(spec) == 0) return 0;
+
+	dl = QRspec_rsDataCodes2(spec);
+	el = QRspec_rsEccCodes2(spec);
+	for(i = 0; i < QRspec_rsBlockNum2(spec); i++) {
+		RSblock_initBlock(block, dl, dp, el, ep);
+		dp += dl;
+		ep += el;
+		block++;
+	}
+
+	return 0;
+}
+
+__STATIC void QRraw_free(QRRawCode *raw);
+__STATIC QRRawCode *QRraw_new(QRinput *input)
+{
+	QRRawCode *raw;
+	int spec[5], ret;
+
+	raw = (QRRawCode *)malloc(sizeof(QRRawCode));
+	if(raw == NULL) return NULL;
+
+	raw->datacode = QRinput_getByteStream(input);
+	if(raw->datacode == NULL) {
+		free(raw);
+		return NULL;
+	}
+
+	QRspec_getEccSpec(input->version, input->level, spec);
+
+	raw->version = input->version;
+	raw->b1 = QRspec_rsBlockNum1(spec);
+	raw->dataLength = QRspec_rsDataLength(spec);
+	raw->eccLength = QRspec_rsEccLength(spec);
+	raw->ecccode = (unsigned char *)malloc(raw->eccLength);
+	if(raw->ecccode == NULL) {
+		free(raw->datacode);
+		free(raw);
+		return NULL;
+	}
+
+	raw->blocks = QRspec_rsBlockNum(spec);
+	raw->rsblock = (RSblock *)calloc(raw->blocks, sizeof(RSblock));
+	if(raw->rsblock == NULL) {
+		QRraw_free(raw);
+		return NULL;
+	}
+	ret = RSblock_init(raw->rsblock, spec, raw->datacode, raw->ecccode);
+	if(ret < 0) {
+		QRraw_free(raw);
+		return NULL;
+	}
+
+	raw->count = 0;
+
+	return raw;
+}
+
+/**
+ * Return a code (byte).
+ * This function can be called iteratively.
+ * @param raw raw code.
+ * @return code
+ */
+__STATIC unsigned char QRraw_getCode(QRRawCode *raw)
+{
+	int col, row;
+	unsigned char ret;
+
+	if(raw->count < raw->dataLength) {
+		row = raw->count % raw->blocks;
+		col = raw->count / raw->blocks;
+		if(col >= raw->rsblock[0].dataLength) {
+			row += raw->b1;
+		}
+		ret = raw->rsblock[row].data[col];
+	} else if(raw->count < raw->dataLength + raw->eccLength) {
+		row = (raw->count - raw->dataLength) % raw->blocks;
+		col = (raw->count - raw->dataLength) / raw->blocks;
+		ret = raw->rsblock[row].ecc[col];
+	} else {
+		return 0;
+	}
+	raw->count++;
+	return ret;
+}
+
+__STATIC void QRraw_free(QRRawCode *raw)
+{
+	if(raw != NULL) {
+		free(raw->datacode);
+		free(raw->ecccode);
+		free(raw->rsblock);
+		free(raw);
+	}
+}
+
+/******************************************************************************
+ * Raw code for Micro QR Code
+ *****************************************************************************/
+
+typedef struct {
+	int version;
+	int dataLength;
+	int eccLength;
+	unsigned char *datacode;
+	unsigned char *ecccode;
+	RSblock *rsblock;
+	int oddbits;
+	int count;
+} MQRRawCode;
+
+__STATIC void MQRraw_free(MQRRawCode *raw);
+__STATIC MQRRawCode *MQRraw_new(QRinput *input)
+{
+	MQRRawCode *raw;
+
+	raw = (MQRRawCode *)malloc(sizeof(MQRRawCode));
+	if(raw == NULL) return NULL;
+
+	raw->version = input->version;
+	raw->dataLength = MQRspec_getDataLength(input->version, input->level);
+	raw->eccLength = MQRspec_getECCLength(input->version, input->level);
+	raw->oddbits = raw->dataLength * 8 - MQRspec_getDataLengthBit(input->version, input->level);
+	raw->datacode = QRinput_getByteStream(input);
+	if(raw->datacode == NULL) {
+		free(raw);
+		return NULL;
+	}
+	raw->ecccode = (unsigned char *)malloc(raw->eccLength);
+	if(raw->ecccode == NULL) {
+		free(raw->datacode);
+		free(raw);
+		return NULL;
+	}
+
+	raw->rsblock = (RSblock *)calloc(1, sizeof(RSblock));
+	if(raw->rsblock == NULL) {
+		MQRraw_free(raw);
+		return NULL;
+	}
+
+	RSblock_initBlock(raw->rsblock, raw->dataLength, raw->datacode, raw->eccLength, raw->ecccode);
+
+	raw->count = 0;
+
+	return raw;
+}
+
+/**
+ * Return a code (byte).
+ * This function can be called iteratively.
+ * @param raw raw code.
+ * @return code
+ */
+__STATIC unsigned char MQRraw_getCode(MQRRawCode *raw)
+{
+	unsigned char ret;
+
+	if(raw->count < raw->dataLength) {
+		ret = raw->datacode[raw->count];
+	} else if(raw->count < raw->dataLength + raw->eccLength) {
+		ret = raw->ecccode[raw->count - raw->dataLength];
+	} else {
+		return 0;
+	}
+	raw->count++;
+	return ret;
+}
+
+__STATIC void MQRraw_free(MQRRawCode *raw)
+{
+	if(raw != NULL) {
+		free(raw->datacode);
+		free(raw->ecccode);
+		free(raw->rsblock);
+		free(raw);
+	}
+}
+
+
+/******************************************************************************
+ * Frame filling
+ *****************************************************************************/
+
+typedef struct {
+	int width;
+	unsigned char *frame;
+	int x, y;
+	int dir;
+	int bit;
+	int mqr;
+} FrameFiller;
+
+static void FrameFiller_set(FrameFiller *filler, int width, unsigned char *frame, int mqr)
+{
+	filler->width = width;
+	filler->frame = frame;
+	filler->x = width - 1;
+	filler->y = width - 1;
+	filler->dir = -1;
+	filler->bit = -1;
+	filler->mqr = mqr;
+}
+
+static unsigned char *FrameFiller_next(FrameFiller *filler)
+{
+	unsigned char *p;
+	int x, y, w;
+
+	if(filler->bit == -1) {
+		filler->bit = 0;
+		return filler->frame + filler->y * filler->width + filler->x;
+	}
+
+	x = filler->x;
+	y = filler->y;
+	p = filler->frame;
+	w = filler->width;
+
+	if(filler->bit == 0) {
+		x--;
+		filler->bit++;
+	} else {
+		x++;
+		y += filler->dir;
+		filler->bit--;
+	}
+
+	if(filler->dir < 0) {
+		if(y < 0) {
+			y = 0;
+			x -= 2;
+			filler->dir = 1;
+			if(!filler->mqr && x == 6) {
+				x--;
+				y = 9;
+			}
+		}
+	} else {
+		if(y == w) {
+			y = w - 1;
+			x -= 2;
+			filler->dir = -1;
+			if(!filler->mqr && x == 6) {
+				x--;
+				y -= 8;
+			}
+		}
+	}
+	if(x < 0 || y < 0) return NULL;
+
+	filler->x = x;
+	filler->y = y;
+
+	if(p[y * w + x] & 0x80) {
+		// This tail recursion could be optimized.
+		return FrameFiller_next(filler);
+	}
+	return &p[y * w + x];
+}
+
+#ifdef WITH_TESTS
+extern unsigned char *FrameFiller_test(int version)
+{
+	int width;
+	unsigned char *frame, *p;
+	int i, length;
+	FrameFiller filler;
+
+	width = QRspec_getWidth(version);
+	frame = QRspec_newFrame(version);
+	if(frame == NULL) return NULL;
+	FrameFiller_set(&filler, width, frame, 0);
+	length = QRspec_getDataLength(version, QR_ECLEVEL_L) * 8
+	       + QRspec_getECCLength(version, QR_ECLEVEL_L) * 8
+		   + QRspec_getRemainder(version);
+	for(i = 0; i < length; i++) {
+		p = FrameFiller_next(&filler);
+		if(p == NULL) {
+			free(frame);
+			return NULL;
+		}
+		*p = (unsigned char)(i & 0x7f) | 0x80;
+	}
+	return frame;
+}
+
+extern unsigned char *FrameFiller_testMQR(int version)
+{
+	int width;
+	unsigned char *frame, *p;
+	int i, length;
+	FrameFiller filler;
+
+	width = MQRspec_getWidth(version);
+	frame = MQRspec_newFrame(version);
+	if(frame == NULL) return NULL;
+	FrameFiller_set(&filler, width, frame, 1);
+	length = MQRspec_getDataLengthBit(version, QR_ECLEVEL_L)
+	       + MQRspec_getECCLength(version, QR_ECLEVEL_L) * 8;
+	for(i = 0; i < length; i++) {
+		p = FrameFiller_next(&filler);
+		if(p == NULL) {
+			fprintf(stderr, "Frame filler run over the frame!\n");
+			return frame;
+		}
+		*p = (unsigned char)(i & 0x7f) | 0x80;
+	}
+	return frame;
+}
+#endif
+
+
+/******************************************************************************
+ * QR-code encoding
+ *****************************************************************************/
+
+__STATIC QRcode *QRcode_new(int version, int width, unsigned char *data)
+{
+	QRcode *qrcode;
+
+	qrcode = (QRcode *)malloc(sizeof(QRcode));
+	if(qrcode == NULL) return NULL;
+
+	qrcode->version = version;
+	qrcode->width = width;
+	qrcode->data = data;
+
+	return qrcode;
+}
+
+void QRcode_free(QRcode *qrcode)
+{
+	if(qrcode != NULL) {
+		free(qrcode->data);
+		free(qrcode);
+	}
+}
+
+__STATIC QRcode *QRcode_encodeMask(QRinput *input, int mask)
+{
+	int width, version;
+	QRRawCode *raw;
+	unsigned char *frame, *masked, *p, code, bit;
+	int i, j;
+	QRcode *qrcode = NULL;
+	FrameFiller filler;
+
+	if(input->mqr) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->version < 0 || input->version > QRSPEC_VERSION_MAX) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->level > QR_ECLEVEL_H) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	raw = QRraw_new(input);
+	if(raw == NULL) return NULL;
+
+	version = raw->version;
+	width = QRspec_getWidth(version);
+	frame = QRspec_newFrame(version);
+	if(frame == NULL) {
+		QRraw_free(raw);
+		return NULL;
+	}
+	FrameFiller_set(&filler, width, frame, 0);
+
+	/* inteleaved data and ecc codes */
+	for(i = 0; i < raw->dataLength + raw->eccLength; i++) {
+		code = QRraw_getCode(raw);
+		bit = 0x80;
+		for(j = 0; j < 8; j++) {
+			p = FrameFiller_next(&filler);
+			if(p == NULL)  goto EXIT;
+			*p = 0x02 | ((bit & code) != 0);
+			bit = bit >> 1;
+		}
+	}
+	QRraw_free(raw);
+	raw = NULL;
+	/* remainder bits */
+	j = QRspec_getRemainder(version);
+	for(i = 0; i < j; i++) {
+		p = FrameFiller_next(&filler);
+		if(p == NULL)  goto EXIT;
+		*p = 0x02;
+	}
+
+	/* masking */
+	if(mask == -2) { // just for debug purpose
+		masked = (unsigned char *)malloc(width * width);
+		memcpy(masked, frame, width * width);
+	} else if(mask < 0) {
+		masked = Mask_mask(width, frame, input->level);
+	} else {
+		masked = Mask_makeMask(width, frame, mask, input->level);
+	}
+	if(masked == NULL) {
+		goto EXIT;
+	}
+	qrcode = QRcode_new(version, width, masked);
+	if(qrcode == NULL) {
+		free(masked);
+	}
+
+EXIT:
+	QRraw_free(raw);
+	free(frame);
+	return qrcode;
+}
+
+__STATIC QRcode *QRcode_encodeMaskMQR(QRinput *input, int mask)
+{
+	int width, version;
+	MQRRawCode *raw;
+	unsigned char *frame, *masked, *p, code, bit;
+	int i, j, length;
+	QRcode *qrcode = NULL;
+	FrameFiller filler;
+
+	if(!input->mqr) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->version <= 0 || input->version > MQRSPEC_VERSION_MAX) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->level > QR_ECLEVEL_Q) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	raw = MQRraw_new(input);
+	if(raw == NULL) return NULL;
+
+	version = raw->version;
+	width = MQRspec_getWidth(version);
+	frame = MQRspec_newFrame(version);
+	if(frame == NULL) {
+		MQRraw_free(raw);
+		return NULL;
+	}
+	FrameFiller_set(&filler, width, frame, 1);
+
+	/* inteleaved data and ecc codes */
+	for(i = 0; i < raw->dataLength + raw->eccLength; i++) {
+		code = MQRraw_getCode(raw);
+		bit = 0x80;
+		if(raw->oddbits && i == raw->dataLength - 1) {
+			length = raw->oddbits;
+		} else {
+			length = 8;
+		}
+		for(j = 0; j < length; j++) {
+			p = FrameFiller_next(&filler);
+			if(p == NULL) goto EXIT;
+			*p = 0x02 | ((bit & code) != 0);
+			bit = bit >> 1;
+		}
+	}
+	MQRraw_free(raw);
+	raw = NULL;
+
+	/* masking */
+	if(mask == -2) { // just for debug purpose
+		masked = (unsigned char *)malloc(width * width);
+		memcpy(masked, frame, width * width);
+	} else if(mask < 0) {
+		masked = MMask_mask(version, frame, input->level);
+	} else {
+		masked = MMask_makeMask(version, frame, mask, input->level);
+	}
+	if(masked == NULL) {
+		goto EXIT;
+	}
+
+	qrcode = QRcode_new(version, width, masked);
+	if(qrcode == NULL) {
+		free(masked);
+	}
+
+EXIT:
+	MQRraw_free(raw);
+	free(frame);
+	return qrcode;
+}
+
+QRcode *QRcode_encodeInput(QRinput *input)
+{
+	if(input->mqr) {
+		return QRcode_encodeMaskMQR(input, -1);
+	} else {
+		return QRcode_encodeMask(input, -1);
+	}
+}
+
+static QRcode *QRcode_encodeStringReal(const char *string, int version, QRecLevel level, int mqr, QRencodeMode hint, int casesensitive)
+{
+	QRinput *input;
+	QRcode *code;
+	int ret;
+
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(hint != QR_MODE_8 && hint != QR_MODE_KANJI) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	if(mqr) {
+		input = QRinput_newMQR(version, level);
+	} else {
+		input = QRinput_new2(version, level);
+	}
+	if(input == NULL) return NULL;
+
+	ret = Split_splitStringToQRinput(string, input, hint, casesensitive);
+	if(ret < 0) {
+		QRinput_free(input);
+		return NULL;
+	}
+	code = QRcode_encodeInput(input);
+	QRinput_free(input);
+
+	return code;
+}
+
+QRcode *QRcode_encodeString(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)
+{
+	return QRcode_encodeStringReal(string, version, level, 0, hint, casesensitive);
+}
+
+QRcode *QRcode_encodeStringMQR(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)
+{
+	return QRcode_encodeStringReal(string, version, level, 1, hint, casesensitive);
+}
+
+static QRcode *QRcode_encodeDataReal(const unsigned char *data, int length, int version, QRecLevel level, int mqr)
+{
+	QRinput *input;
+	QRcode *code;
+	int ret;
+
+	if(data == NULL || length == 0) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	if(mqr) {
+		input = QRinput_newMQR(version, level);
+	} else {
+		input = QRinput_new2(version, level);
+	}
+	if(input == NULL) return NULL;
+
+	ret = QRinput_append(input, QR_MODE_8, length, data);
+	if(ret < 0) {
+		QRinput_free(input);
+		return NULL;
+	}
+	code = QRcode_encodeInput(input);
+	QRinput_free(input);
+
+	return code;
+}
+
+QRcode *QRcode_encodeData(int size, const unsigned char *data, int version, QRecLevel level)
+{
+	return QRcode_encodeDataReal(data, size, version, level, 0);
+}
+
+QRcode *QRcode_encodeString8bit(const char *string, int version, QRecLevel level)
+{
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataReal((unsigned char *)string, strlen(string), version, level, 0);
+}
+
+QRcode *QRcode_encodeDataMQR(int size, const unsigned char *data, int version, QRecLevel level)
+{
+	return QRcode_encodeDataReal(data, size, version, level, 1);
+}
+
+QRcode *QRcode_encodeString8bitMQR(const char *string, int version, QRecLevel level)
+{
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataReal((unsigned char *)string, strlen(string), version, level, 1);
+}
+
+
+/******************************************************************************
+ * Structured QR-code encoding
+ *****************************************************************************/
+
+static QRcode_List *QRcode_List_newEntry(void)
+{
+	QRcode_List *entry;
+
+	entry = (QRcode_List *)malloc(sizeof(QRcode_List));
+	if(entry == NULL) return NULL;
+
+	entry->next = NULL;
+	entry->code = NULL;
+
+	return entry;
+}
+
+static void QRcode_List_freeEntry(QRcode_List *entry)
+{
+	if(entry != NULL) {
+		QRcode_free(entry->code);
+		free(entry);
+	}
+}
+
+void QRcode_List_free(QRcode_List *qrlist)
+{
+	QRcode_List *list = qrlist, *next;
+
+	while(list != NULL) {
+		next = list->next;
+		QRcode_List_freeEntry(list);
+		list = next;
+	}
+}
+
+int QRcode_List_size(QRcode_List *qrlist)
+{
+	QRcode_List *list = qrlist;
+	int size = 0;
+
+	while(list != NULL) {
+		size++;
+		list = list->next;
+	}
+
+	return size;
+}
+
+#if 0
+static unsigned char QRcode_parity(const char *str, int size)
+{
+	unsigned char parity = 0;
+	int i;
+
+	for(i = 0; i < size; i++) {
+		parity ^= str[i];
+	}
+
+	return parity;
+}
+#endif
+
+QRcode_List *QRcode_encodeInputStructured(QRinput_Struct *s)
+{
+	QRcode_List *head = NULL;
+	QRcode_List *tail = NULL;
+	QRcode_List *entry;
+	QRinput_InputList *list = s->head;
+
+	while(list != NULL) {
+		if(head == NULL) {
+			entry = QRcode_List_newEntry();
+			if(entry == NULL) goto ABORT;
+			head = entry;
+			tail = head;
+		} else {
+			entry = QRcode_List_newEntry();
+			if(entry == NULL) goto ABORT;
+			tail->next = entry;
+			tail = tail->next;
+		}
+		tail->code = QRcode_encodeInput(list->input);
+		if(tail->code == NULL) {
+			goto ABORT;
+		}
+		list = list->next;
+	}
+
+	return head;
+ABORT:
+	QRcode_List_free(head);
+	return NULL;
+}
+
+static QRcode_List *QRcode_encodeInputToStructured(QRinput *input)
+{
+	QRinput_Struct *s;
+	QRcode_List *codes;
+
+	s = QRinput_splitQRinputToStruct(input);
+	if(s == NULL) return NULL;
+
+	codes = QRcode_encodeInputStructured(s);
+	QRinput_Struct_free(s);
+
+	return codes;
+}
+
+static QRcode_List *QRcode_encodeDataStructuredReal(
+	int size, const unsigned char *data,
+	int version, QRecLevel level,
+	int eightbit, QRencodeMode hint, int casesensitive)
+{
+	QRinput *input;
+	QRcode_List *codes;
+	int ret;
+
+	if(version <= 0) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(!eightbit && (hint != QR_MODE_8 && hint != QR_MODE_KANJI)) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	input = QRinput_new2(version, level);
+	if(input == NULL) return NULL;
+
+	if(eightbit) {
+		ret = QRinput_append(input, QR_MODE_8, size, data);
+	} else {
+		ret = Split_splitStringToQRinput((char *)data, input, hint, casesensitive);
+	}
+	if(ret < 0) {
+		QRinput_free(input);
+		return NULL;
+	}
+	codes = QRcode_encodeInputToStructured(input);
+	QRinput_free(input);
+
+	return codes;
+}
+
+QRcode_List *QRcode_encodeDataStructured(int size, const unsigned char *data, int version, QRecLevel level) {
+	return QRcode_encodeDataStructuredReal(size, data, version, level, 1, QR_MODE_NUL, 0);
+}
+
+QRcode_List *QRcode_encodeString8bitStructured(const char *string, int version, QRecLevel level) {
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataStructured(strlen(string), (unsigned char *)string, version, level);
+}
+
+QRcode_List *QRcode_encodeStringStructured(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)
+{
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataStructuredReal(strlen(string), (unsigned char *)string, version, level, 0, hint, casesensitive);
+}
+
+/******************************************************************************
+ * System utilities
+ *****************************************************************************/
+
+void QRcode_APIVersion(int *major_version, int *minor_version, int *micro_version)
+{
+	if(major_version != NULL) {
+		*major_version = MAJOR_VERSION;
+	}
+	if(minor_version != NULL) {
+		*minor_version = MINOR_VERSION;
+	}
+	if(micro_version != NULL) {
+		*micro_version = MICRO_VERSION;
+	}
+}
+
+char *QRcode_APIVersionString(void)
+{
+	return VERSION;
+}
diff --git a/apps/eink-advanced/libqrencode/qrencode_inner.h b/apps/eink-advanced/libqrencode/qrencode_inner.h
new file mode 100644
index 0000000000000000000000000000000000000000..3c40d0622a48ca54f20cda13107864d112d52b08
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/qrencode_inner.h
@@ -0,0 +1,88 @@
+/**
+ * qrencode - QR Code encoder
+ *
+ * Header for test use
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __QRENCODE_INNER_H__
+#define __QRENCODE_INNER_H__
+
+/**
+ * This header file includes definitions for test use.
+ */
+
+/******************************************************************************
+ * Raw code
+ *****************************************************************************/
+
+typedef struct {
+	int dataLength;
+	unsigned char *data;
+	int eccLength;
+	unsigned char *ecc;
+} RSblock;
+
+typedef struct {
+	int version;
+	int dataLength;
+	int eccLength;
+	unsigned char *datacode;
+	unsigned char *ecccode;
+	int b1;
+	int blocks;
+	RSblock *rsblock;
+	int count;
+} QRRawCode;
+
+extern QRRawCode *QRraw_new(QRinput *input);
+extern unsigned char QRraw_getCode(QRRawCode *raw);
+extern void QRraw_free(QRRawCode *raw);
+
+/******************************************************************************
+ * Raw code for Micro QR Code
+ *****************************************************************************/
+
+typedef struct {
+	int version;
+	int dataLength;
+	int eccLength;
+	unsigned char *datacode;
+	unsigned char *ecccode;
+	RSblock *rsblock;
+	int oddbits;
+	int count;
+} MQRRawCode;
+
+extern MQRRawCode *MQRraw_new(QRinput *input);
+extern unsigned char MQRraw_getCode(MQRRawCode *raw);
+extern void MQRraw_free(MQRRawCode *raw);
+
+/******************************************************************************
+ * Frame filling
+ *****************************************************************************/
+extern unsigned char *FrameFiller_test(int version);
+extern unsigned char *FrameFiller_testMQR(int version);
+
+/******************************************************************************
+ * QR-code encoding
+ *****************************************************************************/
+extern QRcode *QRcode_encodeMask(QRinput *input, int mask);
+extern QRcode *QRcode_encodeMaskMQR(QRinput *input, int mask);
+extern QRcode *QRcode_new(int version, int width, unsigned char *data);
+
+#endif /* __QRENCODE_INNER_H__ */
diff --git a/apps/eink-advanced/libqrencode/qrinput.c b/apps/eink-advanced/libqrencode/qrinput.c
new file mode 100644
index 0000000000000000000000000000000000000000..ab196cd100abf4f0eedfbcc78939b44ae148df53
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/qrinput.c
@@ -0,0 +1,1628 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Input data chunk class
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "qrspec.h"
+#include "mqrspec.h"
+#include "bitstream.h"
+#include "qrinput.h"
+
+/******************************************************************************
+ * Utilities
+ *****************************************************************************/
+int QRinput_isSplittableMode(QRencodeMode mode)
+{
+	return (mode >= QR_MODE_NUM && mode <= QR_MODE_KANJI);
+}
+
+/******************************************************************************
+ * Entry of input data
+ *****************************************************************************/
+
+static QRinput_List *QRinput_List_newEntry(QRencodeMode mode, int size, const unsigned char *data)
+{
+	QRinput_List *entry;
+
+	if(QRinput_check(mode, size, data)) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	entry = (QRinput_List *)malloc(sizeof(QRinput_List));
+	if(entry == NULL) return NULL;
+
+	entry->mode = mode;
+	entry->size = size;
+	entry->data = NULL;
+	if(size > 0) {
+		entry->data = (unsigned char *)malloc(size);
+		if(entry->data == NULL) {
+			free(entry);
+			return NULL;
+		}
+		memcpy(entry->data, data, size);
+	}
+	entry->bstream = NULL;
+	entry->next = NULL;
+
+	return entry;
+}
+
+static void QRinput_List_freeEntry(QRinput_List *entry)
+{
+	if(entry != NULL) {
+		free(entry->data);
+		BitStream_free(entry->bstream);
+		free(entry);
+	}
+}
+
+static QRinput_List *QRinput_List_dup(QRinput_List *entry)
+{
+	QRinput_List *n;
+
+	n = (QRinput_List *)malloc(sizeof(QRinput_List));
+	if(n == NULL) return NULL;
+
+	n->mode = entry->mode;
+	n->size = entry->size;
+	n->data = (unsigned char *)malloc(n->size);
+	if(n->data == NULL) {
+		free(n);
+		return NULL;
+	}
+	memcpy(n->data, entry->data, entry->size);
+	n->bstream = NULL;
+	n->next = NULL;
+
+	return n;
+}
+
+/******************************************************************************
+ * Input Data
+ *****************************************************************************/
+
+QRinput *QRinput_new(void)
+{
+	return QRinput_new2(0, QR_ECLEVEL_L);
+}
+
+QRinput *QRinput_new2(int version, QRecLevel level)
+{
+	QRinput *input;
+
+	if(version < 0 || version > QRSPEC_VERSION_MAX || level > QR_ECLEVEL_H) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	input = (QRinput *)malloc(sizeof(QRinput));
+	if(input == NULL) return NULL;
+
+	input->head = NULL;
+	input->tail = NULL;
+	input->version = version;
+	input->level = level;
+	input->mqr = 0;
+	input->fnc1 = 0;
+
+	return input;
+}
+
+QRinput *QRinput_newMQR(int version, QRecLevel level)
+{
+	QRinput *input;
+
+	if(version <= 0 || version > MQRSPEC_VERSION_MAX) goto INVALID;
+	if((MQRspec_getECCLength(version, level) == 0)) goto INVALID;
+
+	input = QRinput_new2(version, level);
+	if(input == NULL) return NULL;
+
+	input->mqr = 1;
+
+	return input;
+
+INVALID:
+	errno = EINVAL;
+	return NULL;
+}
+
+int QRinput_getVersion(QRinput *input)
+{
+	return input->version;
+}
+
+int QRinput_setVersion(QRinput *input, int version)
+{
+	if(input->mqr || version < 0 || version > QRSPEC_VERSION_MAX) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	input->version = version;
+
+	return 0;
+}
+
+QRecLevel QRinput_getErrorCorrectionLevel(QRinput *input)
+{
+	return input->level;
+}
+
+int QRinput_setErrorCorrectionLevel(QRinput *input, QRecLevel level)
+{
+	if(input->mqr || level > QR_ECLEVEL_H) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	input->level = level;
+
+	return 0;
+}
+
+int QRinput_setVersionAndErrorCorrectionLevel(QRinput *input, int version, QRecLevel level)
+{
+	if(input->mqr) {
+		if(version <= 0 || version > MQRSPEC_VERSION_MAX) goto INVALID;
+		if((MQRspec_getECCLength(version, level) == 0)) goto INVALID;
+	} else {
+		if(version < 0 || version > QRSPEC_VERSION_MAX) goto INVALID;
+		if(level > QR_ECLEVEL_H) goto INVALID;
+	}
+
+	input->version = version;
+	input->level = level;
+
+	return 0;
+
+INVALID:
+	errno = EINVAL;
+	return -1;
+}
+
+static void QRinput_appendEntry(QRinput *input, QRinput_List *entry)
+{
+	if(input->tail == NULL) {
+		input->head = entry;
+		input->tail = entry;
+	} else {
+		input->tail->next = entry;
+		input->tail = entry;
+	}
+	entry->next = NULL;
+}
+
+int QRinput_append(QRinput *input, QRencodeMode mode, int size, const unsigned char *data)
+{
+	QRinput_List *entry;
+
+	entry = QRinput_List_newEntry(mode, size, data);
+	if(entry == NULL) {
+		return -1;
+	}
+
+	QRinput_appendEntry(input, entry);
+
+	return 0;
+}
+
+/**
+ * Insert a structured-append header to the head of the input data.
+ * @param input input data.
+ * @param size number of structured symbols.
+ * @param number index number of the symbol. (1 <= number <= size)
+ * @param parity parity among input data. (NOTE: each symbol of a set of structured symbols has the same parity data)
+ * @retval 0 success.
+ * @retval -1 error occurred and errno is set to indeicate the error. See Execptions for the details.
+ * @throw EINVAL invalid parameter.
+ * @throw ENOMEM unable to allocate memory.
+ */
+__STATIC int QRinput_insertStructuredAppendHeader(QRinput *input, int size, int number, unsigned char parity)
+{
+	QRinput_List *entry;
+	unsigned char buf[3];
+
+	if(size > MAX_STRUCTURED_SYMBOLS) {
+		errno = EINVAL;
+		return -1;
+	}
+	if(number <= 0 || number > size) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	buf[0] = (unsigned char)size;
+	buf[1] = (unsigned char)number;
+	buf[2] = parity;
+	entry = QRinput_List_newEntry(QR_MODE_STRUCTURE, 3, buf);
+	if(entry == NULL) {
+		return -1;
+	}
+
+	entry->next = input->head;
+	input->head = entry;
+
+	return 0;
+}
+
+int QRinput_appendECIheader(QRinput *input, unsigned int ecinum)
+{
+	unsigned char data[4];
+
+	if(ecinum > 999999) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	/* We manually create byte array of ecinum because
+	 (unsigned char *)&ecinum may cause bus error on some architectures, */
+	data[0] = ecinum & 0xff;
+	data[1] = (ecinum >>  8) & 0xff;
+	data[2] = (ecinum >> 16) & 0xff;
+	data[3] = (ecinum >> 24) & 0xff;
+	return QRinput_append(input, QR_MODE_ECI, 4, data);
+}
+
+void QRinput_free(QRinput *input)
+{
+	QRinput_List *list, *next;
+
+	if(input != NULL) {
+		list = input->head;
+		while(list != NULL) {
+			next = list->next;
+			QRinput_List_freeEntry(list);
+			list = next;
+		}
+		free(input);
+	}
+}
+
+static unsigned char QRinput_calcParity(QRinput *input)
+{
+	unsigned char parity = 0;
+	QRinput_List *list;
+	int i;
+
+	list = input->head;
+	while(list != NULL) {
+		if(list->mode != QR_MODE_STRUCTURE) {
+			for(i = list->size-1; i >= 0; i--) {
+				parity ^= list->data[i];
+			}
+		}
+		list = list->next;
+	}
+
+	return parity;
+}
+
+QRinput *QRinput_dup(QRinput *input)
+{
+	QRinput *n;
+	QRinput_List *list, *e;
+
+	if(input->mqr) {
+		n = QRinput_newMQR(input->version, input->level);
+	} else {
+		n = QRinput_new2(input->version, input->level);
+	}
+	if(n == NULL) return NULL;
+
+	list = input->head;
+	while(list != NULL) {
+		e = QRinput_List_dup(list);
+		if(e == NULL) {
+			QRinput_free(n);
+			return NULL;
+		}
+		QRinput_appendEntry(n, e);
+		list = list->next;
+	}
+
+	return n;
+}
+
+/******************************************************************************
+ * Numeric data
+ *****************************************************************************/
+
+/**
+ * Check the input data.
+ * @param size
+ * @param data
+ * @return result
+ */
+static int QRinput_checkModeNum(int size, const char *data)
+{
+	int i;
+
+	for(i = 0; i < size; i++) {
+		if(data[i] < '0' || data[i] > '9')
+			return -1;
+	}
+
+	return 0;
+}
+
+/**
+ * Estimate the length of the encoded bit stream of numeric data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsModeNum(int size)
+{
+	int w;
+	int bits;
+
+	w = size / 3;
+	bits = w * 10;
+	switch(size - w * 3) {
+		case 1:
+			bits += 4;
+			break;
+		case 2:
+			bits += 7;
+			break;
+		default:
+			break;
+	}
+
+	return bits;
+}
+
+/**
+ * Convert the number data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_encodeModeNum(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int words, i, ret;
+	unsigned int val;
+
+	if(mqr) {
+		if(version > 1) {
+			ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_NUM);
+			if(ret < 0) return -1;
+		}
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_NUM, version), entry->size);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_NUM);
+		if(ret < 0) return -1;
+
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_NUM, version), entry->size);
+		if(ret < 0) return -1;
+	}
+
+	words = entry->size / 3;
+	for(i = 0; i < words; i++) {
+		val  = (entry->data[i*3  ] - '0') * 100;
+		val += (entry->data[i*3+1] - '0') * 10;
+		val += (entry->data[i*3+2] - '0');
+
+		ret = BitStream_appendNum(bstream, 10, val);
+		if(ret < 0) return -1;
+	}
+
+	if(entry->size - words * 3 == 1) {
+		val = entry->data[words*3] - '0';
+		ret = BitStream_appendNum(bstream, 4, val);
+		if(ret < 0) return -1;
+	} else if(entry->size - words * 3 == 2) {
+		val  = (entry->data[words*3  ] - '0') * 10;
+		val += (entry->data[words*3+1] - '0');
+		BitStream_appendNum(bstream, 7, val);
+		if(ret < 0) return -1;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * Alphabet-numeric data
+ *****************************************************************************/
+
+const signed char QRinput_anTable[128] = {
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,
+	 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 44, -1, -1, -1, -1, -1,
+	-1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
+	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
+};
+
+/**
+ * Check the input data.
+ * @param size
+ * @param data
+ * @return result
+ */
+static int QRinput_checkModeAn(int size, const char *data)
+{
+	int i;
+
+	for(i = 0; i < size; i++) {
+		if(QRinput_lookAnTable(data[i]) < 0)
+			return -1;
+	}
+
+	return 0;
+}
+
+/**
+ * Estimate the length of the encoded bit stream of alphabet-numeric data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsModeAn(int size)
+{
+	int w;
+	int bits;
+
+	w = size / 2;
+	bits = w * 11;
+	if(size & 1) {
+		bits += 6;
+	}
+
+	return bits;
+}
+
+/**
+ * Convert the alphabet-numeric data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL invalid version.
+ */
+static int QRinput_encodeModeAn(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int words, i, ret;
+	unsigned int val;
+
+	if(mqr) {
+		if(version < 2) {
+			errno = EINVAL;
+			return -1;
+		}
+		ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_AN);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_AN, version), entry->size);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_AN);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_AN, version), entry->size);
+		if(ret < 0) return -1;
+	}
+
+	words = entry->size / 2;
+	for(i = 0; i < words; i++) {
+		val  = (unsigned int)QRinput_lookAnTable(entry->data[i*2  ]) * 45;
+		val += (unsigned int)QRinput_lookAnTable(entry->data[i*2+1]);
+
+		ret = BitStream_appendNum(bstream, 11, val);
+		if(ret < 0) return -1;
+	}
+
+	if(entry->size & 1) {
+		val = (unsigned int)QRinput_lookAnTable(entry->data[words * 2]);
+
+		ret = BitStream_appendNum(bstream, 6, val);
+		if(ret < 0) return -1;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * 8 bit data
+ *****************************************************************************/
+
+/**
+ * Estimate the length of the encoded bit stream of 8 bit data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsMode8(int size)
+{
+	return size * 8;
+}
+
+/**
+ * Convert the 8bits data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_encodeMode8(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int ret;
+
+	if(mqr) {
+		if(version < 3) {
+			errno = EINVAL;
+			return -1;
+		}
+		ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_8);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_8, version), entry->size);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_8);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_8, version), entry->size);
+		if(ret < 0) return -1;
+	}
+
+	ret = BitStream_appendBytes(bstream, entry->size, entry->data);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+
+/******************************************************************************
+ * Kanji data
+ *****************************************************************************/
+
+/**
+ * Estimate the length of the encoded bit stream of kanji data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsModeKanji(int size)
+{
+	return (size / 2) * 13;
+}
+
+/**
+ * Check the input data.
+ * @param size
+ * @param data
+ * @return result
+ */
+static int QRinput_checkModeKanji(int size, const unsigned char *data)
+{
+	int i;
+	unsigned int val;
+
+	if(size & 1)
+		return -1;
+
+	for(i = 0; i < size; i+=2) {
+		val = ((unsigned int)data[i] << 8) | data[i+1];
+		if(val < 0x8140 || (val > 0x9ffc && val < 0xe040) || val > 0xebbf) {
+			return -1;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Convert the kanji data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL invalid version.
+ */
+static int QRinput_encodeModeKanji(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int ret, i;
+	unsigned int val, h;
+
+	if(mqr) {
+		if(version < 2) {
+			errno = EINVAL;
+			return -1;
+		}
+		ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_KANJI);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_KANJI, version), entry->size/2);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_KANJI);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_KANJI, version), entry->size/2);
+		if(ret < 0) return -1;
+	}
+
+	for(i = 0; i < entry->size; i+=2) {
+		val = ((unsigned int)entry->data[i] << 8) | entry->data[i+1];
+		if(val <= 0x9ffc) {
+			val -= 0x8140;
+		} else {
+			val -= 0xc140;
+		}
+		h = (val >> 8) * 0xc0;
+		val = (val & 0xff) + h;
+
+		ret = BitStream_appendNum(bstream, 13, val);
+		if(ret < 0) return -1;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * Structured Symbol
+ *****************************************************************************/
+
+/**
+ * Convert a structure symbol code and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL invalid entry.
+ */
+static int QRinput_encodeModeStructure(QRinput_List *entry, BitStream *bstream, int mqr)
+{
+	int ret;
+
+	if(mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_STRUCTURE);
+	if(ret < 0) return -1;
+	ret = BitStream_appendNum(bstream, 4, entry->data[1] - 1);
+	if(ret < 0) return -1;
+	ret = BitStream_appendNum(bstream, 4, entry->data[0] - 1);
+	if(ret < 0) return -1;
+	ret = BitStream_appendNum(bstream, 8, entry->data[2]);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/******************************************************************************
+ * FNC1
+ *****************************************************************************/
+
+static int QRinput_checkModeFNC1Second(int size)
+{
+	if(size != 1) return -1;
+
+	/* No data check required. */
+
+	return 0;
+}
+
+static int QRinput_encodeModeFNC1Second(QRinput_List *entry, BitStream *bstream)
+{
+	int ret;
+
+	ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_FNC1SECOND);
+	if(ret < 0) return -1;
+
+	ret = BitStream_appendBytes(bstream, 1, entry->data);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/******************************************************************************
+ * ECI header
+ *****************************************************************************/
+static unsigned int QRinput_decodeECIfromByteArray(unsigned char *data)
+{
+	int i;
+	unsigned int ecinum;
+
+	ecinum = 0;
+	for(i = 0; i < 4; i++) {
+		ecinum = ecinum << 8;
+		ecinum |= data[3-i];
+	}
+
+	return ecinum;
+}
+
+static int QRinput_estimateBitsModeECI(unsigned char *data)
+{
+	unsigned int ecinum;
+
+	ecinum = QRinput_decodeECIfromByteArray(data);
+
+	/* See Table 4 of JISX 0510:2004 pp.17. */
+	if(ecinum < 128) {
+		return MODE_INDICATOR_SIZE + 8;
+	} else if(ecinum < 16384) {
+		return MODE_INDICATOR_SIZE + 16;
+	} else {
+		return MODE_INDICATOR_SIZE + 24;
+	}
+}
+
+static int QRinput_encodeModeECI(QRinput_List *entry, BitStream *bstream)
+{
+	int ret, words;
+	unsigned int ecinum, code;
+
+	ecinum = QRinput_decodeECIfromByteArray(entry->data);
+
+	/* See Table 4 of JISX 0510:2004 pp.17. */
+	if(ecinum < 128) {
+		words = 1;
+		code = ecinum;
+	} else if(ecinum < 16384) {
+		words = 2;
+		code = 0x8000 + ecinum;
+	} else {
+		words = 3;
+		code = 0xc0000 + ecinum;
+	}
+
+	ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_ECI);
+	if(ret < 0) return -1;
+
+	ret = BitStream_appendNum(bstream, words * 8, code);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/******************************************************************************
+ * Validation
+ *****************************************************************************/
+
+int QRinput_check(QRencodeMode mode, int size, const unsigned char *data)
+{
+	if((mode == QR_MODE_FNC1FIRST && size < 0) || size <= 0) return -1;
+
+	switch(mode) {
+		case QR_MODE_NUM:
+			return QRinput_checkModeNum(size, (const char *)data);
+		case QR_MODE_AN:
+			return QRinput_checkModeAn(size, (const char *)data);
+		case QR_MODE_KANJI:
+			return QRinput_checkModeKanji(size, data);
+		case QR_MODE_8:
+			return 0;
+		case QR_MODE_STRUCTURE:
+			return 0;
+		case QR_MODE_ECI:
+			return 0;
+		case QR_MODE_FNC1FIRST:
+			return 0;
+		case QR_MODE_FNC1SECOND:
+			return QRinput_checkModeFNC1Second(size);
+		case QR_MODE_NUL:
+			break;
+	}
+
+	return -1;
+}
+
+/******************************************************************************
+ * Estimation of the bit length
+ *****************************************************************************/
+
+/**
+ * Estimate the length of the encoded bit stream on the current version.
+ * @param entry
+ * @param version version of the symbol
+ * @param mqr
+ * @return number of bits
+ */
+static int QRinput_estimateBitStreamSizeOfEntry(QRinput_List *entry, int version, int mqr)
+{
+	int bits = 0;
+	int l, m;
+	int num;
+
+	if(version == 0) version = 1;
+
+	switch(entry->mode) {
+		case QR_MODE_NUM:
+			bits = QRinput_estimateBitsModeNum(entry->size);
+			break;
+		case QR_MODE_AN:
+			bits = QRinput_estimateBitsModeAn(entry->size);
+			break;
+		case QR_MODE_8:
+			bits = QRinput_estimateBitsMode8(entry->size);
+			break;
+		case QR_MODE_KANJI:
+			bits = QRinput_estimateBitsModeKanji(entry->size);
+			break;
+		case QR_MODE_STRUCTURE:
+			return STRUCTURE_HEADER_SIZE;
+		case QR_MODE_ECI:
+			bits = QRinput_estimateBitsModeECI(entry->data);
+			break;
+		case QR_MODE_FNC1FIRST:
+			return MODE_INDICATOR_SIZE;
+		case QR_MODE_FNC1SECOND:
+			return MODE_INDICATOR_SIZE + 8;
+		default:
+			return 0;
+	}
+
+	if(mqr) {
+		l = QRspec_lengthIndicator(entry->mode, version);
+		m = version - 1;
+		bits += l + m;
+	} else {
+		l = QRspec_lengthIndicator(entry->mode, version);
+		m = 1 << l;
+		num = (entry->size + m - 1) / m;
+
+		bits += num * (MODE_INDICATOR_SIZE + l);
+	}
+
+	return bits;
+}
+
+/**
+ * Estimate the length of the encoded bit stream of the data.
+ * @param input input data
+ * @param version version of the symbol
+ * @return number of bits
+ */
+__STATIC int QRinput_estimateBitStreamSize(QRinput *input, int version)
+{
+	QRinput_List *list;
+	int bits = 0;
+
+	list = input->head;
+	while(list != NULL) {
+		bits += QRinput_estimateBitStreamSizeOfEntry(list, version, input->mqr);
+		list = list->next;
+	}
+
+	return bits;
+}
+
+/**
+ * Estimate the required version number of the symbol.
+ * @param input input data
+ * @return required version number
+ */
+static int QRinput_estimateVersion(QRinput *input)
+{
+	int bits;
+	int version, prev;
+
+	version = 0;
+	do {
+		prev = version;
+		bits = QRinput_estimateBitStreamSize(input, prev);
+		version = QRspec_getMinimumVersion((bits + 7) / 8, input->level);
+	} while (version > prev);
+
+	return version;
+}
+
+/**
+ * Return required length in bytes for specified mode, version and bits.
+ * @param mode
+ * @param version
+ * @param bits
+ * @return required length of code words in bytes.
+ */
+__STATIC int QRinput_lengthOfCode(QRencodeMode mode, int version, int bits)
+{
+	int payload, size, chunks, remain, maxsize;
+
+	payload = bits - 4 - QRspec_lengthIndicator(mode, version);
+	switch(mode) {
+		case QR_MODE_NUM:
+			chunks = payload / 10;
+			remain = payload - chunks * 10;
+			size = chunks * 3;
+			if(remain >= 7) {
+				size += 2;
+			} else if(remain >= 4) {
+				size += 1;
+			}
+			break;
+		case QR_MODE_AN:
+			chunks = payload / 11;
+			remain = payload - chunks * 11;
+			size = chunks * 2;
+			if(remain >= 6) size++;
+			break;
+		case QR_MODE_8:
+			size = payload / 8;
+			break;
+		case QR_MODE_KANJI:
+			size = (payload / 13) * 2;
+			break;
+		case QR_MODE_STRUCTURE:
+			size = payload / 8;
+			break;
+		default:
+			size = 0;
+			break;
+	}
+	maxsize = QRspec_maximumWords(mode, version);
+	if(size < 0) size = 0;
+	if(maxsize > 0 && size > maxsize) size = maxsize;
+
+	return size;
+}
+
+/******************************************************************************
+ * Data conversion
+ *****************************************************************************/
+
+/**
+ * Convert the input data in the data chunk and append to a bit stream.
+ * @param entry
+ * @param bstream
+ * @return number of bits (>0) or -1 for failure.
+ */
+static int QRinput_encodeBitStream(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int words, ret;
+	QRinput_List *st1 = NULL, *st2 = NULL;
+	int prevsize;
+
+	prevsize = BitStream_size(bstream);
+
+	words = QRspec_maximumWords(entry->mode, version);
+	if(words != 0 && entry->size > words) {
+		st1 = QRinput_List_newEntry(entry->mode, words, entry->data);
+		if(st1 == NULL) goto ABORT;
+		st2 = QRinput_List_newEntry(entry->mode, entry->size - words, &entry->data[words]);
+		if(st2 == NULL) goto ABORT;
+
+		ret = QRinput_encodeBitStream(st1, bstream, version, mqr);
+		if(ret < 0) goto ABORT;
+		ret = QRinput_encodeBitStream(st2, bstream, version, mqr);
+		if(ret < 0) goto ABORT;
+
+		QRinput_List_freeEntry(st1);
+		QRinput_List_freeEntry(st2);
+	} else {
+		ret = 0;
+		switch(entry->mode) {
+			case QR_MODE_NUM:
+				ret = QRinput_encodeModeNum(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_AN:
+				ret = QRinput_encodeModeAn(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_8:
+				ret = QRinput_encodeMode8(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_KANJI:
+				ret = QRinput_encodeModeKanji(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_STRUCTURE:
+				ret = QRinput_encodeModeStructure(entry, bstream, mqr);
+				break;
+			case QR_MODE_ECI:
+				ret = QRinput_encodeModeECI(entry, bstream);
+				break;
+			case QR_MODE_FNC1SECOND:
+				ret = QRinput_encodeModeFNC1Second(entry, bstream);
+				break;
+			default:
+				break;
+		}
+		if(ret < 0) return -1;
+	}
+
+	return BitStream_size(bstream) - prevsize;
+ABORT:
+	QRinput_List_freeEntry(st1);
+	QRinput_List_freeEntry(st2);
+	return -1;
+}
+
+/**
+ * Convert the input data to a bit stream.
+ * @param input input data.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_createBitStream(QRinput *input, BitStream *bstream)
+{
+	QRinput_List *list;
+	int bits, total = 0;
+
+	list = input->head;
+	while(list != NULL) {
+		bits = QRinput_encodeBitStream(list, bstream, input->version, input->mqr);
+		if(bits < 0) return -1;
+		total += bits;
+		list = list->next;
+	}
+
+	return total;
+}
+
+/**
+ * Convert the input data to a bit stream.
+ * When the version number is given and that is not sufficient, it is increased
+ * automatically.
+ * @param input input data.
+ * @param bstream where the converted data is stored.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw ERANGE input data is too large.
+ */
+static int QRinput_convertData(QRinput *input, BitStream *bstream)
+{
+	int bits;
+	int ver;
+
+	ver = QRinput_estimateVersion(input);
+	if(ver > QRinput_getVersion(input)) {
+		QRinput_setVersion(input, ver);
+	}
+
+	for(;;) {
+		BitStream_reset(bstream);
+		bits = QRinput_createBitStream(input, bstream);
+		if(bits < 0) return -1;
+		ver = QRspec_getMinimumVersion((bits + 7) / 8, input->level);
+		if(ver > QRinput_getVersion(input)) {
+			QRinput_setVersion(input, ver);
+		} else {
+			break;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Append padding bits for the input data.
+ * @param bstream Bitstream to be appended.
+ * @param input input data.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ERANGE input data is too large.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_appendPaddingBit(BitStream *bstream, QRinput *input)
+{
+	int bits, maxbits, words, maxwords, i, ret;
+	int padlen;
+
+	bits = BitStream_size(bstream);
+	maxwords = QRspec_getDataLength(input->version, input->level);
+	maxbits = maxwords * 8;
+
+	if(maxbits < bits) {
+		errno = ERANGE;
+		return -1;
+	}
+	if(maxbits == bits) {
+		return 0;
+	}
+
+	if(maxbits - bits <= 4) {
+		return BitStream_appendNum(bstream, maxbits - bits, 0);
+	}
+
+	words = (bits + 4 + 7) / 8;
+
+	ret = BitStream_appendNum(bstream, words * 8 - bits, 0);
+	if(ret < 0) return ret;
+
+	padlen = maxwords - words;
+	if(padlen > 0) {
+		for(i = 0; i < padlen; i++) {
+			ret = BitStream_appendNum(bstream, 8, (i&1)?0x11:0xec);
+			if(ret < 0) {
+				return ret;
+			}
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Append padding bits for the input data - Micro QR Code version.
+ * @param bstream Bitstream to be appended.
+ * @param input input data.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ERANGE input data is too large.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_appendPaddingBitMQR(BitStream *bstream, QRinput *input)
+{
+	int bits, maxbits, words, maxwords, i, ret, termbits;
+	int padlen;
+
+	bits = BitStream_size(bstream);
+	maxbits = MQRspec_getDataLengthBit(input->version, input->level);
+	maxwords = maxbits / 8;
+
+	if(maxbits < bits) {
+		errno = ERANGE;
+		return -1;
+	}
+	if(maxbits == bits) {
+		return 0;
+	}
+
+	termbits = input->version * 2 + 1;
+
+	if(maxbits - bits <= termbits) {
+		return BitStream_appendNum(bstream, maxbits - bits, 0);
+	}
+
+	bits += termbits;
+
+	words = (bits + 7) / 8;
+	if(maxbits - words * 8 > 0) {
+		termbits += words * 8 - bits;
+		if(words == maxwords) termbits += maxbits - words * 8;
+	} else {
+		termbits += words * 8 - bits;
+	}
+	ret = BitStream_appendNum(bstream, termbits, 0);
+	if(ret < 0) return ret;
+
+	padlen = maxwords - words;
+	if(padlen > 0) {
+		for(i = 0; i < padlen; i++) {
+			ret = BitStream_appendNum(bstream, 8, (i&1)?0x11:0xec);
+			if(ret < 0) return ret;
+		}
+		termbits = maxbits - maxwords * 8;
+		if(termbits > 0) {
+			ret = BitStream_appendNum(bstream, termbits, 0);
+			if(ret < 0) return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int QRinput_insertFNC1Header(QRinput *input)
+{
+	QRinput_List *entry = NULL;
+
+	if(input->fnc1 == 1) {
+		entry = QRinput_List_newEntry(QR_MODE_FNC1FIRST, 0, NULL);
+	} else if(input->fnc1 == 2) {
+		entry = QRinput_List_newEntry(QR_MODE_FNC1SECOND, 1, &(input->appid));
+	}
+	if(entry == NULL) {
+		return -1;
+	}
+
+	if(input->head->mode != QR_MODE_STRUCTURE && input->head->mode != QR_MODE_ECI) {
+		entry->next = input->head;
+		input->head = entry;
+	} else {
+		entry->next = input->head->next;
+		input->head->next = entry;
+	}
+
+	return 0;
+}
+
+/**
+ * Merge all bit streams in the input data.
+ * @param input input data.
+ * @return merged bit stream
+ */
+
+__STATIC int QRinput_mergeBitStream(QRinput *input, BitStream *bstream)
+{
+	if(input->mqr) {
+		if(QRinput_createBitStream(input, bstream) < 0) {
+			return -1;
+		}
+	} else {
+		if(input->fnc1) {
+			if(QRinput_insertFNC1Header(input) < 0) {
+				return -1;
+			}
+		}
+		if(QRinput_convertData(input, bstream) < 0) {
+			return -1;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Merge all bit streams in the input data and append padding bits
+ * @param input input data.
+ * @return padded merged bit stream
+ */
+
+__STATIC int QRinput_getBitStream(QRinput *input, BitStream *bstream)
+{
+	int ret;
+
+	ret = QRinput_mergeBitStream(input, bstream);
+	if(ret < 0) return -1;
+
+	if(input->mqr) {
+		ret = QRinput_appendPaddingBitMQR(bstream, input);
+	} else {
+		ret = QRinput_appendPaddingBit(bstream, input);
+	}
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/**
+ * Pack all bit streams padding bits into a byte array.
+ * @param input input data.
+ * @return padded merged byte stream
+ */
+
+unsigned char *QRinput_getByteStream(QRinput *input)
+{
+	BitStream *bstream;
+	unsigned char *array;
+	int ret;
+
+	bstream = BitStream_new();
+	if(bstream == NULL) {
+		return NULL;
+	}
+
+	ret = QRinput_getBitStream(input, bstream);
+	if(ret < 0) {
+		BitStream_free(bstream);
+		return NULL;
+	}
+	array = BitStream_toByte(bstream);
+	BitStream_free(bstream);
+
+	return array;
+}
+
+/******************************************************************************
+ * Structured input data
+ *****************************************************************************/
+
+static QRinput_InputList *QRinput_InputList_newEntry(QRinput *input)
+{
+	QRinput_InputList *entry;
+
+	entry = (QRinput_InputList *)malloc(sizeof(QRinput_InputList));
+	if(entry == NULL) return NULL;
+
+	entry->input = input;
+	entry->next = NULL;
+
+	return entry;
+}
+
+static void QRinput_InputList_freeEntry(QRinput_InputList *entry)
+{
+	if(entry != NULL) {
+		QRinput_free(entry->input);
+		free(entry);
+	}
+}
+
+QRinput_Struct *QRinput_Struct_new(void)
+{
+	QRinput_Struct *s;
+
+	s = (QRinput_Struct *)malloc(sizeof(QRinput_Struct));
+	if(s == NULL) return NULL;
+
+	s->size = 0;
+	s->parity = -1;
+	s->head = NULL;
+	s->tail = NULL;
+
+	return s;
+}
+
+void QRinput_Struct_setParity(QRinput_Struct *s, unsigned char parity)
+{
+	s->parity = (int)parity;
+}
+
+int QRinput_Struct_appendInput(QRinput_Struct *s, QRinput *input)
+{
+	QRinput_InputList *e;
+
+	if(input->mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	e = QRinput_InputList_newEntry(input);
+	if(e == NULL) return -1;
+
+	s->size++;
+	if(s->tail == NULL) {
+		s->head = e;
+		s->tail = e;
+	} else {
+		s->tail->next = e;
+		s->tail = e;
+	}
+
+	return s->size;
+}
+
+void QRinput_Struct_free(QRinput_Struct *s)
+{
+	QRinput_InputList *list, *next;
+
+	if(s != NULL) {
+		list = s->head;
+		while(list != NULL) {
+			next = list->next;
+			QRinput_InputList_freeEntry(list);
+			list = next;
+		}
+		free(s);
+	}
+}
+
+static unsigned char QRinput_Struct_calcParity(QRinput_Struct *s)
+{
+	QRinput_InputList *list;
+	unsigned char parity = 0;
+
+	list = s->head;
+	while(list != NULL) {
+		parity ^= QRinput_calcParity(list->input);
+		list = list->next;
+	}
+
+	QRinput_Struct_setParity(s, parity);
+
+	return parity;
+}
+
+static int QRinput_List_shrinkEntry(QRinput_List *entry, int bytes)
+{
+	unsigned char *data;
+
+	data = (unsigned char *)malloc(bytes);
+	if(data == NULL) return -1;
+
+	memcpy(data, entry->data, bytes);
+	free(entry->data);
+	entry->data = data;
+	entry->size = bytes;
+
+	return 0;
+}
+
+__STATIC int QRinput_splitEntry(QRinput_List *entry, int bytes)
+{
+	QRinput_List *e;
+	int ret;
+
+	e = QRinput_List_newEntry(entry->mode, entry->size - bytes, entry->data + bytes);
+	if(e == NULL) {
+		return -1;
+	}
+
+	ret = QRinput_List_shrinkEntry(entry, bytes);
+	if(ret < 0) {
+		QRinput_List_freeEntry(e);
+		return -1;
+	}
+
+	e->next = entry->next;
+	entry->next = e;
+
+	return 0;
+}
+
+QRinput_Struct *QRinput_splitQRinputToStruct(QRinput *input)
+{
+	QRinput *p = NULL;
+	QRinput_Struct *s = NULL;
+	int bits, maxbits, nextbits, bytes, ret;
+	QRinput_List *list, *next, *prev;
+	BitStream *bstream = NULL;
+
+	if(input->mqr) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	s = QRinput_Struct_new();
+	if(s == NULL) return NULL;
+
+	input = QRinput_dup(input);
+	if(input == NULL) {
+		QRinput_Struct_free(s);
+		return NULL;
+	}
+
+	QRinput_Struct_setParity(s, QRinput_calcParity(input));
+	maxbits = QRspec_getDataLength(input->version, input->level) * 8 - STRUCTURE_HEADER_SIZE;
+
+	if(maxbits <= 0) goto ABORT;
+
+	bstream = BitStream_new();
+	if(bstream == NULL) goto ABORT;
+
+	bits = 0;
+	list = input->head;
+	prev = NULL;
+	while(list != NULL) {
+		nextbits = QRinput_estimateBitStreamSizeOfEntry(list, input->version, input->mqr);
+		if(bits + nextbits <= maxbits) {
+			BitStream_reset(bstream);
+			ret = QRinput_encodeBitStream(list, bstream, input->version, input->mqr);
+			if(ret < 0) goto ABORT;
+			bits += ret;
+			prev = list;
+			list = list->next;
+		} else {
+			bytes = QRinput_lengthOfCode(list->mode, input->version, maxbits - bits);
+			p = QRinput_new2(input->version, input->level);
+			if(p == NULL) goto ABORT;
+			if(bytes > 0) {
+				/* Splits this entry into 2 entries. */
+				ret = QRinput_splitEntry(list, bytes);
+				if(ret < 0) {
+					QRinput_free(p);
+					goto ABORT;
+				}
+				/* First half is the tail of the current input. */
+				next = list->next;
+				list->next = NULL;
+				/* Second half is the head of the next input, p.*/
+				p->head = next;
+				/* Renew QRinput.tail. */
+				p->tail = input->tail;
+				input->tail = list;
+				/* Point to the next entry. */
+				prev = list;
+				list = next;
+			} else {
+				/* Current entry will go to the next input. */
+				prev->next = NULL;
+				p->head = list;
+				p->tail = input->tail;
+				input->tail = prev;
+			}
+			ret = QRinput_Struct_appendInput(s, input);
+			if(ret < 0) {
+				QRinput_free(p);
+				goto ABORT;
+			}
+			input = p;
+			bits = 0;
+		}
+	}
+	ret = QRinput_Struct_appendInput(s, input);
+	if(ret < 0) goto ABORT;
+	if(s->size > MAX_STRUCTURED_SYMBOLS) {
+		errno = ERANGE;
+		QRinput_Struct_free(s);
+		BitStream_free(bstream);
+		return NULL;
+	}
+	ret = QRinput_Struct_insertStructuredAppendHeaders(s);
+	if(ret < 0) {
+		QRinput_Struct_free(s);
+		BitStream_free(bstream);
+		return NULL;
+	}
+
+	BitStream_free(bstream);
+	return s;
+
+ABORT:
+	BitStream_free(bstream);
+	QRinput_free(input);
+	QRinput_Struct_free(s);
+	return NULL;
+}
+
+int QRinput_Struct_insertStructuredAppendHeaders(QRinput_Struct *s)
+{
+	int i;
+	QRinput_InputList *list;
+
+	if(s->size == 1) {
+		return 0;
+	}
+
+	if(s->parity < 0) {
+		QRinput_Struct_calcParity(s);
+	}
+	i = 1;
+	list = s->head;
+	while(list != NULL) {
+		if(QRinput_insertStructuredAppendHeader(list->input, s->size, i, s->parity))
+			return -1;
+		i++;
+		list = list->next;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * Extended encoding mode (FNC1 and ECI)
+ *****************************************************************************/
+
+int QRinput_setFNC1First(QRinput *input)
+{
+	if(input->mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+	input->fnc1 = 1;
+
+	return 0;
+}
+
+int QRinput_setFNC1Second(QRinput *input, unsigned char appid)
+{
+	if(input->mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+	input->fnc1 = 2;
+	input->appid = appid;
+
+	return 0;
+}
diff --git a/apps/eink-advanced/libqrencode/qrinput.h b/apps/eink-advanced/libqrencode/qrinput.h
new file mode 100644
index 0000000000000000000000000000000000000000..dd6dcf35d446d9c9a584e952a7c915aded93c838
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/qrinput.h
@@ -0,0 +1,123 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Input data chunk class
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __QRINPUT_H__
+#define __QRINPUT_H__
+
+#include "qrencode.h"
+#include "bitstream.h"
+
+int QRinput_isSplittableMode(QRencodeMode mode);
+
+/******************************************************************************
+ * Entry of input data
+ *****************************************************************************/
+typedef struct _QRinput_List QRinput_List;
+
+struct _QRinput_List {
+	QRencodeMode mode;
+	int size;				///< Size of data chunk (byte).
+	unsigned char *data;	///< Data chunk.
+	BitStream *bstream;
+	QRinput_List *next;
+};
+
+/******************************************************************************
+ * Input Data
+ *****************************************************************************/
+struct _QRinput {
+	int version;
+	QRecLevel level;
+	QRinput_List *head;
+	QRinput_List *tail;
+	int mqr;
+	int fnc1;
+	unsigned char appid;
+};
+
+/******************************************************************************
+ * Structured append input data
+ *****************************************************************************/
+typedef struct _QRinput_InputList QRinput_InputList;
+
+struct _QRinput_InputList {
+	QRinput *input;
+	QRinput_InputList *next;
+};
+
+struct _QRinput_Struct {
+	int size;					///< number of structured symbols
+	int parity;
+	QRinput_InputList *head;
+	QRinput_InputList *tail;
+};
+
+/**
+ * Pack all bit streams padding bits into a byte array.
+ * @param input input data.
+ * @return padded merged byte stream
+ */
+extern unsigned char *QRinput_getByteStream(QRinput *input);
+
+
+extern int QRinput_estimateBitsModeNum(int size);
+extern int QRinput_estimateBitsModeAn(int size);
+extern int QRinput_estimateBitsMode8(int size);
+extern int QRinput_estimateBitsModeKanji(int size);
+
+extern QRinput *QRinput_dup(QRinput *input);
+
+extern const signed char QRinput_anTable[128];
+
+/**
+ * Look up the alphabet-numeric convesion table (see JIS X0510:2004, pp.19).
+ * @param __c__ character
+ * @return value
+ */
+#define QRinput_lookAnTable(__c__) \
+	((__c__ & 0x80)?-1:QRinput_anTable[(int)__c__])
+
+/**
+ * Length of a standard mode indicator in bits.
+ */
+
+#define MODE_INDICATOR_SIZE 4
+
+/**
+ * Length of a segment of structured-append header.
+ */
+#define STRUCTURE_HEADER_SIZE 20
+
+/**
+ * Maximum number of symbols in a set of structured-appended symbols.
+ */
+#define MAX_STRUCTURED_SYMBOLS 16
+
+#ifdef WITH_TESTS
+extern int QRinput_mergeBitStream(QRinput *input, BitStream *bstream);
+extern int QRinput_getBitStream(QRinput *input, BitStream *bstream);
+extern int QRinput_estimateBitStreamSize(QRinput *input, int version);
+extern int QRinput_splitEntry(QRinput_List *entry, int bytes);
+extern int QRinput_lengthOfCode(QRencodeMode mode, int version, int bits);
+extern int QRinput_insertStructuredAppendHeader(QRinput *input, int size, int index, unsigned char parity);
+#endif
+
+#endif /* __QRINPUT_H__ */
diff --git a/apps/eink-advanced/libqrencode/qrspec.c b/apps/eink-advanced/libqrencode/qrspec.c
new file mode 100644
index 0000000000000000000000000000000000000000..a4d5ba4453b73f338032a6abbfb0399a1695c4b3
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/qrspec.c
@@ -0,0 +1,514 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * QR Code specification in convenient format.
+ * Copyright (C) 2006-2013 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * The following data / specifications are taken from
+ * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
+ *  or
+ * "Automatic identification and data capture techniques --
+ *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "qrspec.h"
+#include "qrinput.h"
+
+/******************************************************************************
+ * Version and capacity
+ *****************************************************************************/
+
+typedef struct {
+	int width; //< Edge length of the symbol
+	int words;  //< Data capacity (bytes)
+	int remainder; //< Remainder bit (bits)
+	int ec[4];  //< Number of ECC code (bytes)
+} QRspec_Capacity;
+
+/**
+ * Table of the capacity of symbols
+ * See Table 1 (pp.13) and Table 12-16 (pp.30-36), JIS X0510:2004.
+ */
+static const QRspec_Capacity qrspecCapacity[QRSPEC_VERSION_MAX + 1] = {
+	{  0,    0, 0, {   0,    0,    0,    0}},
+	{ 21,   26, 0, {   7,   10,   13,   17}}, // 1
+	{ 25,   44, 7, {  10,   16,   22,   28}},
+	{ 29,   70, 7, {  15,   26,   36,   44}},
+	{ 33,  100, 7, {  20,   36,   52,   64}},
+	{ 37,  134, 7, {  26,   48,   72,   88}}, // 5
+	{ 41,  172, 7, {  36,   64,   96,  112}},
+	{ 45,  196, 0, {  40,   72,  108,  130}},
+	{ 49,  242, 0, {  48,   88,  132,  156}},
+	{ 53,  292, 0, {  60,  110,  160,  192}},
+	{ 57,  346, 0, {  72,  130,  192,  224}}, //10
+	{ 61,  404, 0, {  80,  150,  224,  264}},
+	{ 65,  466, 0, {  96,  176,  260,  308}},
+	{ 69,  532, 0, { 104,  198,  288,  352}},
+	{ 73,  581, 3, { 120,  216,  320,  384}},
+	{ 77,  655, 3, { 132,  240,  360,  432}}, //15
+	{ 81,  733, 3, { 144,  280,  408,  480}},
+	{ 85,  815, 3, { 168,  308,  448,  532}},
+	{ 89,  901, 3, { 180,  338,  504,  588}},
+	{ 93,  991, 3, { 196,  364,  546,  650}},
+	{ 97, 1085, 3, { 224,  416,  600,  700}}, //20
+	{101, 1156, 4, { 224,  442,  644,  750}},
+	{105, 1258, 4, { 252,  476,  690,  816}},
+	{109, 1364, 4, { 270,  504,  750,  900}},
+	{113, 1474, 4, { 300,  560,  810,  960}},
+	{117, 1588, 4, { 312,  588,  870, 1050}}, //25
+	{121, 1706, 4, { 336,  644,  952, 1110}},
+	{125, 1828, 4, { 360,  700, 1020, 1200}},
+	{129, 1921, 3, { 390,  728, 1050, 1260}},
+	{133, 2051, 3, { 420,  784, 1140, 1350}},
+	{137, 2185, 3, { 450,  812, 1200, 1440}}, //30
+	{141, 2323, 3, { 480,  868, 1290, 1530}},
+	{145, 2465, 3, { 510,  924, 1350, 1620}},
+	{149, 2611, 3, { 540,  980, 1440, 1710}},
+	{153, 2761, 3, { 570, 1036, 1530, 1800}},
+	{157, 2876, 0, { 570, 1064, 1590, 1890}}, //35
+	{161, 3034, 0, { 600, 1120, 1680, 1980}},
+	{165, 3196, 0, { 630, 1204, 1770, 2100}},
+	{169, 3362, 0, { 660, 1260, 1860, 2220}},
+	{173, 3532, 0, { 720, 1316, 1950, 2310}},
+	{177, 3706, 0, { 750, 1372, 2040, 2430}} //40
+};
+
+int QRspec_getDataLength(int version, QRecLevel level)
+{
+	return qrspecCapacity[version].words - qrspecCapacity[version].ec[level];
+}
+
+int QRspec_getECCLength(int version, QRecLevel level)
+{
+	return qrspecCapacity[version].ec[level];
+}
+
+int QRspec_getMinimumVersion(int size, QRecLevel level)
+{
+	int i;
+	int words;
+
+	for(i = 1; i <= QRSPEC_VERSION_MAX; i++) {
+		words  = qrspecCapacity[i].words - qrspecCapacity[i].ec[level];
+		if(words >= size) return i;
+	}
+
+	return QRSPEC_VERSION_MAX;
+}
+
+int QRspec_getWidth(int version)
+{
+	return qrspecCapacity[version].width;
+}
+
+int QRspec_getRemainder(int version)
+{
+	return qrspecCapacity[version].remainder;
+}
+
+/******************************************************************************
+ * Length indicator
+ *****************************************************************************/
+
+static const int lengthTableBits[4][3] = {
+	{10, 12, 14},
+	{ 9, 11, 13},
+	{ 8, 16, 16},
+	{ 8, 10, 12}
+};
+
+int QRspec_lengthIndicator(QRencodeMode mode, int version)
+{
+	int l;
+
+	if(!QRinput_isSplittableMode(mode)) return 0;
+	if(version <= 9) {
+		l = 0;
+	} else if(version <= 26) {
+		l = 1;
+	} else {
+		l = 2;
+	}
+
+	return lengthTableBits[mode][l];
+}
+
+int QRspec_maximumWords(QRencodeMode mode, int version)
+{
+	int l;
+	int bits;
+	int words;
+
+	if(!QRinput_isSplittableMode(mode)) return 0;
+	if(version <= 9) {
+		l = 0;
+	} else if(version <= 26) {
+		l = 1;
+	} else {
+		l = 2;
+	}
+
+	bits = lengthTableBits[mode][l];
+	words = (1 << bits) - 1;
+	if(mode == QR_MODE_KANJI) {
+		words *= 2; // the number of bytes is required
+	}
+
+	return words;
+}
+
+/******************************************************************************
+ * Error correction code
+ *****************************************************************************/
+
+/**
+ * Table of the error correction code (Reed-Solomon block)
+ * See Table 12-16 (pp.30-36), JIS X0510:2004.
+ */
+static const int eccTable[QRSPEC_VERSION_MAX+1][4][2] = {
+	{{ 0,  0}, { 0,  0}, { 0,  0}, { 0,  0}},
+	{{ 1,  0}, { 1,  0}, { 1,  0}, { 1,  0}}, // 1
+	{{ 1,  0}, { 1,  0}, { 1,  0}, { 1,  0}},
+	{{ 1,  0}, { 1,  0}, { 2,  0}, { 2,  0}},
+	{{ 1,  0}, { 2,  0}, { 2,  0}, { 4,  0}},
+	{{ 1,  0}, { 2,  0}, { 2,  2}, { 2,  2}}, // 5
+	{{ 2,  0}, { 4,  0}, { 4,  0}, { 4,  0}},
+	{{ 2,  0}, { 4,  0}, { 2,  4}, { 4,  1}},
+	{{ 2,  0}, { 2,  2}, { 4,  2}, { 4,  2}},
+	{{ 2,  0}, { 3,  2}, { 4,  4}, { 4,  4}},
+	{{ 2,  2}, { 4,  1}, { 6,  2}, { 6,  2}}, //10
+	{{ 4,  0}, { 1,  4}, { 4,  4}, { 3,  8}},
+	{{ 2,  2}, { 6,  2}, { 4,  6}, { 7,  4}},
+	{{ 4,  0}, { 8,  1}, { 8,  4}, {12,  4}},
+	{{ 3,  1}, { 4,  5}, {11,  5}, {11,  5}},
+	{{ 5,  1}, { 5,  5}, { 5,  7}, {11,  7}}, //15
+	{{ 5,  1}, { 7,  3}, {15,  2}, { 3, 13}},
+	{{ 1,  5}, {10,  1}, { 1, 15}, { 2, 17}},
+	{{ 5,  1}, { 9,  4}, {17,  1}, { 2, 19}},
+	{{ 3,  4}, { 3, 11}, {17,  4}, { 9, 16}},
+	{{ 3,  5}, { 3, 13}, {15,  5}, {15, 10}}, //20
+	{{ 4,  4}, {17,  0}, {17,  6}, {19,  6}},
+	{{ 2,  7}, {17,  0}, { 7, 16}, {34,  0}},
+	{{ 4,  5}, { 4, 14}, {11, 14}, {16, 14}},
+	{{ 6,  4}, { 6, 14}, {11, 16}, {30,  2}},
+	{{ 8,  4}, { 8, 13}, { 7, 22}, {22, 13}}, //25
+	{{10,  2}, {19,  4}, {28,  6}, {33,  4}},
+	{{ 8,  4}, {22,  3}, { 8, 26}, {12, 28}},
+	{{ 3, 10}, { 3, 23}, { 4, 31}, {11, 31}},
+	{{ 7,  7}, {21,  7}, { 1, 37}, {19, 26}},
+	{{ 5, 10}, {19, 10}, {15, 25}, {23, 25}}, //30
+	{{13,  3}, { 2, 29}, {42,  1}, {23, 28}},
+	{{17,  0}, {10, 23}, {10, 35}, {19, 35}},
+	{{17,  1}, {14, 21}, {29, 19}, {11, 46}},
+	{{13,  6}, {14, 23}, {44,  7}, {59,  1}},
+	{{12,  7}, {12, 26}, {39, 14}, {22, 41}}, //35
+	{{ 6, 14}, { 6, 34}, {46, 10}, { 2, 64}},
+	{{17,  4}, {29, 14}, {49, 10}, {24, 46}},
+	{{ 4, 18}, {13, 32}, {48, 14}, {42, 32}},
+	{{20,  4}, {40,  7}, {43, 22}, {10, 67}},
+	{{19,  6}, {18, 31}, {34, 34}, {20, 61}},//40
+};
+
+void QRspec_getEccSpec(int version, QRecLevel level, int spec[5])
+{
+	int b1, b2;
+	int data, ecc;
+
+	b1 = eccTable[version][level][0];
+	b2 = eccTable[version][level][1];
+	data = QRspec_getDataLength(version, level);
+	ecc  = QRspec_getECCLength(version, level);
+
+	if(b2 == 0) {
+		spec[0] = b1;
+		spec[1] = data / b1;
+		spec[2] = ecc / b1;
+		spec[3] = spec[4] = 0;
+	} else {
+		spec[0] = b1;
+		spec[1] = data / (b1 + b2);
+		spec[2] = ecc  / (b1 + b2);
+		spec[3] = b2;
+		spec[4] = spec[1] + 1;
+	}
+}
+
+/******************************************************************************
+ * Alignment pattern
+ *****************************************************************************/
+
+/**
+ * Positions of alignment patterns.
+ * This array includes only the second and the third position of the alignment
+ * patterns. Rest of them can be calculated from the distance between them.
+ *
+ * See Table 1 in Appendix E (pp.71) of JIS X0510:2004.
+ */
+static const int alignmentPattern[QRSPEC_VERSION_MAX+1][2] = {
+	{ 0,  0},
+	{ 0,  0}, {18,  0}, {22,  0}, {26,  0}, {30,  0}, // 1- 5
+	{34,  0}, {22, 38}, {24, 42}, {26, 46}, {28, 50}, // 6-10
+	{30, 54}, {32, 58}, {34, 62}, {26, 46}, {26, 48}, //11-15
+	{26, 50}, {30, 54}, {30, 56}, {30, 58}, {34, 62}, //16-20
+	{28, 50}, {26, 50}, {30, 54}, {28, 54}, {32, 58}, //21-25
+	{30, 58}, {34, 62}, {26, 50}, {30, 54}, {26, 52}, //26-30
+	{30, 56}, {34, 60}, {30, 58}, {34, 62}, {30, 54}, //31-35
+	{24, 50}, {28, 54}, {32, 58}, {26, 54}, {30, 58}, //35-40
+};
+
+/**
+ * Put an alignment marker.
+ * @param frame
+ * @param width
+ * @param ox,oy center coordinate of the pattern
+ */
+static void QRspec_putAlignmentMarker(unsigned char *frame, int width, int ox, int oy)
+{
+	static const unsigned char finder[] = {
+		0xa1, 0xa1, 0xa1, 0xa1, 0xa1,
+		0xa1, 0xa0, 0xa0, 0xa0, 0xa1,
+		0xa1, 0xa0, 0xa1, 0xa0, 0xa1,
+		0xa1, 0xa0, 0xa0, 0xa0, 0xa1,
+		0xa1, 0xa1, 0xa1, 0xa1, 0xa1,
+	};
+	int x, y;
+	const unsigned char *s;
+
+	frame += (oy - 2) * width + ox - 2;
+	s = finder;
+	for(y = 0; y < 5; y++) {
+		for(x = 0; x < 5; x++) {
+			frame[x] = s[x];
+		}
+		frame += width;
+		s += 5;
+	}
+}
+
+static void QRspec_putAlignmentPattern(int version, unsigned char *frame, int width)
+{
+	int d, w, x, y, cx, cy;
+
+	if(version < 2) return;
+
+	d = alignmentPattern[version][1] - alignmentPattern[version][0];
+	if(d < 0) {
+		w = 2;
+	} else {
+		w = (width - alignmentPattern[version][0]) / d + 2;
+	}
+
+	if(w * w - 3 == 1) {
+		x = alignmentPattern[version][0];
+		y = alignmentPattern[version][0];
+		QRspec_putAlignmentMarker(frame, width, x, y);
+		return;
+	}
+
+	cx = alignmentPattern[version][0];
+	for(x = 1; x < w - 1; x++) {
+		QRspec_putAlignmentMarker(frame, width,  6, cx);
+		QRspec_putAlignmentMarker(frame, width, cx,  6);
+		cx += d;
+	}
+
+	cy = alignmentPattern[version][0];
+	for(y = 0; y < w-1; y++) {
+		cx = alignmentPattern[version][0];
+		for(x = 0; x < w-1; x++) {
+			QRspec_putAlignmentMarker(frame, width, cx, cy);
+			cx += d;
+		}
+		cy += d;
+	}
+}
+
+/******************************************************************************
+ * Version information pattern
+ *****************************************************************************/
+
+/**
+ * Version information pattern (BCH coded).
+ * See Table 1 in Appendix D (pp.68) of JIS X0510:2004.
+ */
+static const unsigned int versionPattern[QRSPEC_VERSION_MAX - 6] = {
+	0x07c94, 0x085bc, 0x09a99, 0x0a4d3, 0x0bbf6, 0x0c762, 0x0d847, 0x0e60d,
+	0x0f928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9,
+	0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75,
+	0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64,
+	0x27541, 0x28c69
+};
+
+unsigned int QRspec_getVersionPattern(int version)
+{
+	if(version < 7 || version > QRSPEC_VERSION_MAX) return 0;
+
+	return versionPattern[version - 7];
+}
+
+/******************************************************************************
+ * Format information
+ *****************************************************************************/
+
+/* See calcFormatInfo in tests/test_qrspec.c */
+static const unsigned int formatInfo[4][8] = {
+	{0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976},
+	{0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0},
+	{0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed},
+	{0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b}
+};
+
+unsigned int QRspec_getFormatInfo(int mask, QRecLevel level)
+{
+	if(mask < 0 || mask > 7) return 0;
+
+	return formatInfo[level][mask];
+}
+
+/******************************************************************************
+ * Frame
+ *****************************************************************************/
+
+/**
+ * Put a finder pattern.
+ * @param frame
+ * @param width
+ * @param ox,oy upper-left coordinate of the pattern
+ */
+static void putFinderPattern(unsigned char *frame, int width, int ox, int oy)
+{
+	static const unsigned char finder[] = {
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+	};
+	int x, y;
+	const unsigned char *s;
+
+	frame += oy * width + ox;
+	s = finder;
+	for(y = 0; y < 7; y++) {
+		for(x = 0; x < 7; x++) {
+			frame[x] = s[x];
+		}
+		frame += width;
+		s += 7;
+	}
+}
+
+
+static unsigned char *QRspec_createFrame(int version)
+{
+	unsigned char *frame, *p, *q;
+	int width;
+	int x, y;
+	unsigned int verinfo, v;
+
+	width = qrspecCapacity[version].width;
+	frame = (unsigned char *)malloc(width * width);
+	if(frame == NULL) return NULL;
+
+	memset(frame, 0, width * width);
+	/* Finder pattern */
+	putFinderPattern(frame, width, 0, 0);
+	putFinderPattern(frame, width, width - 7, 0);
+	putFinderPattern(frame, width, 0, width - 7);
+	/* Separator */
+	p = frame;
+	q = frame + width * (width - 7);
+	for(y = 0; y < 7; y++) {
+		p[7] = 0xc0;
+		p[width - 8] = 0xc0;
+		q[7] = 0xc0;
+		p += width;
+		q += width;
+	}
+	memset(frame + width * 7, 0xc0, 8);
+	memset(frame + width * 8 - 8, 0xc0, 8);
+	memset(frame + width * (width - 8), 0xc0, 8);
+	/* Mask format information area */
+	memset(frame + width * 8, 0x84, 9);
+	memset(frame + width * 9 - 8, 0x84, 8);
+	p = frame + 8;
+	for(y = 0; y < 8; y++) {
+		*p = 0x84;
+		p += width;
+	}
+	p = frame + width * (width - 7) + 8;
+	for(y = 0; y < 7; y++) {
+		*p = 0x84;
+		p += width;
+	}
+	/* Timing pattern */
+	p = frame + width * 6 + 8;
+	q = frame + width * 8 + 6;
+	for(x = 1; x < width-15; x++) {
+		*p =  0x90 | (x & 1);
+		*q =  0x90 | (x & 1);
+		p++;
+		q += width;
+	}
+	/* Alignment pattern */
+	QRspec_putAlignmentPattern(version, frame, width);
+
+	/* Version information */
+	if(version >= 7) {
+		verinfo = QRspec_getVersionPattern(version);
+
+		p = frame + width * (width - 11);
+		v = verinfo;
+		for(x = 0; x < 6; x++) {
+			for(y = 0; y < 3; y++) {
+				p[width * y + x] = 0x88 | (v & 1);
+				v = v >> 1;
+			}
+		}
+
+		p = frame + width - 11;
+		v = verinfo;
+		for(y = 0; y < 6; y++) {
+			for(x = 0; x < 3; x++) {
+				p[x] = 0x88 | (v & 1);
+				v = v >> 1;
+			}
+			p += width;
+		}
+	}
+	/* and a little bit... */
+	frame[width * (width - 8) + 8] = 0x81;
+
+	return frame;
+}
+
+unsigned char *QRspec_newFrame(int version)
+{
+	if(version < 1 || version > QRSPEC_VERSION_MAX) return NULL;
+
+	return QRspec_createFrame(version);
+}
diff --git a/apps/eink-advanced/libqrencode/qrspec.h b/apps/eink-advanced/libqrencode/qrspec.h
new file mode 100644
index 0000000000000000000000000000000000000000..f28af81f1ed3953d064b083faacb8a94f412009b
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/qrspec.h
@@ -0,0 +1,174 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * QR Code specification in convenient format.
+ * Copyright (C) 2006-2013 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __QRSPEC_H__
+#define __QRSPEC_H__
+
+#include "qrencode.h"
+
+/******************************************************************************
+ * Version and capacity
+ *****************************************************************************/
+
+/**
+ * Maximum width of a symbol
+ */
+#define QRSPEC_WIDTH_MAX 177
+
+/**
+ * Return maximum data code length (bytes) for the version.
+ * @param version version of the symbol
+ * @param level error correction level
+ * @return maximum size (bytes)
+ */
+extern int QRspec_getDataLength(int version, QRecLevel level);
+
+/**
+ * Return maximum error correction code length (bytes) for the version.
+ * @param version version of the symbol
+ * @param level error correction level
+ * @return ECC size (bytes)
+ */
+extern int QRspec_getECCLength(int version, QRecLevel level);
+
+/**
+ * Return a version number that satisfies the input code length.
+ * @param size input code length (byte)
+ * @param level error correction level
+ * @return version number
+ */
+extern int QRspec_getMinimumVersion(int size, QRecLevel level);
+
+/**
+ * Return the width of the symbol for the version.
+ * @param version vesion of the symbol
+ * @return width of the symbol
+ */
+extern int QRspec_getWidth(int version);
+
+/**
+ * Return the numer of remainder bits.
+ * @param version vesion of the symbol
+ * @return number of remainder bits
+ */
+extern int QRspec_getRemainder(int version);
+
+/******************************************************************************
+ * Length indicator
+ *****************************************************************************/
+
+/**
+ * Return the size of length indicator for the mode and version.
+ * @param mode encode mode
+ * @param version vesion of the symbol
+ * @return the size of the appropriate length indicator (bits).
+ */
+extern int QRspec_lengthIndicator(QRencodeMode mode, int version);
+
+/**
+ * Return the maximum length for the mode and version.
+ * @param mode encode mode
+ * @param version vesion of the symbol
+ * @return the maximum length (bytes)
+ */
+extern int QRspec_maximumWords(QRencodeMode mode, int version);
+
+/******************************************************************************
+ * Error correction code
+ *****************************************************************************/
+
+/**
+ * Return an array of ECC specification.
+ * @param version version of the symbol
+ * @param level error correction level
+ * @param spec an array of ECC specification contains as following:
+ * {# of type1 blocks, # of data code, # of ecc code,
+ *  # of type2 blocks, # of data code}
+ */
+void QRspec_getEccSpec(int version, QRecLevel level, int spec[5]);
+
+#define QRspec_rsBlockNum(__spec__) (__spec__[0] + __spec__[3])
+#define QRspec_rsBlockNum1(__spec__) (__spec__[0])
+#define QRspec_rsDataCodes1(__spec__) (__spec__[1])
+#define QRspec_rsEccCodes1(__spec__) (__spec__[2])
+#define QRspec_rsBlockNum2(__spec__) (__spec__[3])
+#define QRspec_rsDataCodes2(__spec__) (__spec__[4])
+#define QRspec_rsEccCodes2(__spec__) (__spec__[2])
+
+#define QRspec_rsDataLength(__spec__) \
+	((QRspec_rsBlockNum1(__spec__) * QRspec_rsDataCodes1(__spec__)) + \
+	 (QRspec_rsBlockNum2(__spec__) * QRspec_rsDataCodes2(__spec__)))
+#define QRspec_rsEccLength(__spec__) \
+	(QRspec_rsBlockNum(__spec__) * QRspec_rsEccCodes1(__spec__))
+
+/******************************************************************************
+ * Version information pattern
+ *****************************************************************************/
+
+/**
+ * Return BCH encoded version information pattern that is used for the symbol
+ * of version 7 or greater. Use lower 18 bits.
+ * @param version version of the symbol
+ * @return BCH encoded version information pattern
+ */
+extern unsigned int QRspec_getVersionPattern(int version);
+
+/******************************************************************************
+ * Format information
+ *****************************************************************************/
+
+/**
+ * Return BCH encoded format information pattern.
+ * @param mask mask number
+ * @param level error correction level
+ * @return BCH encoded format information pattern
+ */
+extern unsigned int QRspec_getFormatInfo(int mask, QRecLevel level);
+
+/******************************************************************************
+ * Frame
+ *****************************************************************************/
+
+/**
+ * Return a copy of initialized frame.
+ * @param version version of the symbol
+ * @return Array of unsigned char. You can free it by free().
+ */
+extern unsigned char *QRspec_newFrame(int version);
+
+/******************************************************************************
+ * Mode indicator
+ *****************************************************************************/
+
+/**
+ * Mode indicator. See Table 2 of JIS X0510:2004, pp.16.
+ */
+#define QRSPEC_MODEID_ECI        7
+#define QRSPEC_MODEID_NUM        1
+#define QRSPEC_MODEID_AN         2
+#define QRSPEC_MODEID_8          4
+#define QRSPEC_MODEID_KANJI      8
+#define QRSPEC_MODEID_FNC1FIRST  5
+#define QRSPEC_MODEID_FNC1SECOND 9
+#define QRSPEC_MODEID_STRUCTURE  3
+#define QRSPEC_MODEID_TERMINATOR 0
+
+#endif /* __QRSPEC_H__ */
diff --git a/apps/eink-advanced/libqrencode/rsecc.c b/apps/eink-advanced/libqrencode/rsecc.c
new file mode 100644
index 0000000000000000000000000000000000000000..5ca0511ab6cfbbc6b186d543467483cabba37025
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/rsecc.c
@@ -0,0 +1,149 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Reed solomon error correction code encoder specialized for QR code.
+ * This code is rewritten by Kentaro Fukuchi, referring to the FEC library
+ * developed by Phil Karn (KA9Q).
+ *
+ * Copyright (C) 2002, 2003, 2004, 2006 Phil Karn, KA9Q
+ * Copyright (C) 2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#if HAVE_LIBPTHREAD
+#include <pthread.h>
+#endif
+
+#include "rsecc.h"
+
+#if HAVE_LIBPTHREAD
+static pthread_mutex_t RSECC_mutex = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
+static int initialized = 0;
+
+#define SYMBOL_SIZE (8)
+#define symbols ((1 << SYMBOL_SIZE) - 1)
+static const int proot = 0x11d; /* stands for x^8+x^4+x^3+x^2+1 (see pp.37 of JIS X0510:2004) */
+
+/* min/max codeword length of ECC, calculated from the specification. */
+#define min_length (2)
+#define max_length (30)
+#define max_generatorSize (max_length)
+
+static unsigned char alpha[symbols + 1];
+static unsigned char aindex[symbols + 1];
+static unsigned char generator[max_length - min_length + 1][max_generatorSize + 1];
+static unsigned char generatorInitialized[max_length - min_length + 1];
+
+static void RSECC_initLookupTable(void)
+{
+	int i, b;
+
+	alpha[symbols] = 0;
+	aindex[0] = symbols;
+
+	b = 1;
+	for(i = 0; i < symbols; i++) {
+		alpha[i] = b;
+		aindex[b] = i;
+		b <<= 1;
+		if(b & (symbols + 1)) {
+			b ^= proot;
+		}
+		b &= symbols;
+	}
+}
+
+static void RSECC_init(void)
+{
+	RSECC_initLookupTable();
+	memset(generatorInitialized, 0, (max_length - min_length + 1));
+	initialized = 1;
+}
+
+static void generator_init(int length)
+{
+	int i, j;
+	int g[max_generatorSize + 1];
+
+	g[0] = 1;
+	for(i = 0; i < length; i++) {
+		g[i + 1] = 1;
+		/* Because g[0] never be zero, skipped some conditional checks. */
+		for(j = i; j > 0; j--) {
+			g[j] = g[j - 1] ^  alpha[(aindex[g[j]] + i) % symbols];
+		}
+		g[0] = alpha[(aindex[g[0]] + i) % symbols];
+	}
+
+	for(i = 0; i <= length; i++) {
+		generator[length - min_length][i] = aindex[g[i]];
+	}
+
+	generatorInitialized[length - min_length] = 1;
+}
+
+int RSECC_encode(int data_length, int ecc_length, const unsigned char *data, unsigned char *ecc)
+{
+	int i, j;
+	unsigned char feedback;
+	unsigned char *gen;
+
+#if HAVE_LIBPTHREAD
+	pthread_mutex_lock(&RSECC_mutex);
+#endif
+	if(!initialized) {
+		RSECC_init();
+	}
+#if HAVE_LIBPTHREAD
+	pthread_mutex_unlock(&RSECC_mutex);
+#endif
+
+	if(ecc_length > max_length) return -1;
+
+	memset(ecc, 0, ecc_length);
+#if HAVE_LIBPTHREAD
+	pthread_mutex_lock(&RSECC_mutex);
+#endif
+	if(!generatorInitialized[ecc_length - min_length]) generator_init(ecc_length);
+#if HAVE_LIBPTHREAD
+	pthread_mutex_unlock(&RSECC_mutex);
+#endif
+	gen = generator[ecc_length - min_length];
+
+	for(i = 0; i < data_length; i++) {
+		feedback = aindex[data[i] ^ ecc[0]];
+		if(feedback != symbols) {
+			for(j = 1; j < ecc_length; j++) {
+				ecc[j] ^= alpha[(feedback + gen[ecc_length - j]) % symbols];
+			}
+		}
+		memmove(&ecc[0], &ecc[1], ecc_length - 1);
+		if(feedback != symbols) {
+			ecc[ecc_length - 1] = alpha[(feedback + gen[0]) % symbols];
+		} else {
+			ecc[ecc_length - 1] = 0;
+		}
+	}
+
+	return 0;
+}
diff --git a/apps/eink-advanced/libqrencode/rsecc.h b/apps/eink-advanced/libqrencode/rsecc.h
new file mode 100644
index 0000000000000000000000000000000000000000..41941e9eb284714ccaae5afc6f624cd513739a52
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/rsecc.h
@@ -0,0 +1,31 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Reed solomon error correction code encoder specialized for QR code.
+ * This code is rewritten by Kentaro Fukuchi, referring to the FEC library
+ * developed by Phil Karn (KA9Q).
+ *
+ * Copyright (C) 2002, 2003, 2004, 2006 Phil Karn, KA9Q
+ * Copyright (C) 2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __RSECC_H__
+#define __RSECC_H__
+
+extern int RSECC_encode(int data_length, int ecc_length, const unsigned char *data, unsigned char *ecc);
+
+#endif /* __RSECC_H__ */
diff --git a/apps/eink-advanced/libqrencode/split.c b/apps/eink-advanced/libqrencode/split.c
new file mode 100644
index 0000000000000000000000000000000000000000..d894aa5eefcf45a438b4a25b6725ceea81302fe3
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/split.c
@@ -0,0 +1,324 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Input data splitter.
+ * Copyright (C) 2006-2013 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * The following data / specifications are taken from
+ * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
+ *  or
+ * "Automatic identification and data capture techniques --
+ *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include "qrencode.h"
+#include "qrinput.h"
+#include "qrspec.h"
+#include "split.h"
+
+#define isdigit(__c__) ((unsigned char)((signed char)(__c__) - '0') < 10)
+#define isalnum(__c__) (QRinput_lookAnTable(__c__) >= 0)
+
+#if !HAVE_STRDUP
+#undef strdup
+char *strdup(const char *s)
+{
+	size_t len = strlen(s) + 1;
+	void *newstring = malloc(len);
+	if(newstring == NULL) return NULL;
+	return (char *)memcpy(newstring, s, len);
+}
+#endif
+
+static QRencodeMode Split_identifyMode(const char *string, QRencodeMode hint)
+{
+	unsigned char c, d;
+	unsigned int word;
+
+	c = string[0];
+
+	if(c == '\0') return QR_MODE_NUL;
+	if(isdigit(c)) {
+		return QR_MODE_NUM;
+	} else if(isalnum(c)) {
+		return QR_MODE_AN;
+	} else if(hint == QR_MODE_KANJI) {
+		d = string[1];
+		if(d != '\0') {
+			word = ((unsigned int)c << 8) | d;
+			if((word >= 0x8140 && word <= 0x9ffc) || (word >= 0xe040 && word <= 0xebbf)) {
+				return QR_MODE_KANJI;
+			}
+		}
+	}
+
+	return QR_MODE_8;
+}
+
+static int Split_eatAn(const char *string, QRinput *input, QRencodeMode hint);
+static int Split_eat8(const char *string, QRinput *input, QRencodeMode hint);
+
+static int Split_eatNum(const char *string, QRinput *input,QRencodeMode hint)
+{
+	const char *p;
+	int ret;
+	int run;
+	int dif;
+	int ln;
+	QRencodeMode mode;
+
+	ln = QRspec_lengthIndicator(QR_MODE_NUM, input->version);
+
+	p = string;
+	while(isdigit(*p)) {
+		p++;
+	}
+	run = p - string;
+	mode = Split_identifyMode(p, hint);
+	if(mode == QR_MODE_8) {
+		dif = QRinput_estimateBitsModeNum(run) + 4 + ln
+			+ QRinput_estimateBitsMode8(1) /* + 4 + l8 */
+			- QRinput_estimateBitsMode8(run + 1) /* - 4 - l8 */;
+		if(dif > 0) {
+			return Split_eat8(string, input, hint);
+		}
+	}
+	if(mode == QR_MODE_AN) {
+		dif = QRinput_estimateBitsModeNum(run) + 4 + ln
+			+ QRinput_estimateBitsModeAn(1) /* + 4 + la */
+			- QRinput_estimateBitsModeAn(run + 1) /* - 4 - la */;
+		if(dif > 0) {
+			return Split_eatAn(string, input, hint);
+		}
+	}
+
+	ret = QRinput_append(input, QR_MODE_NUM, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_eatAn(const char *string, QRinput *input, QRencodeMode hint)
+{
+	const char *p, *q;
+	int ret;
+	int run;
+	int dif;
+	int la, ln;
+
+	la = QRspec_lengthIndicator(QR_MODE_AN, input->version);
+	ln = QRspec_lengthIndicator(QR_MODE_NUM, input->version);
+
+	p = string;
+	while(isalnum(*p)) {
+		if(isdigit(*p)) {
+			q = p;
+			while(isdigit(*q)) {
+				q++;
+			}
+			dif = QRinput_estimateBitsModeAn(p - string) /* + 4 + la */
+				+ QRinput_estimateBitsModeNum(q - p) + 4 + ln
+				+ (isalnum(*q)?(4 + ln):0)
+				- QRinput_estimateBitsModeAn(q - string) /* - 4 - la */;
+			if(dif < 0) {
+				break;
+			} else {
+				p = q;
+			}
+		} else {
+			p++;
+		}
+	}
+
+	run = p - string;
+
+	if(*p && !isalnum(*p)) {
+		dif = QRinput_estimateBitsModeAn(run) + 4 + la
+			+ QRinput_estimateBitsMode8(1) /* + 4 + l8 */
+			- QRinput_estimateBitsMode8(run + 1) /* - 4 - l8 */;
+		if(dif > 0) {
+			return Split_eat8(string, input, hint);
+		}
+	}
+
+	ret = QRinput_append(input, QR_MODE_AN, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_eatKanji(const char *string, QRinput *input, QRencodeMode hint)
+{
+	const char *p;
+	int ret;
+	int run;
+
+	p = string;
+	while(Split_identifyMode(p, hint) == QR_MODE_KANJI) {
+		p += 2;
+	}
+	run = p - string;
+	ret = QRinput_append(input, QR_MODE_KANJI, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_eat8(const char *string, QRinput *input, QRencodeMode hint)
+{
+	const char *p, *q;
+	QRencodeMode mode;
+	int ret;
+	int run;
+	int dif;
+	int la, ln, l8;
+	int swcost;
+
+	la = QRspec_lengthIndicator(QR_MODE_AN, input->version);
+	ln = QRspec_lengthIndicator(QR_MODE_NUM, input->version);
+	l8 = QRspec_lengthIndicator(QR_MODE_8, input->version);
+
+	p = string + 1;
+	while(*p != '\0') {
+		mode = Split_identifyMode(p, hint);
+		if(mode == QR_MODE_KANJI) {
+			break;
+		}
+		if(mode == QR_MODE_NUM) {
+			q = p;
+			while(isdigit(*q)) {
+				q++;
+			}
+			if(Split_identifyMode(q, hint) == QR_MODE_8) {
+				swcost = 4 + l8;
+			} else {
+				swcost = 0;
+			}
+			dif = QRinput_estimateBitsMode8(p - string) /* + 4 + l8 */
+				+ QRinput_estimateBitsModeNum(q - p) + 4 + ln
+				+ swcost
+				- QRinput_estimateBitsMode8(q - string) /* - 4 - l8 */;
+			if(dif < 0) {
+				break;
+			} else {
+				p = q;
+			}
+		} else if(mode == QR_MODE_AN) {
+			q = p;
+			while(isalnum(*q)) {
+				q++;
+			}
+			if(Split_identifyMode(q, hint) == QR_MODE_8) {
+				swcost = 4 + l8;
+			} else {
+				swcost = 0;
+			}
+			dif = QRinput_estimateBitsMode8(p - string) /* + 4 + l8 */
+				+ QRinput_estimateBitsModeAn(q - p) + 4 + la
+				+ swcost
+				- QRinput_estimateBitsMode8(q - string) /* - 4 - l8 */;
+			if(dif < 0) {
+				break;
+			} else {
+				p = q;
+			}
+		} else {
+			p++;
+		}
+	}
+
+	run = p - string;
+	ret = QRinput_append(input, QR_MODE_8, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_splitString(const char *string, QRinput *input,
+		QRencodeMode hint)
+{
+	int length;
+	QRencodeMode mode;
+
+	if(*string == '\0') return 0;
+
+	mode = Split_identifyMode(string, hint);
+	if(mode == QR_MODE_NUM) {
+		length = Split_eatNum(string, input, hint);
+	} else if(mode == QR_MODE_AN) {
+		length = Split_eatAn(string, input, hint);
+	} else if(mode == QR_MODE_KANJI && hint == QR_MODE_KANJI) {
+		length = Split_eatKanji(string, input, hint);
+	} else {
+		length = Split_eat8(string, input, hint);
+	}
+	if(length == 0) return 0;
+	if(length < 0) return -1;
+	return Split_splitString(&string[length], input, hint);
+}
+
+static char *dupAndToUpper(const char *str, QRencodeMode hint)
+{
+	char *newstr, *p;
+	QRencodeMode mode;
+
+	newstr = strdup(str);
+	if(newstr == NULL) return NULL;
+
+	p = newstr;
+	while(*p != '\0') {
+		mode = Split_identifyMode(p, hint);
+		if(mode == QR_MODE_KANJI) {
+			p += 2;
+		} else {
+			if (*p >= 'a' && *p <= 'z') {
+				*p = (char)((int)*p - 32);
+			}
+			p++;
+		}
+	}
+
+	return newstr;
+}
+
+int Split_splitStringToQRinput(const char *string, QRinput *input,
+		QRencodeMode hint, int casesensitive)
+{
+	char *newstr;
+	int ret;
+
+	if(string == NULL || *string == '\0') {
+		errno = EINVAL;
+		return -1;
+	}
+	if(!casesensitive) {
+		newstr = dupAndToUpper(string, hint);
+		if(newstr == NULL) return -1;
+		ret = Split_splitString(newstr, input, hint);
+		free(newstr);
+	} else {
+		ret = Split_splitString(string, input, hint);
+	}
+
+	return ret;
+}
diff --git a/apps/eink-advanced/libqrencode/split.h b/apps/eink-advanced/libqrencode/split.h
new file mode 100644
index 0000000000000000000000000000000000000000..829a34453bbbf8d739549207727106293517d0f3
--- /dev/null
+++ b/apps/eink-advanced/libqrencode/split.h
@@ -0,0 +1,47 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Input data splitter.
+ * Copyright (C) 2006-2013 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * The following data / specifications are taken from
+ * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
+ *  or
+ * "Automatic identification and data capture techniques --
+ *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef __SPLIT_H__
+#define __SPLIT_H__
+
+#include "qrencode.h"
+
+/**
+ * Split the input string (null terminated) into QRinput.
+ * @param string input string
+ * @param hint give QR_MODE_KANJI if the input string contains Kanji character encoded in Shift-JIS. If not, give QR_MODE_8.
+ * @param casesensitive 0 for case-insensitive encoding (all alphabet characters are replaced to UPPER-CASE CHARACTERS.
+ * @retval 0 success.
+ * @retval -1 an error occurred. errno is set to indicate the error. See
+ *               Exceptions for the details.
+ * @throw EINVAL invalid input object.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ */
+extern int Split_splitStringToQRinput(const char *string, QRinput *input,
+		QRencodeMode hint, int casesensitive);
+
+#endif /* __SPLIT_H__ */
diff --git a/apps/eink-advanced/loopmain.c b/apps/eink-advanced/loopmain.c
new file mode 100644
index 0000000000000000000000000000000000000000..4448d2f7623f4496b8fcbe785eff8126acb5015f
--- /dev/null
+++ b/apps/eink-advanced/loopmain.c
@@ -0,0 +1,605 @@
+/* Blink with simple timer
+ */
+/*
+#include <stdbool.h>
+#include <stdint.h>
+#include "led.h"
+#include "nordic_common.h"
+#include "softdevice_handler.h"
+#include "nrf_drv_spi.h"
+#include "nrf_delay.h"
+#include "app_gpiote.h"
+#include "app_util_platform.h"
+#include "math.h"
+#include <string.h>
+
+#include "board.h"
+
+//font
+#include "font8x8_basic.h"
+
+// Need pin number for LED
+#define LED0 18
+#define LED1 19
+#define LED2 20
+
+#define nTC_EN   24 // B3 on Atum Breakout
+#define nTC_BUSY 23 // B4 on Atum Breakout
+#define nTC_CS   22 // B5 on Atum Breakout
+
+static nrf_drv_spi_t _spi = NRF_DRV_SPI_INSTANCE(SPI_INSTANCE);
+
+
+
+
+static void spi_init () {
+    uint32_t err;
+
+    nrf_drv_spi_config_t spi_config = NRF_DRV_SPI_DEFAULT_CONFIG(SPI_INSTANCE);
+    // Datasheet says we can do 3 MHz, but 4 also seems to work.
+    spi_config.frequency = NRF_DRV_SPI_FREQ_4M;
+    // We do need CS pin
+    spi_config.ss_pin = nTC_CS;
+    // Datasheet claims we need CPOL=1 CPHA=1.
+    // However, I did not get that to work. MODE 2 does seem to work.
+    spi_config.mode = NRF_DRV_SPI_MODE_2;
+
+    // We want blocking mode
+    err = nrf_drv_spi_init(&_spi, &spi_config, NULL);
+    APP_ERROR_CHECK(err);
+}
+
+static void wait_for_not_busy () {
+    uint8_t found_busy_low = 0;
+    uint8_t count = 0;
+    while (1) {
+        uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
+        if (found_busy_low && pin) {
+            break;
+        }
+        if (pin == 0) {
+            found_busy_low = 1;
+        }
+
+        if(count > 1000)
+        {
+            break;
+        }
+
+        count++;
+    }
+
+    // Then wait a little longer so we don't violate the T_NS time.
+    nrf_delay_us(5);
+}
+
+uint8_t lab11[15000] = {
+255,253,255,255,255,255,255,255,251,127,255,255,127,255,255,253,0,0,9,127,255,127,255,111,127,127,247,191,255,255,255,255,255,255,255,255,255,255,255,191,255,192,0,0,0,0,0,0,0,0,
+255,183,175,91,250,181,106,170,173,182,247,251,171,118,255,190,170,74,164,55,245,213,117,181,213,213,93,106,255,255,251,182,219,109,182,182,182,239,189,245,111,128,0,0,0,0,0,0,0,0,
+253,253,255,255,111,255,255,255,238,255,127,190,223,223,187,253,0,0,18,253,190,182,223,251,110,190,239,219,127,255,111,255,254,254,255,255,239,186,235,111,253,128,0,0,0,0,0,0,0,0,
+255,183,86,175,250,214,182,182,181,91,237,239,235,123,255,221,42,149,73,55,235,219,183,93,181,213,245,118,191,253,254,213,171,183,213,170,189,239,189,187,183,192,0,0,0,0,0,0,0,0,
+251,254,255,251,223,255,239,255,255,190,191,255,119,254,239,125,0,32,18,94,253,125,221,246,222,251,95,223,223,255,255,255,255,253,255,255,247,125,107,110,255,192,0,0,0,0,0,0,0,0,
+255,123,215,190,234,181,189,213,213,91,250,253,218,183,191,237,82,20,137,63,175,171,107,127,107,87,254,250,239,247,237,221,118,175,109,109,189,175,254,219,221,192,0,0,0,0,0,0,0,0,
+247,239,127,247,191,255,247,127,127,239,191,255,247,253,253,253,0,128,68,181,245,118,221,173,246,221,87,223,187,255,255,255,223,251,191,251,239,250,171,190,247,224,0,0,0,0,0,0,0,0,
+253,255,214,190,238,222,222,237,212,182,221,119,122,175,183,221,36,18,33,63,95,187,119,119,187,182,250,247,247,255,190,237,251,110,246,174,186,175,246,235,191,96,0,0,0,0,0,0,0,0,
+247,181,127,239,251,247,187,191,123,175,247,191,222,254,255,250,0,64,136,159,245,110,218,218,238,219,87,93,109,255,251,255,111,187,255,255,247,250,173,189,237,224,0,0,0,0,0,0,0,0,
+255,255,215,187,95,189,255,245,222,235,111,127,251,87,221,185,73,10,37,85,191,219,183,183,191,109,221,247,223,255,255,191,253,239,86,218,222,175,251,107,127,240,0,0,0,0,0,0,0,0,
+238,215,123,255,246,239,182,222,235,91,255,174,255,189,255,244,0,0,136,95,234,237,109,109,109,246,182,173,117,255,255,245,183,125,255,247,251,250,174,223,219,176,0,0,0,0,0,0,0,0,
+251,251,215,182,191,187,127,107,93,181,86,255,218,215,111,180,144,82,33,47,127,119,187,222,247,127,219,223,187,255,125,223,255,215,118,190,222,223,247,181,127,248,0,0,0,0,0,0,0,0,
+239,174,255,255,214,255,213,255,255,237,255,203,255,239,254,241,2,0,136,151,219,173,221,117,173,173,237,117,109,247,247,255,219,127,223,235,247,118,186,239,214,240,0,0,0,0,0,0,0,0,
+255,247,171,186,255,214,191,191,255,250,214,247,191,118,219,232,32,136,34,78,254,251,107,174,246,246,190,219,219,255,255,251,127,245,117,190,221,221,223,90,255,216,0,0,0,0,0,0,0,0,
+237,90,247,223,182,253,247,254,235,119,127,187,237,219,255,209,4,2,132,175,215,174,222,247,91,91,215,173,109,255,255,191,251,95,223,119,251,119,106,255,182,252,0,0,0,0,0,0,0,0,
+255,247,189,253,255,183,254,251,254,221,181,253,255,253,255,224,32,80,16,87,125,251,117,173,237,237,122,247,183,254,255,253,239,251,125,253,111,221,255,170,255,248,0,0,0,0,0,0,0,0,
+215,91,235,95,90,239,191,239,187,235,111,214,239,107,110,201,2,4,69,43,247,93,175,118,182,183,173,186,219,239,238,247,191,239,239,175,253,247,85,247,171,110,0,0,0,0,0,0,0,0,
+255,215,127,235,247,190,251,191,255,126,253,253,125,253,255,192,32,16,16,151,223,247,250,219,219,218,214,215,127,255,255,255,253,125,123,251,111,93,254,173,255,252,0,0,0,0,0,0,0,0,
+215,127,181,254,222,251,255,255,109,223,183,111,127,246,191,169,4,130,66,75,250,186,175,182,189,111,123,109,171,255,191,255,247,239,221,111,219,247,85,255,90,222,0,0,0,0,0,0,0,0,
+255,214,251,239,247,111,221,187,255,117,221,251,191,191,123,192,64,16,8,85,111,239,218,221,235,181,174,218,254,255,246,221,223,253,247,253,190,189,255,85,255,254,0,0,0,0,0,0,0,0,
+221,127,127,246,189,255,255,255,255,254,255,110,219,253,223,169,9,4,33,41,251,122,237,183,93,222,245,239,87,255,255,255,255,119,93,175,247,239,170,239,107,122,0,0,0,0,0,0,0,0,
+247,237,181,187,238,190,246,219,109,175,87,251,191,239,127,128,0,72,132,69,175,223,119,122,238,181,175,90,255,254,239,255,125,255,255,250,221,186,255,123,191,223,0,0,0,0,0,0,0,0,
+191,254,255,251,187,255,223,255,255,251,253,111,214,255,223,168,73,0,16,42,253,117,221,215,181,219,122,237,187,255,253,183,239,221,181,111,119,239,213,173,237,254,0,0,0,0,0,0,0,0,
+238,219,245,238,253,239,127,111,219,126,175,254,223,221,237,194,0,36,65,20,95,223,118,189,110,238,215,119,127,255,247,253,255,255,255,251,254,251,126,247,127,111,0,0,0,0,0,0,0,0,
+191,254,255,253,215,125,253,251,127,219,251,127,235,255,247,160,73,1,4,75,117,247,219,235,187,91,187,173,239,251,255,247,251,118,213,174,215,95,215,93,171,253,0,0,0,0,0,0,0,0,
+247,187,235,255,238,223,255,223,254,253,95,182,183,127,127,145,0,36,17,33,95,93,126,189,214,246,221,118,251,255,254,223,111,255,255,253,253,245,123,239,254,183,128,0,0,0,0,0,0,0,
+190,254,255,181,127,127,110,247,239,215,250,255,253,247,237,196,18,128,64,21,53,247,213,214,189,173,182,219,191,255,247,255,255,255,109,95,87,191,221,117,91,255,0,0,0,0,0,0,0,0,
+239,239,107,255,219,183,255,254,251,125,111,222,215,255,255,160,64,20,5,73,111,93,127,123,235,251,107,182,247,255,255,246,251,109,255,245,253,237,119,175,238,239,128,0,0,0,0,0,0,0,
+187,251,127,253,127,253,246,219,255,239,255,239,253,110,251,161,9,65,16,18,187,247,213,173,94,174,253,223,255,239,251,127,223,255,237,191,183,119,221,250,187,191,128,0,0,0,0,0,0,0,
+239,125,119,183,173,95,127,255,189,251,123,119,118,255,223,200,0,4,65,68,93,125,127,119,245,219,171,117,223,255,191,223,123,191,191,237,237,221,119,95,239,251,128,0,0,0,0,0,0,0,
+189,239,125,255,255,247,254,214,247,183,223,223,223,95,254,160,74,80,4,18,175,215,213,221,95,109,118,223,247,255,255,251,239,237,253,187,127,127,221,234,189,111,192,0,0,0,0,0,0,0,
+239,253,111,254,171,190,219,255,255,253,253,247,250,187,255,194,0,2,128,73,90,253,126,238,234,223,175,187,127,255,253,254,253,191,247,239,219,213,118,189,239,254,192,0,0,0,0,0,0,0,
+189,191,123,251,255,219,255,251,189,223,111,187,255,223,119,168,82,160,18,4,87,87,215,117,189,181,122,255,223,255,255,183,183,254,255,123,118,255,223,215,123,119,192,0,0,0,0,0,0,0,
+247,245,63,223,182,247,254,222,247,247,254,255,111,107,255,193,0,8,128,162,174,254,237,190,215,123,223,174,251,251,254,255,255,119,221,238,223,173,186,251,221,223,192,0,0,0,0,0,0,0,
+223,222,235,255,255,222,219,251,255,127,183,237,253,215,223,160,74,66,18,8,91,171,187,213,251,214,181,251,255,255,223,251,125,253,255,251,245,247,239,93,119,253,192,0,0,0,0,0,0,0,
+250,254,63,254,238,247,255,191,187,221,255,125,247,250,255,201,0,16,64,34,183,126,238,239,86,189,238,191,191,255,255,239,247,223,183,111,95,93,123,239,222,247,192,0,0,0,0,0,0,64,
+191,246,182,247,251,251,255,246,255,255,221,247,255,109,253,208,34,136,9,9,45,215,187,117,187,215,91,219,247,255,254,255,222,246,255,253,246,247,173,90,247,191,192,0,0,0,0,0,8,0,
+239,190,61,255,223,189,182,255,221,183,127,222,223,246,191,194,8,34,64,32,191,122,253,190,237,122,246,254,255,223,255,255,127,191,253,223,189,222,255,247,93,255,64,0,0,0,0,0,0,0,
+251,246,87,223,255,239,255,182,255,255,247,127,253,255,119,232,65,8,5,5,43,215,175,213,183,175,175,87,127,117,191,251,253,237,223,123,219,187,213,93,247,183,192,0,0,0,0,0,0,0,
+191,124,61,253,253,250,251,255,219,123,191,250,223,187,191,193,8,32,144,65,61,122,245,127,109,117,117,253,215,255,255,191,247,191,119,254,254,254,255,247,94,255,192,0,0,0,0,0,0,0,
+247,238,22,255,183,191,223,219,127,222,251,239,183,254,223,232,34,2,2,20,151,223,127,213,222,223,187,111,253,222,214,254,223,251,253,219,183,171,173,93,247,221,128,0,0,0,0,0,0,0,
+254,252,159,247,255,253,126,255,253,255,238,255,254,239,235,228,128,168,32,128,93,106,213,126,245,234,214,255,247,251,255,247,254,223,111,255,253,254,251,239,125,255,192,0,0,0,0,0,128,0,
+223,222,42,191,254,239,251,247,183,187,191,189,187,255,95,208,10,0,136,5,43,253,255,215,91,93,189,223,255,127,123,127,255,247,255,109,175,111,174,187,175,111,128,0,0,0,0,0,0,0,
+251,244,15,255,187,254,239,222,255,255,251,247,223,253,245,234,32,68,2,160,30,215,85,122,239,182,235,254,255,239,223,222,239,189,187,255,251,245,251,221,251,253,128,0,0,0,0,0,0,0,
+222,253,77,94,255,223,191,255,254,222,239,255,239,95,239,224,130,16,32,9,75,250,255,223,186,239,94,255,255,255,245,191,253,255,239,182,222,191,94,238,175,127,128,0,0,0,0,0,0,0,
+255,188,7,255,255,251,254,251,219,251,253,190,253,255,186,234,8,129,4,160,46,175,85,106,215,90,247,187,221,246,255,239,191,235,126,255,247,213,247,119,251,239,128,0,0,0,0,0,0,0,
+239,232,166,175,237,191,95,239,255,239,223,239,175,109,255,240,0,8,16,4,151,251,239,255,125,247,187,255,255,191,222,182,247,191,247,219,126,255,93,221,110,255,0,0,0,0,0,0,0,0,
+189,252,11,251,255,253,247,127,119,127,253,255,247,251,253,233,37,65,1,80,21,93,91,85,214,173,110,255,247,255,255,251,254,251,127,127,219,181,247,183,251,187,128,0,0,0,0,0,0,0,
+255,184,129,175,255,239,239,253,255,253,247,187,125,191,239,240,0,8,68,0,79,247,125,254,251,119,183,255,127,251,247,223,255,255,213,251,127,255,126,253,95,255,0,0,0,0,0,32,0,0,
+247,248,37,251,187,127,187,255,255,183,191,255,239,237,191,245,37,33,16,169,26,187,171,87,86,221,127,251,253,255,126,250,255,237,127,223,237,85,215,175,246,239,0,0,0,0,64,0,0,0,
+222,232,65,94,255,238,254,223,182,255,254,239,122,255,255,112,0,0,0,128,23,237,222,251,251,183,219,255,239,111,255,237,247,255,239,123,191,255,122,245,95,191,0,0,0,191,191,133,32,0,
+255,248,20,235,254,255,247,253,255,255,255,255,255,182,255,244,148,137,74,84,157,126,181,174,174,237,127,255,191,255,237,254,191,191,189,254,251,187,223,95,246,255,0,0,43,106,239,248,0,8,
+247,176,33,127,119,247,253,223,255,221,183,187,109,255,223,242,2,32,16,130,55,171,223,251,219,187,223,247,254,219,191,254,255,251,239,215,238,238,245,245,127,254,0,9,43,174,182,254,146,0,
+190,248,8,109,223,191,222,255,109,255,254,239,247,91,253,244,36,2,133,84,186,253,106,174,246,222,255,127,255,255,255,183,95,255,123,127,127,251,191,95,215,251,0,66,174,251,255,255,212,128,
+255,240,10,63,191,255,251,119,255,247,251,189,189,255,111,232,130,128,81,34,111,175,221,219,187,107,191,255,127,222,253,254,191,255,239,251,237,191,107,246,253,190,0,8,123,174,221,191,229,0,
+215,208,34,171,239,237,255,255,247,125,42,171,118,173,255,224,20,10,132,170,245,117,118,190,223,254,251,255,251,251,239,247,91,255,253,190,255,237,253,93,183,254,0,2,221,251,183,247,248,192,
+253,240,2,157,251,127,255,127,125,146,148,170,149,119,223,234,6,64,34,85,190,255,187,235,234,171,239,219,255,111,255,123,111,222,247,239,182,255,175,247,255,252,2,175,246,174,255,255,253,48,
+215,176,1,87,173,255,253,223,210,0,34,73,117,191,127,208,78,5,73,74,213,170,214,183,127,255,127,255,183,253,251,221,191,255,253,123,255,181,245,93,111,254,2,189,191,251,219,126,254,16,
+223,224,0,94,255,251,247,245,0,87,173,170,222,171,239,193,12,17,5,43,251,255,123,93,213,85,255,253,254,223,127,247,75,255,223,222,219,255,127,239,254,236,63,255,210,173,109,191,127,172,
+183,240,2,43,182,191,255,186,86,221,123,255,183,237,127,212,45,4,82,75,86,170,221,238,255,255,255,111,223,247,238,187,183,127,251,119,254,219,213,117,191,253,255,255,255,215,87,239,223,212,
+254,224,0,23,255,223,127,213,83,107,221,87,251,182,223,192,12,66,9,43,253,223,235,91,218,173,255,251,123,125,191,253,173,255,255,222,219,255,127,191,247,255,119,255,127,125,253,187,247,244,
+175,192,0,69,91,127,253,106,169,21,119,253,110,213,251,82,92,17,36,175,86,245,94,237,127,255,109,191,239,222,247,87,215,191,237,183,255,187,237,234,223,223,255,253,255,255,111,239,191,252,
+255,224,0,3,239,215,247,182,173,239,189,95,251,237,95,164,26,132,130,47,251,95,245,183,246,215,255,237,93,251,221,221,117,255,127,250,219,255,123,127,255,127,255,119,247,255,253,189,255,254,
+173,192,8,20,255,123,253,85,254,189,223,246,222,182,239,80,152,18,42,175,221,234,175,109,127,253,255,255,255,111,111,127,170,191,254,223,254,219,239,171,125,255,255,255,253,247,255,247,251,255,
+255,192,0,2,171,254,251,127,247,239,106,219,251,213,189,138,58,68,4,191,246,189,250,219,187,119,246,183,213,223,181,219,223,95,251,181,87,255,122,255,255,255,255,255,223,95,255,254,255,255,
+223,64,0,9,127,219,253,191,212,187,255,255,111,173,255,100,180,18,170,191,253,215,95,189,255,223,223,253,127,117,126,254,233,239,255,254,254,221,223,173,247,255,255,191,255,251,251,123,239,127,
+251,192,0,33,117,255,186,246,171,247,106,181,253,214,215,170,240,136,10,247,254,237,234,235,95,255,255,175,173,175,219,127,246,191,254,215,91,247,253,255,191,255,255,255,245,182,239,239,191,239,
+255,192,0,0,190,254,254,158,173,109,255,255,183,107,123,105,244,4,165,93,255,95,127,189,254,255,250,250,247,250,237,191,189,171,255,251,239,127,183,86,255,255,255,255,255,223,127,255,255,255,
+191,128,0,4,95,111,245,235,119,191,181,109,255,181,223,183,224,162,21,255,127,234,213,215,95,254,223,223,93,87,95,238,254,223,127,94,187,218,255,255,255,247,255,254,222,251,191,255,127,251,
+247,132,144,1,23,191,254,169,173,106,255,254,170,215,117,239,212,8,149,171,223,127,190,251,239,219,246,234,255,237,107,255,247,107,255,247,87,127,238,173,255,255,238,255,255,238,239,255,251,223,
+255,182,170,0,94,255,245,86,85,183,90,183,255,170,223,118,232,34,75,253,123,213,107,173,127,255,189,191,213,90,191,255,253,174,255,187,253,235,191,255,255,255,255,255,255,127,251,183,239,255,
+223,169,85,160,39,223,191,85,85,90,255,250,170,215,245,221,164,136,46,175,223,251,254,247,175,254,235,234,191,109,221,221,255,247,255,237,86,190,247,251,191,255,255,183,255,251,191,255,191,255,
+253,170,146,160,23,247,253,181,84,165,86,175,255,74,175,247,210,2,159,245,119,254,171,189,251,123,183,127,245,182,127,127,175,173,255,127,251,251,221,191,255,255,186,250,191,255,245,223,255,247,
+255,73,41,92,75,191,253,109,171,85,91,246,170,174,254,173,105,84,90,191,173,251,254,239,111,238,223,170,175,95,255,255,235,250,255,234,173,95,127,255,255,254,255,223,213,221,255,127,255,223,
+239,36,68,5,11,237,255,91,117,85,45,175,125,91,85,255,180,161,63,234,251,126,171,187,191,255,253,239,253,235,251,127,116,189,191,255,255,109,215,255,255,223,247,118,238,191,95,239,251,255,
+254,145,1,82,167,191,253,174,223,108,165,122,223,95,175,106,213,42,85,127,86,223,254,238,251,245,182,189,127,55,254,223,254,182,239,237,85,191,125,237,255,123,221,223,187,235,255,187,255,255,
+254,4,40,0,162,253,255,233,247,246,150,215,122,246,218,223,250,149,127,213,213,95,87,191,239,191,255,255,237,223,215,253,215,85,191,127,254,235,239,191,255,255,254,245,255,191,219,238,247,247,
+220,161,2,74,29,239,255,253,26,221,171,111,239,223,107,125,173,73,237,190,72,165,250,251,127,238,171,106,187,95,234,255,250,214,247,251,107,189,187,255,255,255,107,191,93,245,127,255,223,125,
+253,20,72,32,166,255,123,111,213,191,106,218,190,171,181,111,250,165,127,234,162,19,239,239,254,253,254,191,221,109,63,239,109,234,223,255,254,235,239,255,251,253,255,109,247,127,237,246,253,247,
+248,64,17,2,21,221,255,253,250,235,219,239,249,117,85,85,191,43,213,122,17,68,245,127,255,219,183,234,171,191,171,125,250,181,255,237,183,190,191,255,255,247,251,255,187,223,191,127,255,239,
+237,9,66,72,75,127,250,247,111,190,245,127,214,218,170,186,213,167,255,213,68,8,63,221,219,254,237,191,253,106,95,255,173,94,191,255,253,235,251,127,255,223,222,246,239,251,247,255,123,189,
+248,66,8,0,37,239,255,47,223,235,190,219,114,165,73,79,123,94,255,232,128,34,189,127,255,87,191,234,218,223,111,182,246,181,255,255,111,126,223,255,255,255,247,187,253,111,127,183,223,239,
+186,40,66,73,22,255,253,177,122,189,235,127,200,4,170,245,173,175,255,165,17,0,15,255,254,253,246,189,109,186,187,255,90,173,93,247,255,219,127,255,254,255,126,239,91,255,254,255,253,187,
+241,2,40,0,138,183,253,93,79,247,95,239,82,85,85,26,234,255,170,168,64,20,174,239,247,214,187,85,170,223,79,85,214,175,239,255,251,255,239,239,251,255,235,189,255,189,255,254,255,238,
+244,169,2,74,37,223,254,214,160,93,234,123,128,42,170,205,191,85,251,170,136,64,3,191,221,255,213,106,85,85,61,246,171,85,127,238,223,109,191,191,239,254,222,247,173,239,223,255,238,187,
+226,4,168,16,18,117,253,82,223,86,181,174,169,118,213,102,213,110,174,164,34,4,171,255,127,90,173,170,165,90,175,218,217,175,191,235,255,255,255,255,255,251,187,190,255,123,127,255,255,239,
+233,82,5,65,73,191,127,174,169,171,221,91,0,218,182,181,181,187,213,82,128,32,5,255,255,246,214,213,84,164,45,181,86,234,239,229,253,251,125,255,255,254,254,247,237,239,237,255,255,253,
+212,73,80,8,4,174,254,213,182,180,107,92,149,165,21,85,219,110,190,136,41,9,34,247,246,218,187,106,137,1,47,237,106,95,253,242,95,223,247,255,255,215,219,255,255,253,191,255,255,87,
+210,164,74,162,82,191,127,106,85,187,93,90,82,168,170,213,125,187,234,165,64,128,20,127,255,173,221,170,66,84,5,118,171,107,119,248,159,255,255,255,255,123,127,214,255,87,255,255,255,255,
+202,85,32,8,129,87,191,170,149,86,182,218,69,146,2,170,234,222,189,16,21,42,65,63,251,118,235,72,40,0,82,171,90,189,255,234,71,255,223,255,251,239,235,255,183,253,109,255,255,253,
+169,42,149,162,20,93,223,213,74,171,171,105,86,72,144,86,191,87,245,74,164,128,138,191,222,219,93,34,129,33,5,90,173,86,255,121,33,126,255,255,239,189,127,125,253,127,255,255,255,255,
+213,82,170,17,33,43,255,237,81,42,213,170,169,85,4,21,87,122,218,65,18,90,32,31,251,234,170,144,4,4,8,170,171,175,187,250,148,251,255,255,255,247,239,175,223,239,255,255,255,251,
+170,170,169,74,8,173,111,117,76,149,85,107,86,180,82,130,187,175,237,42,168,129,5,79,254,171,117,74,64,144,34,10,174,222,255,249,74,47,255,255,254,255,219,251,119,255,255,255,254,255,
+170,173,85,84,165,47,191,250,162,64,170,173,42,234,168,65,93,221,116,137,2,40,144,87,239,90,170,32,18,0,129,69,83,119,191,238,33,95,255,255,255,221,254,255,223,127,255,255,255,255,
+181,213,66,34,160,157,111,237,42,182,85,181,91,85,85,40,171,119,170,84,168,132,66,151,186,173,170,137,0,2,4,82,173,221,238,253,85,15,255,255,251,255,191,221,255,255,255,255,255,255,
+214,169,40,149,45,87,250,255,170,72,148,170,170,218,165,146,79,221,180,138,164,18,40,35,253,246,212,64,72,144,0,129,85,119,223,253,84,163,255,255,255,183,247,119,123,255,255,255,255,255,
+187,84,66,2,82,46,175,90,233,36,86,170,171,85,94,160,42,246,210,85,18,133,65,21,247,93,106,148,2,0,16,41,85,221,255,189,82,85,15,255,255,254,253,253,239,255,255,255,255,255,
+214,161,8,84,137,171,253,239,173,170,169,165,41,171,91,84,151,219,105,42,169,81,16,137,221,247,168,1,32,8,130,68,170,119,109,253,107,84,163,255,253,191,223,175,255,255,255,255,255,127,
+250,72,33,1,36,175,247,186,181,82,149,85,85,85,106,208,18,237,72,170,160,10,164,36,255,221,82,164,8,128,0,18,85,95,247,246,221,168,17,255,255,255,246,255,127,255,255,255,253,255,
+170,130,0,18,74,87,191,109,74,170,170,41,5,42,170,181,11,181,162,85,66,5,66,74,254,254,169,8,128,16,8,9,42,186,223,221,234,66,132,127,237,255,127,247,255,255,191,255,255,255,
+244,40,146,64,145,47,251,246,209,85,69,68,170,148,149,92,74,250,9,90,144,1,48,2,123,247,68,64,18,2,64,148,173,87,251,254,181,16,34,191,255,251,251,125,255,251,251,255,255,95,
+210,128,0,10,4,19,109,187,42,170,40,18,64,66,37,110,10,214,164,171,1,64,202,169,63,221,41,18,64,64,0,2,171,191,111,183,208,68,136,191,255,255,221,223,255,239,255,191,182,255,
+169,34,73,32,169,69,255,236,139,85,66,129,21,16,74,181,69,117,18,189,84,40,40,2,191,253,68,64,0,0,2,32,173,171,187,253,85,0,2,31,239,255,247,255,255,127,254,254,239,127,
+212,8,0,2,0,16,181,90,170,168,144,40,64,132,1,47,2,212,65,82,33,2,178,80,159,238,169,9,18,36,32,4,86,221,238,239,80,36,40,167,255,255,125,239,253,254,215,251,89,183,
+82,160,34,72,85,69,127,235,86,165,4,130,10,16,148,82,164,213,21,105,72,64,25,10,79,250,68,32,0,128,128,129,37,235,123,250,165,0,130,23,255,255,215,191,247,251,250,181,86,223,
+164,4,128,1,0,16,42,181,42,144,80,16,32,0,0,149,65,84,69,149,37,42,68,80,151,253,41,0,128,0,2,18,85,119,182,238,168,72,8,137,255,245,255,255,255,238,173,237,82,191,
+82,160,18,84,42,133,85,182,149,74,5,65,0,130,2,43,68,169,18,82,146,128,130,132,79,218,172,136,18,4,0,0,43,186,255,189,81,1,32,82,255,223,191,255,127,187,214,210,74,175,
+136,18,0,0,0,32,46,237,90,161,80,8,8,16,80,10,145,84,74,169,74,84,41,41,39,245,87,0,0,32,8,17,10,223,170,250,164,32,5,5,127,254,255,127,237,253,119,41,37,117,
+82,136,146,65,73,18,151,84,149,20,2,32,128,0,2,82,160,82,170,148,169,66,132,80,147,250,161,210,64,0,128,128,74,181,255,109,73,4,16,32,191,255,255,253,255,106,170,132,16,175,
+68,66,0,8,0,64,21,186,85,66,168,130,2,2,8,9,69,42,37,69,85,40,82,138,11,234,136,160,4,128,0,4,37,126,170,245,160,64,129,20,95,247,253,247,213,253,172,80,139,174,
+33,16,82,32,73,9,10,213,42,168,0,8,32,72,65,37,32,84,145,42,162,5,8,32,161,245,36,88,0,4,4,17,2,215,127,90,74,16,42,66,31,255,255,255,251,170,177,2,36,174,
+138,69,0,130,0,32,69,81,85,5,85,32,0,0,4,1,82,34,74,146,168,168,66,41,11,234,146,45,32,0,16,64,41,93,213,235,32,132,128,144,143,255,255,95,110,234,200,72,22,157,
+32,16,84,8,146,4,19,86,170,80,0,1,4,0,32,148,161,40,36,74,160,5,16,128,72,213,85,68,4,32,64,2,2,239,126,180,148,16,42,10,7,223,253,255,213,109,82,1,81,88,
+21,66,2,160,0,144,133,86,149,37,36,132,0,9,2,2,148,149,18,34,66,34,68,84,34,234,191,170,144,129,0,8,145,85,171,107,65,2,129,80,67,255,255,253,183,170,136,144,77,58,
+64,17,84,5,36,2,1,170,180,136,64,32,32,128,8,73,80,66,65,10,144,16,129,1,9,212,246,240,64,4,1,32,5,111,219,81,84,72,42,37,17,239,253,255,106,211,80,2,146,113,
+42,72,145,16,0,136,36,181,85,81,18,0,0,0,32,2,69,40,8,73,64,132,18,68,68,169,113,187,0,1,189,65,32,186,237,234,128,2,145,84,160,255,255,251,170,174,2,40,80,228,
+64,132,36,65,40,32,1,85,84,132,64,146,4,2,2,73,48,146,130,10,84,17,64,144,16,210,170,76,146,38,162,168,2,223,118,165,82,72,68,171,4,191,245,254,235,169,72,130,139,200,
+18,34,128,8,66,1,8,174,170,81,8,0,32,32,8,0,165,36,32,73,32,4,10,1,5,82,89,85,64,0,0,20,144,118,219,85,8,18,18,172,144,255,255,255,169,84,2,21,35,130,
+68,144,33,37,0,160,32,115,105,36,66,64,128,128,64,146,80,136,137,5,73,33,64,128,80,100,139,82,136,18,164,5,5,95,234,194,161,33,77,33,4,31,239,253,85,73,40,72,15,32,
+16,69,20,73,84,4,130,29,170,137,16,8,0,2,2,1,74,162,0,36,160,8,20,18,5,65,33,66,64,132,72,2,64,183,189,89,4,10,40,148,81,95,255,255,170,160,65,32,172,9,
+69,18,66,37,33,64,0,174,170,80,68,128,4,0,16,72,81,16,144,10,148,165,65,0,32,168,72,21,64,17,181,32,146,125,214,196,160,161,162,2,132,39,255,253,165,21,4,132,26,32,
+16,169,41,170,172,17,8,30,213,5,16,18,32,8,65,2,148,170,4,130,80,0,16,4,138,69,5,66,144,69,90,132,64,159,251,82,8,13,72,84,80,143,255,255,84,128,34,17,112,132,
+69,10,148,170,82,132,1,10,104,168,65,0,0,64,4,8,73,8,64,41,74,21,4,64,0,160,80,1,66,18,247,65,18,110,237,74,129,42,1,19,2,35,255,253,170,84,128,0,160,1,
+16,169,86,17,0,64,64,85,165,18,8,32,129,1,0,65,37,82,36,0,160,128,144,17,42,84,2,74,0,69,11,104,0,59,250,164,32,104,36,73,80,9,255,254,164,128,16,133,68,36,
+5,86,169,72,146,16,18,10,212,160,161,4,8,0,17,4,169,73,9,5,20,36,1,4,0,129,32,1,65,10,41,165,73,47,223,82,10,144,129,32,132,128,255,254,145,21,4,34,1,1,
+81,106,34,2,4,66,64,43,170,138,4,0,0,0,4,16,37,40,160,64,169,9,68,0,36,84,8,149,8,33,22,248,0,63,250,136,129,66,42,132,64,37,127,251,84,64,64,8,136,16,
+6,149,72,72,80,136,1,13,209,32,144,72,128,36,128,65,82,164,9,8,132,16,16,73,2,128,128,4,33,0,170,170,169,31,238,164,21,36,65,1,41,0,255,253,82,17,1,2,0,4,
+34,64,2,1,4,0,16,38,170,138,1,0,17,0,16,4,36,146,160,32,80,133,64,0,40,168,17,42,128,68,2,186,0,87,187,82,0,9,10,32,128,21,63,245,73,234,16,72,0,145,
+8,42,168,164,73,34,68,11,164,181,80,18,0,0,2,0,146,164,10,2,74,16,2,72,130,66,64,18,10,1,40,40,73,47,253,136,72,128,72,0,72,128,127,245,47,93,64,0,34,0,
+69,0,2,9,16,8,1,34,211,85,170,64,64,8,64,170,74,145,64,136,36,5,8,0,8,144,2,72,32,132,0,129,0,63,238,165,0,41,41,66,32,18,191,237,84,3,164,129,0,10,
+16,170,169,32,66,64,144,5,137,0,85,4,4,129,21,85,37,84,18,33,72,72,64,137,34,132,8,42,2,16,66,8,40,151,226,144,42,128,16,16,132,128,31,245,88,128,248,16,2,237,
+66,1,4,10,8,34,4,146,164,164,42,208,128,16,85,34,170,161,64,0,18,2,2,0,0,161,32,144,144,64,8,32,130,63,72,133,0,18,162,128,80,9,95,218,162,42,21,2,11,183,
+20,172,178,145,65,8,16,1,170,9,5,34,16,69,82,0,146,168,20,137,72,40,72,36,136,136,0,40,4,0,32,2,16,87,128,80,72,128,8,36,34,64,31,234,84,144,136,0,37,8,
+1,18,144,4,16,128,64,149,69,82,80,136,2,2,128,72,74,162,129,32,4,2,0,128,2,64,2,145,17,2,0,128,68,93,85,5,2,32,161,0,136,10,159,234,210,213,82,72,4,65,
+84,73,74,169,68,0,2,1,144,170,170,81,64,16,42,130,42,148,84,4,161,16,146,18,80,146,72,68,0,72,66,9,1,47,0,164,168,8,72,168,34,128,47,181,85,254,64,0,145,42,
+0,133,64,68,1,34,8,74,170,151,213,68,9,69,85,84,146,201,0,144,20,10,0,0,4,128,2,160,20,0,8,0,40,54,36,17,0,130,34,2,20,37,7,213,43,251,186,128,10,170,
+18,42,160,16,136,0,64,1,66,127,125,82,64,1,46,233,42,165,84,2,72,128,84,146,64,164,146,32,1,1,0,18,66,153,2,164,68,32,144,168,32,0,87,234,151,173,196,34,85,43,
+64,16,137,2,32,8,2,73,148,44,182,148,0,42,251,244,149,84,170,208,34,21,1,33,18,64,2,136,72,144,0,0,8,36,16,137,16,8,4,0,21,74,135,85,75,181,49,0,36,174,
+4,138,32,72,130,128,144,2,162,154,164,162,146,65,21,62,37,75,83,11,168,0,84,148,64,146,36,80,4,2,32,68,160,146,5,80,65,2,17,82,64,0,83,234,33,90,20,129,43,251,
+16,32,128,2,0,0,2,72,148,74,88,20,0,20,45,80,149,145,173,192,80,149,35,85,18,64,130,130,17,32,1,0,4,68,66,37,4,0,64,0,20,170,163,169,72,171,74,32,133,223,
+64,20,82,169,36,36,72,2,209,18,212,66,64,128,170,164,10,173,103,69,68,0,145,226,128,146,9,80,128,8,0,18,65,17,21,72,32,72,2,73,0,1,85,213,4,16,161,68,90,183,
+2,73,0,4,0,1,1,40,138,64,34,145,0,37,41,16,43,69,125,106,168,18,70,169,84,64,34,42,34,68,136,0,16,66,13,34,130,0,0,16,21,85,89,180,162,132,10,17,11,91,
+16,18,84,161,73,32,36,1,97,9,16,4,4,128,4,0,133,178,151,181,2,65,53,51,1,17,4,144,136,0,0,36,133,0,21,72,16,2,73,36,64,12,53,213,40,33,0,128,68,175,
+64,73,64,20,0,8,128,164,148,32,64,2,64,0,64,32,11,84,219,84,168,8,151,245,80,68,18,74,85,5,0,128,32,73,29,37,68,72,0,1,9,106,116,234,130,4,37,73,0,17,
+4,5,42,128,164,130,20,1,81,2,4,136,1,34,0,130,38,234,42,162,0,2,85,170,138,128,137,33,0,16,66,4,137,0,90,144,16,0,4,148,5,90,106,180,80,144,0,32,145,68,
+16,36,160,42,0,32,1,84,164,8,16,2,144,0,4,0,7,122,161,89,82,72,10,84,65,34,36,132,0,65,16,16,0,72,58,165,66,33,32,0,1,119,210,213,4,0,21,4,64,0,
+65,2,149,0,148,137,82,1,73,64,64,72,0,136,16,1,37,127,95,237,0,1,81,34,44,72,26,64,1,0,64,66,85,2,117,80,16,132,2,85,10,191,37,106,161,68,128,161,4,146,
+4,41,80,84,32,16,8,32,160,1,1,1,34,0,64,8,11,93,245,118,160,4,173,17,74,128,107,32,68,1,9,0,0,64,253,74,68,0,72,0,0,145,87,186,20,16,10,18,80,0,
+32,2,74,2,132,133,66,138,149,32,4,18,0,66,0,0,134,191,223,217,4,128,175,234,180,81,45,169,0,0,64,18,66,9,85,32,0,34,2,149,2,111,253,212,160,0,33,64,128,36,
+9,72,160,16,65,32,40,0,164,4,0,4,129,16,0,66,43,87,107,84,0,16,171,223,253,32,28,170,16,8,36,128,16,129,122,170,146,128,168,72,32,189,182,181,9,0,8,146,36,128,
+64,2,85,69,20,21,149,36,169,16,32,64,36,0,0,0,6,171,181,32,64,0,45,125,232,128,86,41,74,161,16,18,68,4,42,144,0,10,5,18,132,2,169,20,160,65,5,4,144,9,
+42,72,168,2,66,170,112,129,68,64,129,10,128,64,2,8,173,84,168,130,9,2,19,219,116,105,21,5,106,168,66,64,2,37,109,85,82,32,81,68,0,0,4,170,68,4,18,80,64,32,
+0,2,36,145,16,191,42,40,169,0,0,0,1,9,16,0,6,213,68,16,0,32,64,87,162,144,42,0,4,174,144,9,32,136,180,72,0,138,225,82,144,146,64,21,16,0,9,66,4,128,
+85,40,152,4,138,83,200,130,82,8,4,42,164,0,0,2,95,85,34,128,128,0,2,40,144,100,138,192,0,39,1,32,10,2,22,165,36,35,82,138,66,0,18,170,130,32,42,8,160,4,
+32,66,85,34,39,61,37,40,168,128,16,130,0,68,0,32,13,84,144,36,17,9,8,4,10,162,42,168,33,24,72,0,128,57,90,144,128,149,149,42,0,8,0,10,80,1,17,64,16,0,
+69,17,42,9,8,234,80,2,68,34,64,20,129,16,64,130,79,170,68,128,0,32,0,145,81,116,10,146,148,193,0,132,41,72,21,42,2,90,252,94,128,32,146,74,132,136,36,128,162,2,
+16,68,172,128,165,36,138,168,170,128,5,66,68,66,4,0,46,213,17,18,68,0,32,0,4,177,82,164,85,40,34,0,128,41,74,132,144,47,209,116,4,0,0,37,32,0,18,34,8,32,
+73,34,84,34,21,82,32,66,36,16,16,85,1,8,144,9,31,180,132,64,0,132,132,165,82,252,10,146,9,64,0,18,20,81,21,81,1,2,34,216,0,4,148,138,146,36,149,136,161,0,
+37,89,109,8,161,40,138,152,169,66,137,32,128,32,64,32,95,210,80,9,16,0,0,0,9,117,33,72,165,1,8,64,74,41,150,148,72,168,143,224,16,128,1,38,160,128,4,162,136,9,
+74,172,148,128,10,2,34,82,36,8,32,133,9,4,36,130,31,106,5,32,0,32,17,18,85,250,20,84,40,4,0,1,28,146,10,162,2,2,85,65,0,17,36,3,74,18,80,84,65,64,
+42,246,174,4,160,160,10,168,169,65,18,80,32,17,0,0,191,213,80,68,132,132,64,64,5,124,66,19,68,64,33,4,74,65,170,148,160,169,110,136,2,0,1,81,144,128,5,18,36,0,
+92,237,34,80,21,9,85,98,20,40,132,74,129,64,42,36,61,178,5,16,16,0,2,9,85,252,8,128,16,0,4,17,53,146,75,72,21,18,180,0,8,68,148,10,197,42,144,68,128,170,
+39,180,154,1,84,181,109,144,162,132,81,42,0,8,128,130,191,216,160,1,0,0,8,32,23,253,18,32,129,17,0,4,119,64,139,165,66,74,146,64,32,0,1,69,162,64,1,0,42,0,
+81,74,73,0,43,110,182,68,25,34,0,137,66,162,20,16,127,101,20,164,34,36,64,133,74,252,0,132,4,0,32,73,127,4,111,168,41,55,104,4,129,18,80,16,200,149,84,17,0,81,
+45,33,44,73,93,221,216,145,74,73,74,37,8,0,10,133,127,216,128,0,0,0,2,16,23,253,40,0,32,0,4,33,239,161,83,210,132,168,0,16,0,0,5,69,64,170,169,0,84,8,
+74,148,181,0,11,117,36,4,20,16,16,146,162,136,160,32,255,101,42,145,16,128,8,65,37,254,2,16,128,65,17,10,247,4,175,106,81,34,146,64,8,68,160,18,196,109,85,74,161,68,
+32,66,218,2,85,146,72,161,42,130,149,73,84,34,5,74,253,216,128,4,2,18,32,8,23,253,40,64,4,4,0,165,223,65,87,244,132,136,0,0,1,0,9,8,160,41,21,85,90,17,
+74,151,116,0,0,0,17,8,10,72,30,170,0,0,40,1,247,213,42,80,72,0,1,34,149,254,0,0,0,0,74,18,254,80,167,180,81,34,68,9,32,17,32,69,81,42,0,170,171,164,
+36,45,208,145,4,73,64,33,86,32,135,85,81,9,81,85,255,106,64,1,0,8,128,0,75,239,81,2,32,34,17,75,215,36,85,250,132,72,16,128,0,0,10,32,160,20,128,0,5,0,
+181,187,106,0,32,0,4,132,43,66,5,170,132,85,64,3,183,213,42,132,32,128,18,74,23,190,132,8,2,0,136,33,126,65,39,117,41,2,130,34,4,132,160,149,100,150,128,0,5,72,
+86,254,128,2,0,0,16,17,23,16,34,170,170,170,130,43,254,250,144,32,4,17,0,0,151,255,64,32,8,20,82,139,235,40,143,220,132,80,16,0,64,16,9,2,80,37,40,0,21,2,
+191,210,64,32,2,18,66,132,171,164,18,162,85,85,8,15,187,170,164,129,32,64,36,148,75,255,164,0,64,66,128,37,126,146,166,246,82,5,65,36,0,2,68,80,177,10,213,0,148,0,
+213,80,18,0,136,64,0,32,21,161,9,90,16,168,0,175,255,250,144,20,2,4,128,1,23,123,200,128,0,16,36,146,235,8,143,219,36,160,4,1,18,64,145,10,116,66,84,171,80,73,
+90,170,64,8,0,1,41,10,167,212,68,165,2,166,68,29,221,110,202,128,144,16,9,36,79,223,208,34,2,74,128,9,237,36,141,253,72,21,32,64,0,20,4,65,56,41,82,84,170,2,
+38,128,1,33,0,4,0,64,74,233,18,168,170,80,17,95,255,251,96,34,1,2,32,17,43,245,234,136,33,0,9,83,247,10,47,110,146,128,65,9,32,129,81,42,93,4,169,5,64,128,
+145,41,36,0,18,32,34,21,37,244,72,85,0,149,0,63,247,173,189,8,36,32,130,68,151,95,245,32,136,80,32,5,186,197,27,187,72,85,8,0,4,8,4,1,58,162,10,82,146,21,
+36,66,0,64,64,0,128,128,149,90,133,84,148,168,74,255,191,247,213,64,128,4,8,18,93,251,170,138,18,4,130,81,223,146,94,239,101,0,65,36,144,161,34,168,189,20,161,8,64,0,
+73,16,146,9,0,130,8,36,75,253,36,149,66,160,0,251,255,94,253,84,8,128,65,73,87,127,237,100,161,32,0,9,234,201,63,191,180,169,16,0,2,4,16,5,90,161,4,2,20,149,
+2,68,64,0,0,8,2,17,21,110,162,74,173,2,75,255,245,251,239,170,162,34,10,37,91,238,178,146,8,0,18,82,245,116,189,254,213,4,68,146,64,16,138,160,95,72,32,72,128,0,
+84,18,18,144,4,0,72,132,75,255,169,36,144,72,1,254,223,95,186,213,21,17,81,182,238,255,213,84,162,9,0,33,239,186,255,255,234,161,0,0,20,128,32,21,117,82,129,0,84,168,
+1,65,64,2,16,0,0,33,42,191,212,146,36,1,47,239,251,238,255,181,106,170,78,171,123,254,213,74,8,64,34,137,185,121,255,255,186,84,34,33,0,37,10,128,47,164,40,5,0,0,
+84,20,8,136,0,130,74,136,75,238,233,8,129,72,7,255,239,127,255,250,171,85,85,253,175,255,170,81,64,0,0,34,254,219,255,123,234,129,8,132,36,128,64,42,189,209,2,32,37,80,
+34,129,34,0,64,16,0,34,42,255,180,64,16,0,175,191,123,187,238,223,117,170,175,87,118,253,169,74,18,17,17,8,251,117,255,254,253,84,64,0,0,9,21,1,95,164,160,8,128,0,
+72,84,64,34,0,0,146,8,149,187,122,18,0,2,30,255,254,255,191,235,187,90,245,254,221,247,85,40,128,128,4,69,237,187,255,223,213,73,36,146,82,64,64,170,119,233,8,130,21,64,
+37,1,20,128,2,2,0,162,75,255,250,128,66,72,123,253,219,254,255,190,239,237,175,255,247,191,170,165,36,4,64,16,190,223,253,247,253,80,128,0,0,9,20,1,95,232,64,16,130,0,
+144,84,64,8,136,16,40,8,150,247,253,36,0,1,111,255,254,239,254,255,189,110,255,247,189,253,82,168,0,32,1,37,123,107,239,189,182,138,36,137,37,32,1,85,255,245,2,2,41,64,
+74,1,9,2,0,64,130,130,43,222,254,128,0,0,191,239,255,253,255,251,255,219,235,127,247,239,85,37,82,0,20,2,221,190,255,255,237,81,2,32,0,4,180,10,187,250,72,0,68,128,
+33,84,32,32,0,4,8,40,150,255,254,82,36,149,247,255,246,255,247,255,109,125,191,255,253,253,170,144,0,132,128,16,255,219,255,110,250,164,144,2,72,145,66,191,239,189,32,146,18,0,
+168,0,132,136,130,17,33,4,87,223,251,128,0,1,223,127,255,181,127,255,255,239,255,253,223,254,169,74,146,16,0,133,121,111,253,255,219,66,36,136,2,10,85,109,191,254,136,0,164,128,
+69,82,16,2,16,64,8,82,150,255,255,84,128,38,247,247,253,255,254,247,189,189,223,239,253,251,85,32,0,0,36,0,110,186,247,251,253,84,128,33,32,82,219,191,253,253,165,84,66,160,
+168,4,66,64,1,4,162,0,95,255,254,208,18,21,191,255,255,255,255,255,239,119,253,255,255,125,74,149,80,129,0,18,186,223,255,190,238,136,42,0,8,155,237,255,255,190,82,2,145,0,
+82,161,8,18,68,16,8,170,173,247,251,85,32,171,127,251,253,186,239,251,127,255,191,255,255,246,170,72,4,16,0,64,105,117,254,247,187,82,128,137,34,110,223,127,255,235,169,84,10,176,
+40,20,66,64,0,2,130,2,191,255,127,84,149,85,171,253,255,255,190,255,237,111,239,191,255,189,85,34,144,64,36,2,58,159,127,222,221,72,82,32,1,191,251,251,222,244,138,32,160,146,
+42,129,16,9,33,36,40,169,111,223,245,187,107,166,255,187,191,238,251,245,183,255,191,253,254,245,90,144,2,2,0,8,154,123,255,255,110,162,128,4,170,251,255,255,251,222,80,136,5,72,
+18,84,69,32,8,0,130,21,191,255,221,85,85,85,239,255,255,127,255,254,238,239,127,255,247,213,106,69,80,8,0,128,93,173,127,255,245,180,42,65,43,255,255,253,239,250,138,34,73,42,
+25,34,16,5,64,148,17,86,251,127,237,170,213,75,251,253,255,255,238,251,255,223,223,255,255,85,85,16,2,64,66,1,13,95,191,221,222,210,129,21,173,223,191,223,125,237,80,136,4,146,
+12,148,132,168,36,2,170,173,175,255,90,215,119,111,191,255,239,254,253,189,173,254,247,127,255,85,88,68,144,0,8,8,38,181,127,255,251,249,42,85,219,254,247,126,255,85,4,32,162,73,
+22,81,34,83,82,169,42,187,255,255,237,89,85,150,253,254,255,247,255,254,253,127,95,255,253,82,181,16,4,18,0,32,15,94,255,255,254,170,81,86,255,255,255,255,191,118,162,0,9,4,
+13,74,85,85,85,45,85,214,253,255,86,173,235,79,223,255,255,223,238,173,219,189,255,247,253,41,104,66,160,128,0,0,147,171,95,255,255,245,77,127,237,253,239,255,253,169,16,137,36,82,
+31,106,171,173,218,171,111,125,191,255,218,183,109,189,127,223,223,127,255,254,238,251,91,127,233,5,101,8,2,0,65,2,3,181,191,255,127,221,86,223,191,223,123,111,191,180,68,32,1,4,
+11,173,189,246,239,183,187,239,247,189,170,213,174,155,247,255,255,255,251,175,123,222,255,255,252,170,208,66,72,17,4,0,19,222,223,253,251,126,181,251,255,254,255,254,254,209,17,0,148,17,
+14,246,239,127,245,221,222,253,191,255,245,171,107,55,223,127,253,255,255,214,222,245,250,223,242,19,138,40,0,0,0,32,64,235,127,247,255,247,223,239,251,223,109,171,245,164,0,4,32,68,
+23,187,187,215,91,247,119,255,238,254,75,95,221,189,255,255,191,255,246,255,247,95,239,254,200,138,161,2,72,132,0,130,10,250,175,255,215,221,127,191,191,247,126,255,250,160,164,144,137,1,
+7,239,255,255,255,127,251,190,255,245,172,221,107,63,109,253,255,251,255,234,189,247,255,255,210,86,20,72,0,16,18,16,0,255,87,255,253,255,246,255,247,219,175,223,188,148,0,0,64,16,
+19,125,253,253,87,255,191,251,223,221,91,93,239,109,191,255,223,255,255,247,239,127,127,191,40,41,65,1,32,1,109,239,73,125,183,253,183,87,223,255,223,255,126,251,254,34,73,2,20,68,
+15,239,183,239,254,238,253,239,247,254,181,123,221,94,239,219,251,255,191,255,95,215,255,254,162,148,20,80,2,191,255,127,244,190,219,255,251,255,255,239,123,251,215,191,242,136,0,36,128,1,
+21,191,255,190,191,251,255,255,255,181,95,189,119,114,191,175,127,127,255,251,247,127,254,255,72,105,1,4,75,119,109,254,255,255,87,255,214,189,183,191,239,255,239,221,221,33,84,8,33,8,
+23,254,254,255,254,255,239,255,223,251,174,215,93,106,254,245,223,255,251,255,93,254,255,249,37,68,84,17,127,253,255,255,255,255,90,250,251,247,255,254,219,255,190,255,233,20,0,0,132,32,
+45,191,221,238,191,123,254,247,255,252,189,255,247,75,95,251,255,255,255,255,254,255,247,254,146,169,0,139,221,223,183,247,191,255,109,255,223,191,255,107,127,191,255,182,210,129,36,130,16,2,
+23,247,127,251,253,255,191,255,246,219,94,245,237,38,222,188,247,255,255,255,119,253,255,244,73,2,85,127,127,247,255,190,247,247,86,255,255,238,215,255,219,251,239,255,84,32,0,16,0,64,
+46,223,247,95,127,119,251,255,127,245,251,254,245,93,235,223,125,253,255,127,255,255,255,235,84,169,43,255,246,191,182,255,255,191,171,95,254,255,255,246,191,255,253,218,161,9,16,64,130,8,
+53,254,253,247,223,191,127,251,253,93,119,255,85,45,247,175,175,247,255,255,255,255,255,212,146,85,127,187,255,251,255,221,239,255,106,255,255,187,189,255,237,223,247,247,84,64,66,2,16,2,
+87,255,183,110,253,247,255,255,245,254,251,189,126,251,186,255,127,255,255,253,255,255,246,170,170,151,238,254,219,191,118,247,254,255,173,191,251,255,255,190,191,255,238,221,34,18,0,8,0,144,
+125,189,253,191,111,93,119,247,254,175,215,254,213,117,187,46,190,191,127,255,255,255,187,85,74,254,255,247,255,237,219,94,183,253,182,255,255,255,251,251,250,239,255,245,72,128,41,32,68,0,
+215,255,110,219,254,238,254,255,213,215,255,249,255,107,221,125,247,234,239,255,255,253,218,170,95,223,255,255,218,191,239,245,255,255,213,171,254,247,191,127,191,255,255,244,132,84,128,0,0,68,
+46,253,246,222,191,107,191,247,111,251,159,111,245,175,87,245,255,127,255,255,255,111,106,181,251,125,247,123,119,246,186,191,174,239,171,247,255,255,255,239,247,255,223,234,41,0,0,2,17,1,
+91,254,221,191,253,181,253,255,187,125,127,243,254,214,245,239,255,191,191,255,255,251,246,255,255,247,223,223,223,223,255,219,251,254,221,93,255,191,255,126,255,191,255,169,64,68,146,72,64,16,
+111,187,247,246,255,222,223,254,223,237,191,247,63,191,254,239,127,255,255,251,255,255,95,223,239,255,254,254,255,125,86,190,175,255,215,235,255,251,255,247,255,255,253,82,21,16,0,0,0,4,
+93,253,109,95,250,181,251,237,174,253,203,215,222,221,191,95,223,91,251,255,255,239,254,255,127,191,251,251,255,254,239,239,253,127,213,108,251,127,223,253,191,239,255,72,128,66,72,0,4,145,
+247,247,251,254,239,219,255,254,255,187,235,222,171,239,255,235,125,190,223,255,255,125,251,247,254,255,111,255,255,247,186,189,223,255,238,213,95,255,255,215,251,255,244,164,85,8,1,36,64,4,
+93,91,182,251,254,239,119,181,123,245,122,221,247,183,239,87,253,255,255,255,255,255,239,127,255,255,255,255,255,255,255,255,246,255,181,182,191,255,255,255,127,191,90,17,0,65,32,0,0,66,
+174,253,255,191,255,93,255,239,223,235,157,93,191,125,190,185,251,174,191,255,191,191,255,239,251,247,191,255,255,255,255,247,255,223,238,218,171,255,255,255,223,255,161,68,85,18,8,0,18,16,
+85,183,170,255,235,235,222,219,119,238,239,118,214,214,234,254,183,191,255,255,254,247,125,255,223,191,255,255,251,126,246,223,127,127,235,106,221,255,255,255,255,250,148,17,0,64,65,34,64,74,
+187,123,255,255,255,119,123,235,215,174,231,187,110,219,85,223,87,87,247,255,255,255,255,253,254,255,255,247,191,239,191,253,255,255,117,170,182,223,255,255,247,235,33,4,85,9,0,0,1,0,
+101,239,239,247,125,223,191,95,117,237,251,126,189,229,253,167,223,234,255,254,255,255,239,191,247,255,255,222,234,187,247,119,247,255,238,181,219,111,255,255,255,84,72,64,0,64,8,0,4,80,
+154,189,191,223,247,254,255,247,251,253,238,175,190,122,247,90,237,123,219,255,255,239,253,255,127,255,253,255,255,238,221,255,222,251,250,86,181,187,255,255,245,73,18,18,170,18,33,17,16,4,
+197,239,255,127,255,187,182,190,252,250,238,239,245,189,46,189,191,93,255,255,253,255,127,237,237,255,239,253,254,255,255,223,255,223,240,43,110,238,170,181,90,164,160,64,0,128,128,0,1,80,
+37,123,255,255,222,254,253,253,223,109,91,242,250,175,175,235,127,207,250,251,191,255,255,127,255,253,191,111,247,219,119,255,125,127,248,53,245,189,218,74,74,18,18,9,42,40,4,0,36,64,
+5,222,255,255,255,239,247,251,239,63,93,253,235,215,181,126,187,247,255,255,247,255,239,247,255,191,255,250,191,255,254,255,255,255,240,30,174,246,173,85,37,73,72,0,0,130,64,72,129,0,
+37,55,191,254,251,255,250,247,181,215,219,190,181,110,126,221,254,250,250,255,255,251,253,191,127,255,255,223,238,238,223,247,239,239,248,43,219,187,116,144,144,164,128,165,82,8,17,0,8,8,
+2,165,91,255,255,253,174,191,190,237,247,239,186,189,255,189,247,250,255,127,255,239,255,253,251,255,255,255,251,255,251,189,255,191,252,54,237,237,170,74,85,18,42,0,0,65,0,2,37,32,
+4,82,111,255,235,255,191,94,235,246,191,123,191,251,247,235,254,254,125,253,191,255,254,223,255,253,246,245,175,111,254,255,123,251,220,27,91,117,106,161,8,169,0,18,169,8,72,16,0,0,
+16,4,47,239,119,247,107,222,188,251,109,255,175,247,191,253,119,251,127,255,247,255,119,255,239,191,223,191,253,251,123,247,255,254,252,23,182,214,180,138,82,4,168,128,4,33,1,0,168,2,
+0,128,46,191,190,222,255,223,215,231,175,175,241,107,221,190,255,239,175,127,255,125,253,187,255,255,255,254,223,95,239,253,223,251,254,29,223,107,82,65,36,169,2,21,80,132,16,34,2,72,
+0,17,23,255,255,125,249,183,123,175,83,255,254,175,127,247,191,247,181,255,255,247,223,255,255,255,253,219,247,245,127,223,127,127,252,22,181,181,169,40,146,68,80,64,2,0,66,8,160,0,
+4,0,93,254,239,255,247,181,215,223,189,127,127,223,254,239,215,173,223,190,251,255,255,255,253,255,247,255,253,127,251,251,253,255,223,15,218,214,169,5,9,41,4,4,168,36,8,130,8,0,
+16,128,31,223,119,90,214,255,255,61,253,125,223,235,251,251,239,125,126,255,239,191,239,111,119,237,255,183,111,221,191,110,247,254,254,10,183,90,210,80,80,66,81,32,0,129,32,40,65,36,
+0,9,95,187,238,239,110,250,254,247,255,159,255,122,183,222,245,245,255,255,191,254,255,255,255,191,255,239,253,239,255,251,191,251,251,15,218,170,164,138,133,16,0,10,170,16,4,130,0,1,
+0,0,29,223,191,251,189,255,94,191,231,253,111,223,223,127,254,215,55,223,255,247,253,255,221,255,223,189,255,182,237,174,251,255,239,10,182,213,81,32,80,138,170,64,0,69,80,40,148,148,
+2,32,95,247,253,247,219,239,186,246,245,223,254,247,223,245,245,239,223,255,255,191,223,254,247,246,255,255,183,255,255,251,239,255,255,15,107,86,132,10,10,64,0,41,82,0,2,128,0,0,
+16,0,62,175,251,221,247,255,237,239,246,175,127,125,239,191,239,247,222,254,255,255,255,251,254,191,247,247,254,251,254,190,191,255,191,5,186,170,169,65,65,42,169,2,8,170,73,42,74,164,
+0,4,159,255,247,254,247,187,245,251,221,235,253,219,187,235,221,127,91,255,254,255,255,239,219,251,254,254,223,239,251,239,255,125,250,142,213,85,66,20,42,0,4,80,162,1,36,0,128,1,
+0,128,63,191,127,255,175,255,237,126,251,253,190,251,253,255,127,181,127,255,247,255,250,191,127,223,111,239,255,191,191,251,123,239,251,11,109,170,168,129,0,170,161,4,8,72,146,170,42,168,
+2,0,189,223,239,191,95,223,183,123,222,255,239,110,255,127,255,253,235,255,223,254,165,125,237,251,255,253,247,255,247,95,223,255,237,205,181,85,34,40,170,0,72,82,161,21,32,0,128,2,
+16,8,63,255,222,254,235,251,239,159,191,190,251,223,255,253,119,190,255,127,255,170,148,27,255,127,187,191,190,255,127,251,127,255,251,75,85,84,136,2,0,170,18,0,8,68,138,170,36,136,
+0,1,117,255,239,253,250,255,191,239,251,251,239,251,223,171,253,239,255,253,84,81,66,143,91,238,254,246,255,255,239,255,255,255,245,173,170,170,162,144,170,1,68,170,165,40,80,0,0,0,
+0,32,246,175,235,255,253,255,217,242,254,247,254,239,255,255,239,255,170,165,82,138,40,47,254,255,239,255,251,251,189,183,247,127,249,22,214,164,144,4,1,72,17,17,17,69,5,81,16,32,
+17,2,251,255,255,251,222,126,182,191,223,247,255,191,255,235,250,164,84,72,136,32,129,5,219,187,255,111,255,255,255,254,255,255,250,75,90,149,68,161,84,18,136,74,74,32,160,0,2,0,
+0,1,237,247,250,247,183,158,255,251,119,223,253,239,111,255,85,82,130,146,34,136,16,39,126,239,123,250,223,223,255,251,255,255,249,37,101,82,34,8,2,128,82,161,64,148,8,132,64,8,
+0,9,254,251,254,191,255,235,215,95,253,255,247,245,255,81,74,72,40,0,128,34,68,129,247,127,238,223,253,253,219,223,255,223,252,139,170,74,144,34,168,85,4,21,42,2,130,16,8,128,
+18,35,253,253,183,174,181,215,223,239,255,191,223,255,245,76,33,2,130,74,20,128,0,2,253,218,255,255,247,183,255,255,221,255,218,37,85,82,73,0,18,0,169,168,132,168,32,1,32,34,
+0,7,239,190,255,239,255,123,245,125,126,223,255,105,9,34,136,32,16,0,64,4,144,17,215,239,187,182,223,255,247,255,127,255,253,66,169,73,36,74,164,170,20,69,40,0,8,132,4,128,
+0,15,253,251,253,247,181,246,255,255,191,239,126,170,168,144,34,8,66,82,2,32,2,64,254,187,239,255,254,254,223,119,255,255,254,147,85,42,144,128,18,68,163,40,66,146,66,32,128,8,
+16,155,119,246,238,239,255,239,94,245,253,250,250,208,146,4,128,130,0,0,32,0,0,0,111,238,254,239,119,219,255,255,255,255,14,1,84,164,68,41,73,41,72,133,16,0,8,8,42,66,
+0,47,253,239,255,218,215,223,245,255,247,127,202,138,64,160,4,16,18,1,4,137,36,0,123,187,187,253,255,255,251,253,247,191,87,169,82,146,146,4,164,146,37,40,137,36,129,34,128,16,
+2,63,255,223,125,223,255,255,254,189,255,222,85,32,20,4,32,0,128,72,0,0,0,18,46,254,255,183,182,255,255,223,255,254,146,65,74,73,36,82,18,169,72,132,64,0,36,64,18,64,
+0,255,247,255,219,191,255,95,239,223,251,245,80,10,129,16,128,130,1,0,64,32,0,128,31,215,238,254,255,238,239,255,255,254,123,4,169,42,73,9,85,36,36,82,37,85,17,8,64,4,
+32,255,253,255,255,255,223,127,255,239,223,168,138,160,72,64,8,16,16,2,9,2,72,0,31,125,191,219,255,255,255,255,191,255,113,209,36,145,32,68,146,66,146,8,128,0,64,34,0,0,
+2,219,247,255,223,127,254,255,189,251,250,146,80,21,34,4,33,0,0,16,0,0,0,0,23,254,251,255,237,191,127,127,255,254,117,66,170,72,149,17,36,148,73,82,20,68,20,128,2,32,
+3,255,255,127,254,255,253,253,255,254,234,74,138,202,136,65,0,4,132,64,0,16,1,8,141,239,223,119,127,255,251,253,255,255,1,144,146,165,64,128,65,2,32,0,65,17,64,0,32,2,
+7,251,239,223,245,255,247,255,247,127,85,82,82,36,34,16,0,64,16,0,144,128,64,0,7,123,123,255,254,247,255,239,255,255,84,202,84,72,42,85,20,84,138,169,4,0,1,9,4,8,
+19,191,254,255,255,255,254,255,255,233,82,170,170,169,72,132,73,0,0,2,0,2,4,0,3,255,223,221,219,255,191,255,255,239,66,81,73,37,65,2,73,33,32,0,32,74,16,32,32,128,
+7,254,255,254,237,253,255,255,111,86,170,170,164,146,34,16,0,4,1,8,2,0,0,32,1,221,251,255,255,255,239,191,247,127,168,164,165,82,20,84,144,138,21,82,9,0,130,4,128,0,
+15,255,110,255,255,127,251,87,250,170,149,16,73,8,128,64,0,0,132,0,0,16,16,2,18,255,94,183,118,221,255,255,255,251,146,82,146,9,65,8,69,36,160,0,128,32,0,32,18,32,
+31,239,255,223,223,191,255,251,234,169,72,165,16,64,18,1,16,144,16,32,32,0,128,0,0,239,247,255,255,255,191,255,255,245,192,73,85,82,40,162,146,81,10,136,34,9,36,137,0,4,
+15,251,189,255,255,239,255,253,42,68,34,0,68,18,64,4,2,0,0,0,128,130,1,16,0,253,219,253,237,219,253,191,223,226,169,36,145,41,4,17,36,132,64,34,8,64,0,32,72,128,
+27,255,255,191,125,245,239,234,164,146,136,148,1,0,1,32,0,1,0,2,2,8,0,0,128,119,253,183,191,127,255,253,255,234,208,34,74,132,169,74,18,41,18,0,128,4,34,132,0,16,
+62,223,239,255,255,255,254,148,145,36,34,1,32,68,16,0,64,4,2,64,8,0,4,0,8,95,183,255,247,239,239,255,255,206,226,18,169,82,34,33,73,2,64,68,2,64,136,33,34,2,
+31,251,190,255,247,191,122,82,4,65,8,64,4,0,128,4,8,64,32,0,0,0,16,34,1,59,255,221,109,125,127,255,255,222,80,165,36,73,72,148,68,168,9,16,32,18,2,136,0,64,
+63,255,255,255,255,255,165,33,81,16,64,8,0,16,4,144,1,0,0,18,32,32,64,0,0,47,118,239,255,223,254,255,255,198,106,8,170,164,18,66,146,5,32,0,132,128,41,0,8,0,
+55,247,223,119,251,253,80,136,4,4,1,1,33,0,0,0,144,9,9,0,0,130,0,128,32,31,223,187,87,255,251,255,255,233,48,66,146,82,161,20,73,80,4,66,0,8,132,34,65,8,
+29,255,255,223,255,164,138,34,160,145,16,32,4,2,64,0,0,32,32,32,130,0,0,4,4,77,122,239,253,219,255,255,255,210,82,42,169,36,74,73,36,4,145,8,18,64,18,136,0,0,
+79,255,191,255,254,170,32,136,8,0,0,0,0,16,9,34,34,0,128,130,8,8,4,16,0,15,239,218,223,255,191,255,255,232,152,130,165,73,16,146,81,80,0,0,128,9,42,0,16,32,
+39,239,254,124,234,145,10,33,2,32,4,4,128,64,0,0,0,138,8,8,0,1,32,64,145,6,253,127,254,254,255,255,255,242,26,85,84,164,165,36,136,5,72,146,18,64,9,1,2,2,
+159,255,126,24,41,36,64,132,32,4,144,128,16,0,128,9,36,32,34,32,65,32,1,0,0,39,175,214,255,255,255,255,255,233,42,138,170,82,72,73,37,80,2,0,64,2,84,164,32,64,
+86,255,156,90,84,129,18,0,0,128,0,0,1,2,18,64,1,4,128,130,20,4,8,4,4,11,253,191,239,247,255,255,255,244,4,74,146,137,34,146,16,0,32,73,4,144,42,0,1,0,
+255,255,12,8,34,40,64,34,72,16,0,16,64,8,0,9,40,80,40,16,128,16,128,16,144,130,223,251,189,191,255,255,126,250,149,37,85,82,137,36,165,74,4,4,16,1,21,0,136,8,
+239,255,5,40,136,130,8,136,0,1,33,2,8,32,33,32,69,5,66,138,34,64,36,128,0,37,255,126,247,255,255,253,255,248,2,146,170,72,82,17,0,32,128,144,130,72,84,146,0,32,
+253,254,72,138,34,16,34,0,2,64,4,32,2,1,4,10,144,168,148,64,136,4,128,36,138,2,237,239,255,255,255,247,231,253,82,75,85,37,72,164,85,0,18,2,40,1,82,0,1,2,
+255,254,5,36,144,65,0,1,32,8,0,4,160,148,72,160,74,146,33,42,69,80,18,0,32,146,255,255,187,119,111,191,131,252,9,4,169,85,37,18,0,74,0,32,1,4,80,136,68,0,
+223,221,16,8,4,8,16,72,4,2,81,32,10,33,18,77,170,73,74,146,40,5,0,165,2,9,191,255,255,255,253,255,185,250,164,66,170,162,64,164,170,0,64,138,164,32,138,33,0,16,
+251,122,10,165,73,33,2,0,0,128,4,10,161,74,73,42,169,36,32,73,69,80,170,8,80,68,247,187,254,237,223,255,107,253,16,144,170,149,42,18,1,36,8,0,0,128,160,0,16,66,
+255,170,68,80,0,0,64,17,32,41,16,161,20,169,109,181,36,146,150,164,169,37,16,162,10,42,191,255,255,191,123,255,184,230,164,68,85,80,146,168,168,0,0,16,146,10,74,148,1,0,
+234,84,19,21,84,68,8,128,4,0,66,20,170,170,164,164,149,85,73,18,84,148,165,17,65,65,111,223,237,251,255,255,82,242,146,129,42,170,168,66,4,146,66,66,8,33,32,1,32,0,
+169,16,20,84,0,0,32,4,17,18,17,69,37,74,171,91,106,170,170,170,138,170,72,164,84,149,255,126,255,183,255,255,128,165,72,16,85,85,5,41,80,0,8,0,65,0,128,64,4,8,
+18,90,146,17,18,34,2,32,128,64,136,40,170,170,255,255,255,255,255,255,117,82,165,18,146,74,191,255,253,255,255,255,212,82,82,132,21,82,168,132,5,72,0,1,20,74,85,9,16,64,
+65,36,42,168,64,129,64,2,4,4,37,70,170,85,255,157,255,127,255,255,255,253,90,213,74,171,251,239,175,255,191,255,210,33,36,16,133,84,165,41,80,1,32,16,1,1,0,0,64,2,
+20,48,10,21,8,8,17,16,33,33,17,42,165,91,255,187,255,255,255,255,255,255,255,255,255,255,239,189,255,254,255,255,228,148,66,64,18,170,146,132,4,68,1,2,72,84,68,16,1,8,
+2,146,84,148,36,69,68,0,132,8,164,170,149,127,239,127,111,255,255,255,253,239,255,222,255,255,127,255,254,239,247,255,240,1,20,4,69,85,73,41,81,0,8,0,2,82,16,66,4,32,
+72,8,36,81,2,2,0,74,16,165,21,84,170,255,255,253,255,255,255,255,239,255,254,251,246,223,254,255,255,255,255,255,250,168,33,17,1,84,170,66,0,16,128,32,32,153,66,0,32,0,
+10,32,74,154,72,42,18,0,2,18,85,85,93,215,254,255,223,127,255,247,191,223,219,255,255,253,255,253,255,251,93,239,250,4,136,0,20,182,164,148,84,130,1,4,132,72,8,0,0,0,
+40,16,32,16,2,5,0,136,169,73,85,82,254,223,127,246,255,255,255,255,255,253,127,223,123,255,247,239,239,223,255,191,253,81,34,72,1,85,82,65,0,8,36,0,1,53,32,146,1,18,
+16,68,84,75,32,148,74,34,4,170,170,175,189,127,157,123,126,255,255,255,255,239,254,247,223,183,191,127,126,255,247,255,246,136,16,2,64,85,85,42,73,32,0,16,0,144,0,0,72,0,
+82,32,65,20,10,38,1,8,170,170,165,93,255,86,247,253,171,255,255,238,239,189,215,253,253,254,253,251,255,255,255,255,250,164,128,32,20,171,85,72,128,1,0,64,72,84,132,72,0,64,
+72,82,84,8,128,138,0,165,85,85,86,254,247,221,111,253,255,255,255,255,255,247,254,223,183,175,255,223,223,255,126,239,213,82,74,8,64,21,170,146,41,8,17,2,2,161,32,1,0,4,
+80,72,64,42,129,21,36,18,170,74,191,255,255,230,255,123,127,255,255,255,222,254,219,251,255,251,239,254,251,183,223,255,234,73,0,65,2,78,213,72,128,64,64,0,1,84,1,0,17,0,
+160,64,82,10,72,74,128,10,82,171,255,247,215,251,191,251,175,255,255,251,251,219,255,254,221,111,189,239,255,255,255,223,85,36,32,0,8,2,186,164,36,2,0,8,36,32,136,16,64,16,
+64,168,72,9,154,146,0,149,74,191,251,251,190,252,189,246,255,255,255,255,127,255,219,183,247,255,255,125,182,254,253,255,180,145,2,68,0,42,213,82,137,16,4,32,130,136,0,2,0,64,
+160,161,32,140,192,149,144,5,91,239,247,253,223,189,191,191,223,255,255,255,239,110,255,253,191,187,239,247,255,239,247,255,169,36,8,0,129,2,218,144,64,0,16,128,5,66,66,32,9,2,
+130,144,82,9,40,74,128,74,255,255,239,251,126,251,215,245,255,255,255,255,253,255,222,219,237,255,123,127,239,127,223,255,162,0,64,0,16,2,182,202,148,137,0,0,17,32,8,0,32,0,
+};
+*/
+
+/*
+//set pixel value at x and y coordinate
+void setPixel(int x, int y, int on){
+    int height = 300;
+    int width = 400;
+
+    //index in lab11 array
+    int index = (y * 50) + ((50 * x)/400);
+    int bitsIntoByte = 7 - (x % 8);
+
+    //turns the nth bit on or off
+    lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte);
+}
+
+
+void clearScreen(){
+    memset(lab11, 0, 15000 * sizeof(uint8_t));
+}
+
+//inserts a grid of pixels into the image - NOTE - coordinate is @ uper left
+void insertPixelGrid(int width, int height, int grid[height][width], int xcoord, int ycoord)
+{
+    for(int y = 0; y < height; y++)
+    {
+        for(int x = 0; x < width; x++)
+        {
+            if(grid[y][x] == 1)
+            {
+                setPixel(x + xcoord, y + ycoord, 1);
+            }
+            else
+            {
+                setPixel(x + xcoord, y + ycoord, 0);
+            }
+        }
+    }
+}
+
+//reverse the bits in the char
+unsigned char reverse(unsigned char b){
+    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
+    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
+    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
+    return b;
+}
+
+void writeText(char text[])
+{
+    int numberOfCharacters = strlen(text);
+
+    //loop over each character to be written
+    for(int i = 0; i < numberOfCharacters; i++)
+    {
+        char find = text[i];
+        char *bitmap = font8x8_basic[find];
+        uint8_t line =  (i / 50);
+
+        //write each row of the character pixels into the picture
+        for(int j = 0; j < 8; j++)
+        {
+            int index = (i) + (50 * j) + (line * 50 * 8);
+            lab11[index] = reverse(bitmap[j]);
+        }
+        
+    }
+}
+
+int main(void) 
+{
+    // Initialize.
+    led_init(LED0);
+    led_on(LED0);
+
+    clearScreen();
+    uint8_t iterate = 0;
+    while(1)
+    {
+        char buffer[200];
+        buffer[200] = 0;
+
+        sprintf(buffer, "%d", iterate);
+
+        writeText(buffer);
+
+        
+        //ledinit
+        //ledoff
+
+        // Setup input for busy
+        nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
+
+        // Assert ENABLE
+        nrf_gpio_cfg_output(nTC_EN);
+        nrf_gpio_pin_clear(nTC_EN);
+
+        // Need to wait 6.5 ms per datasheet (section 5.5)
+        // Up that a little to be safe and who cares about a couple ms
+        nrf_delay_ms(10);
+
+        // Setup SPI
+        spi_init();
+
+        uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
+        uint8_t rx[256] = {0};
+
+        // Get device id to check that we can comm with this display
+        // Send the command
+        nrf_drv_spi_transfer(&_spi, tx, 4, NULL, 0);
+
+        // Wait until no longer busy
+        wait_for_not_busy();
+
+        // Receive response
+        nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 28);
+
+        // Not sure, sometimes busy signal, sometimes not?
+        // Just wait for a hot sec for now
+        nrf_delay_ms(1);
+
+
+        uint8_t pic[255];
+
+        // Setup spi comm header
+        pic[0] = 0x20;
+        pic[1] = 0x01;
+        pic[2] = 0x00;
+
+        // How many bytes we want to send.
+        pic[3] = 16;
+
+        // Pic header
+        pic[4] = 0x33; // 4.41"
+        pic[5] = 0x01; // 400px
+        pic[6] = 0x90;
+        pic[7] = 0x01; // 300px
+        pic[8] = 0x2c;
+        pic[9] = 0x01; // 1 bit
+        // pic[10] = 0x02; // image pixel data format type 2
+        pic[10] = 0x00; // image pixel data format type 0
+        pic[11] = 0; // reserved
+        pic[12] = 0;
+        pic[13] = 0;
+        pic[14] = 0;
+        pic[15] = 0;
+        pic[16] = 0;
+        pic[17] = 0;
+        pic[18] = 0;
+        pic[19] = 0;
+
+        // Send header
+        //THESE 2 LINES SCREW EVERYTHING UP AND IT FREEZES
+        nrf_drv_spi_transfer(&_spi, pic, 20, NULL, 0);
+        wait_for_not_busy();
+
+        led_off(LED0);//debug
+
+        nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+        wait_for_not_busy();
+
+        uint8_t i;
+
+        // // display a pattern
+        // pic[3] = 250;
+        // // pic[3] = 150;
+        // for (i=4; i<254; i++) {
+        //     if (i % 2 == 0) {
+        //         pic[i] = 0x80;
+        //     } else {
+        //         pic[i] = 0x0C;
+        //     }
+        //     // pic[i] = i;
+        // }
+        //
+        // // Display a lot more
+        // for (i=0; i<30; i++) {
+        //     nrf_drv_spi_transfer(&_spi, pic, 254, NULL, 0);
+        //     wait_for_not_busy();
+        //     nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+        //     wait_for_not_busy();
+        // }
+
+
+        // display an image
+        pic[3] = 250;
+        for (i=0; i<60; i++) {
+            memcpy(pic+4, lab11+(i*250), 250); // Lab11 logo
+            //memset(pic+4, 0xFF, 250); // Black screen
+            //memset(pic+4, 0x00, 250); // White screen
+
+            nrf_drv_spi_transfer(&_spi, pic, 254, NULL, 0);
+            wait_for_not_busy();
+            nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+            wait_for_not_busy();
+        }
+
+        // Actually render the image
+        tx[0] = 0x24;
+        tx[1] = 0x01;
+        tx[2] = 0x00;
+
+        nrf_drv_spi_transfer(&_spi, tx, 3, NULL, 0);
+        wait_for_not_busy();
+        nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
+        wait_for_not_busy();
+
+
+        nrf_gpio_pin_set(nTC_EN);
+
+
+        led_on(LED0);
+
+        // led_on(LED0);
+
+*/
+        /*
+        // Enter main loop.
+        while (1) {
+            sd_app_evt_wait();
+        }
+        */
+/*
+        iterate++;
+    }
+    
+}
+*/
\ No newline at end of file
diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 868c8715107125f0cdf67aa9804d74409605c197..245d222bc633d9ccec4e0a41bc5c096c4a2cbd93 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -12,11 +12,9 @@
 #include "app_util_platform.h"
 #include "math.h"
 #include <string.h>
-
 #include "board.h"
-
-//font
 #include "font8x8_basic.h"
+#include "qrencode.h"
 
 // Need pin number for LED
 #define LED0 18
@@ -51,7 +49,7 @@ static void spi_init () {
 
 static void wait_for_not_busy () {
     uint8_t found_busy_low = 0;
-    uint8_t count = 0;
+    uint16_t count = 0;
     while (1) {
         uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
         if (found_busy_low && pin) {
@@ -61,12 +59,14 @@ static void wait_for_not_busy () {
             found_busy_low = 1;
         }
 
-        if(count > 1000)
+        if(!found_busy_low)
         {
-            break;
+            count++;
+            if(count > 1000)
+            {
+                break;
+            }
         }
-
-        count++;
     }
 
     // Then wait a little longer so we don't violate the T_NS time.
@@ -460,15 +460,83 @@ void writeStringAtLocation(char *str, int x, int y, int scale){
     }
 }
 
+//sets a block of 8x8 pixels on or off. x < 50 & y < 38
+void setBlock(int x, int y, int on)
+{
+    for(int i = 0; i < 8; i++)
+    {
+        if(on == 1){
+            screen[x + (50 * i) + (50 * y * 8)] = 255;
+        }else{
+            screen[x + (50 * i) + (50 * y * 8)] = 0;
+        }
+        
+    }
+}
+
+//inserts a grid of pixels, but much larger
+void insertBigPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord)
+{
+    for(int y = 0; y < height; y++)
+    {
+        for(int x = 0; x <width; x++)
+        {
+            if(grid[y][x] == 1)
+            {
+                setBlock(x, y, 1);
+            }
+            else
+            {
+                setBlock(x, y, 0);
+            }
+        }
+    }
+}
+
+//write a qr code to the screen
+void writeQRcode(char *str)
+{
+    QRcode *qrcode;
+    qrcode = QRcode_encodeString8bit(str, 0, 0);
+    uint8_t width = qrcode->width;
+
+    /*
+    for(int i = 0; i < 17; i++)
+    {
+        char stuff[50];
+
+        sprintf(stuff, "%x", (*qrcode).data[i]);
+        writeStringAtLocation(stuff, 0, i * 8 * 2, 2);
+    }
+    */
+
+    uint8_t grid[width][width];
+
+    for(int i = 0; i < width * width; i++)
+    {
+        int x = i % width;
+        int y = i / width;
+
+        grid[x][y] = (*qrcode).data[i] & 1;
+    }
+    
+    insertBigPixelGrid(width, width, grid, 0, 0);
+
+}
+
 int main(void) 
 {
     led_init(LED0);
+    
     led_off(LED0);
 
     clearScreen();
 
+    writeQRcode("Branden is dumb");
+    //writeStringAtLocation("Testing", 0, 0, 5);
+
     //write the string "Hello" at x=0 y=0 and scale of 20x
-    writeStringAtLocation("Hello", 0, 0, 20);
+    //writeStringAtLocation("Yo", 0, 0, 9);
 
     // Setup input for busy
     nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
@@ -592,4 +660,5 @@ int main(void)
     while (1) {
         sd_app_evt_wait();
     }
+
 }
diff --git a/apps/eink-advanced/mask.c b/apps/eink-advanced/mask.c
new file mode 100644
index 0000000000000000000000000000000000000000..1033b58e3c6cff693230ebee2377fb6c18c079f9
--- /dev/null
+++ b/apps/eink-advanced/mask.c
@@ -0,0 +1,357 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Masking.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "qrspec.h"
+#include "mask.h"
+
+__STATIC int Mask_writeFormatInformation(int width, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned int format;
+	unsigned char v;
+	int i;
+	int blacks = 0;
+
+	format = QRspec_getFormatInfo(mask, level);
+
+	for(i = 0; i < 8; i++) {
+		if(format & 1) {
+			blacks += 2;
+			v = 0x85;
+		} else {
+			v = 0x84;
+		}
+		frame[width * 8 + width - 1 - i] = v;
+		if(i < 6) {
+			frame[width * i + 8] = v;
+		} else {
+			frame[width * (i + 1) + 8] = v;
+		}
+		format= format >> 1;
+	}
+	for(i = 0; i < 7; i++) {
+		if(format & 1) {
+			blacks += 2;
+			v = 0x85;
+		} else {
+			v = 0x84;
+		}
+		frame[width * (width - 7 + i) + 8] = v;
+		if(i == 0) {
+			frame[width * 8 + 7] = v;
+		} else {
+			frame[width * 8 + 6 - i] = v;
+		}
+		format= format >> 1;
+	}
+
+	return blacks;
+}
+
+/**
+ * Demerit coefficients.
+ * See Section 8.8.2, pp.45, JIS X0510:2004.
+ */
+#define N1 (3)
+#define N2 (3)
+#define N3 (40)
+#define N4 (10)
+
+#define MASKMAKER(__exp__) \
+	int x, y;\
+	int b = 0;\
+\
+	for(y = 0; y < width; y++) {\
+		for(x = 0; x < width; x++) {\
+			if(*s & 0x80) {\
+				*d = *s;\
+			} else {\
+				*d = *s ^ ((__exp__) == 0);\
+			}\
+			b += (int)(*d & 1);\
+			s++; d++;\
+		}\
+	}\
+	return b;
+
+static int Mask_mask0(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((x+y)&1)
+}
+
+static int Mask_mask1(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(y&1)
+}
+
+static int Mask_mask2(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(x%3)
+}
+
+static int Mask_mask3(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((x+y)%3)
+}
+
+static int Mask_mask4(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(((y/2)+(x/3))&1)
+}
+
+static int Mask_mask5(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(((x*y)&1)+(x*y)%3)
+}
+
+static int Mask_mask6(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x*y)&1)+(x*y)%3)&1)
+}
+
+static int Mask_mask7(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x*y)%3)+((x+y)&1))&1)
+}
+
+#define maskNum (8)
+typedef int MaskMaker(int, const unsigned char *, unsigned char *);
+static MaskMaker *maskMakers[maskNum] = {
+	Mask_mask0, Mask_mask1, Mask_mask2, Mask_mask3,
+	Mask_mask4, Mask_mask5, Mask_mask6, Mask_mask7
+};
+
+#ifdef WITH_TESTS
+unsigned char *Mask_makeMaskedFrame(int width, unsigned char *frame, int mask)
+{
+	unsigned char *masked;
+
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+
+	return masked;
+}
+#endif
+
+unsigned char *Mask_makeMask(int width, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned char *masked;
+
+	if(mask < 0 || mask >= maskNum) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+	Mask_writeFormatInformation(width, masked, mask, level);
+
+	return masked;
+}
+
+
+//static int n1;
+//static int n2;
+//static int n3;
+//static int n4;
+
+__STATIC int Mask_calcN1N3(int length, int *runLength)
+{
+	int i;
+	int demerit = 0;
+	int fact;
+
+	for(i = 0; i < length; i++) {
+		if(runLength[i] >= 5) {
+			demerit += N1 + (runLength[i] - 5);
+			//n1 += N1 + (runLength[i] - 5);
+		}
+		if((i & 1)) {
+			if(i >= 3 && i < length-2 && (runLength[i] % 3) == 0) {
+				fact = runLength[i] / 3;
+				if(runLength[i-2] == fact &&
+				   runLength[i-1] == fact &&
+				   runLength[i+1] == fact &&
+				   runLength[i+2] == fact) {
+					if(i == 3 || runLength[i-3] >= 4 * fact) {
+						demerit += N3;
+						//n3 += N3;
+					} else if(i+4 >= length || runLength[i+3] >= 4 * fact) {
+						demerit += N3;
+						//n3 += N3;
+					}
+				}
+			}
+		}
+	}
+
+	return demerit;
+}
+
+__STATIC int Mask_calcN2(int width, unsigned char *frame)
+{
+	int x, y;
+	unsigned char *p;
+	unsigned char b22, w22;
+	int demerit = 0;
+
+	p = frame + width + 1;
+	for(y = 1; y < width; y++) {
+		for(x = 1; x < width; x++) {
+			b22 = p[0] & p[-1] & p[-width] & p [-width-1];
+			w22 = p[0] | p[-1] | p[-width] | p [-width-1];
+			if((b22 | (w22 ^ 1))&1) {
+				demerit += N2;
+			}
+			p++;
+		}
+		p++;
+	}
+
+	return demerit;
+}
+
+__STATIC int Mask_calcRunLengthH(int width, unsigned char *frame, int *runLength)
+{
+	int head;
+	int i;
+	unsigned char prev;
+
+	if(frame[0] & 1) {
+		runLength[0] = -1;
+		head = 1;
+	} else {
+		head = 0;
+	}
+	runLength[head] = 1;
+	prev = frame[0];
+
+	for(i = 1; i < width; i++) {
+		if((frame[i] ^ prev) & 1) {
+			head++;
+			runLength[head] = 1;
+			prev = frame[i];
+		} else {
+			runLength[head]++;
+		}
+	}
+
+	return head + 1;
+}
+
+__STATIC int Mask_calcRunLengthV(int width, unsigned char *frame, int *runLength)
+{
+	int head;
+	int i;
+	unsigned char prev;
+
+	if(frame[0] & 1) {
+		runLength[0] = -1;
+		head = 1;
+	} else {
+		head = 0;
+	}
+	runLength[head] = 1;
+	prev = frame[0];
+
+	for(i = 1; i < width; i++) {
+		if((frame[i * width] ^ prev) & 1) {
+			head++;
+			runLength[head] = 1;
+			prev = frame[i * width];
+		} else {
+			runLength[head]++;
+		}
+	}
+
+	return head + 1;
+}
+
+__STATIC int Mask_evaluateSymbol(int width, unsigned char *frame)
+{
+	int x, y;
+	int demerit = 0;
+	int runLength[QRSPEC_WIDTH_MAX + 1];
+	int length;
+
+	demerit += Mask_calcN2(width, frame);
+
+	for(y = 0; y < width; y++) {
+		length = Mask_calcRunLengthH(width, frame + y * width, runLength);
+		demerit += Mask_calcN1N3(length, runLength);
+	}
+
+	for(x = 0; x < width; x++) {
+		length = Mask_calcRunLengthV(width, frame + x, runLength);
+		demerit += Mask_calcN1N3(length, runLength);
+	}
+
+	return demerit;
+}
+
+unsigned char *Mask_mask(int width, unsigned char *frame, QRecLevel level)
+{
+	int i;
+	unsigned char *mask, *bestMask;
+	int minDemerit = INT_MAX;
+	int blacks;
+	int bratio;
+	int demerit;
+	int w2 = width * width;
+
+	mask = (unsigned char *)malloc(w2);
+	if(mask == NULL) return NULL;
+	bestMask = (unsigned char *)malloc(w2);
+	if(bestMask == NULL) {
+		free(mask);
+		return NULL;
+	}
+
+	for(i = 0; i < maskNum; i++) {
+//		n1 = n2 = n3 = n4 = 0;
+		demerit = 0;
+		blacks = maskMakers[i](width, frame, mask);
+		blacks += Mask_writeFormatInformation(width, mask, i, level);
+		bratio = (200 * blacks + w2) / w2 / 2; /* (int)(100*blacks/w2+0.5) */
+		demerit = (abs(bratio - 50) / 5) * N4;
+//		n4 = demerit;
+		demerit += Mask_evaluateSymbol(width, mask);
+//		printf("(%d,%d,%d,%d)=%d\n", n1, n2, n3 ,n4, demerit);
+		if(demerit < minDemerit) {
+			minDemerit = demerit;
+			memcpy(bestMask, mask, w2);
+		}
+	}
+	free(mask);
+	return bestMask;
+}
diff --git a/apps/eink-advanced/mmask.c b/apps/eink-advanced/mmask.c
new file mode 100644
index 0000000000000000000000000000000000000000..babdaec4fd6cd7721b0d9dce1c3c456f06459179
--- /dev/null
+++ b/apps/eink-advanced/mmask.c
@@ -0,0 +1,177 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Masking for Micro QR Code.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "mqrspec.h"
+#include "mmask.h"
+
+__STATIC void MMask_writeFormatInformation(int version, int width, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned int format;
+	unsigned char v;
+	int i;
+
+	format = MQRspec_getFormatInfo(mask, version, level);
+
+	for(i = 0; i < 8; i++) {
+		v = 0x84 | (format & 1);
+		frame[width * (i + 1) + 8] = v;
+		format = format >> 1;
+	}
+	for(i = 0; i < 7; i++) {
+		v = 0x84 | (format & 1);
+		frame[width * 8 + 7 - i] = v;
+		format = format >> 1;
+	}
+}
+
+#define MASKMAKER(__exp__) \
+	int x, y;\
+\
+	for(y = 0; y < width; y++) {\
+		for(x = 0; x < width; x++) {\
+			if(*s & 0x80) {\
+				*d = *s;\
+			} else {\
+				*d = *s ^ ((__exp__) == 0);\
+			}\
+			s++; d++;\
+		}\
+	}
+
+static void Mask_mask0(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(y&1)
+}
+
+static void Mask_mask1(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER(((y/2)+(x/3))&1)
+}
+
+static void Mask_mask2(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x*y)&1)+(x*y)%3)&1)
+}
+
+static void Mask_mask3(int width, const unsigned char *s, unsigned char *d)
+{
+	MASKMAKER((((x+y)&1)+((x*y)%3))&1)
+}
+
+#define maskNum (4)
+typedef void MaskMaker(int, const unsigned char *, unsigned char *);
+static MaskMaker *maskMakers[maskNum] = {
+	Mask_mask0, Mask_mask1, Mask_mask2, Mask_mask3
+};
+
+#ifdef WITH_TESTS
+unsigned char *MMask_makeMaskedFrame(int width, unsigned char *frame, int mask)
+{
+	unsigned char *masked;
+
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+
+	return masked;
+}
+#endif
+
+unsigned char *MMask_makeMask(int version, unsigned char *frame, int mask, QRecLevel level)
+{
+	unsigned char *masked;
+	int width;
+
+	if(mask < 0 || mask >= maskNum) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	width = MQRspec_getWidth(version);
+	masked = (unsigned char *)malloc(width * width);
+	if(masked == NULL) return NULL;
+
+	maskMakers[mask](width, frame, masked);
+	MMask_writeFormatInformation(version, width, masked, mask, level);
+
+	return masked;
+}
+
+__STATIC int MMask_evaluateSymbol(int width, unsigned char *frame)
+{
+	int x, y;
+	unsigned char *p;
+	int sum1 = 0, sum2 = 0;
+
+	p = frame + width * (width - 1);
+	for(x = 1; x < width; x++) {
+		sum1 += (p[x] & 1);
+	}
+
+	p = frame + width * 2 - 1;
+	for(y = 1; y < width; y++) {
+		sum2 += (*p & 1);
+		p += width;
+	}
+
+	return (sum1 <= sum2)?(sum1 * 16 + sum2):(sum2 * 16 + sum1);
+}
+
+unsigned char *MMask_mask(int version, unsigned char *frame, QRecLevel level)
+{
+	int i;
+	unsigned char *mask, *bestMask;
+	int maxScore = 0;
+	int score;
+	int width;
+
+	width = MQRspec_getWidth(version);
+
+	mask = (unsigned char *)malloc(width * width);
+	if(mask == NULL) return NULL;
+	bestMask = NULL;
+
+	for(i = 0; i < maskNum; i++) {
+		score = 0;
+		maskMakers[i](width, frame, mask);
+		MMask_writeFormatInformation(version, width, mask, i, level);
+		score = MMask_evaluateSymbol(width, mask);
+		if(score > maxScore) {
+			maxScore = score;
+			free(bestMask);
+			bestMask = mask;
+			mask = (unsigned char *)malloc(width * width);
+			if(mask == NULL) break;
+		}
+	}
+	free(mask);
+	return bestMask;
+}
diff --git a/apps/eink-advanced/mqrspec.c b/apps/eink-advanced/mqrspec.c
new file mode 100644
index 0000000000000000000000000000000000000000..fe7b5d5018785df847b83b25f2ac774f6b62bb86
--- /dev/null
+++ b/apps/eink-advanced/mqrspec.c
@@ -0,0 +1,232 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Micro QR Code specification in convenient format.
+ * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * The following data / specifications are taken from
+ * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
+ *  or
+ * "Automatic identification and data capture techniques --
+ *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "mqrspec.h"
+
+/******************************************************************************
+ * Version and capacity
+ *****************************************************************************/
+
+typedef struct {
+	int width; //< Edge length of the symbol
+	int ec[4];  //< Number of ECC code (bytes)
+} MQRspec_Capacity;
+
+/**
+ * Table of the capacity of symbols
+ * See Table 1 (pp.106) and Table 8 (pp.113) of Appendix 1, JIS X0510:2004.
+ */
+static const MQRspec_Capacity mqrspecCapacity[MQRSPEC_VERSION_MAX + 1] = {
+	{  0, {0,  0,  0, 0}},
+	{ 11, {2,  0,  0, 0}},
+	{ 13, {5,  6,  0, 0}},
+	{ 15, {6,  8,  0, 0}},
+	{ 17, {8, 10, 14, 0}}
+};
+
+int MQRspec_getDataLengthBit(int version, QRecLevel level)
+{
+	int w;
+	int ecc;
+
+	w = mqrspecCapacity[version].width - 1;
+	ecc = mqrspecCapacity[version].ec[level];
+	if(ecc == 0) return 0;
+	return w * w - 64 - ecc * 8;
+}
+
+int MQRspec_getDataLength(int version, QRecLevel level)
+{
+	return (MQRspec_getDataLengthBit(version, level) + 4) / 8;
+}
+
+int MQRspec_getECCLength(int version, QRecLevel level)
+{
+	return mqrspecCapacity[version].ec[level];
+}
+
+int MQRspec_getWidth(int version)
+{
+	return mqrspecCapacity[version].width;
+}
+
+/******************************************************************************
+ * Length indicator
+ *****************************************************************************/
+
+/**
+ * See Table 3 (pp.107) of Appendix 1, JIS X0510:2004.
+ */
+static const int lengthTableBits[4][4] = {
+	{ 3, 4, 5, 6},
+	{ 0, 3, 4, 5},
+	{ 0, 0, 4, 5},
+	{ 0, 0, 3, 4}
+};
+
+int MQRspec_lengthIndicator(QRencodeMode mode, int version)
+{
+	return lengthTableBits[mode][version - 1];
+}
+
+int MQRspec_maximumWords(QRencodeMode mode, int version)
+{
+	int bits;
+	int words;
+
+	bits = lengthTableBits[mode][version - 1];
+	words = (1 << bits) - 1;
+	if(mode == QR_MODE_KANJI) {
+		words *= 2; // the number of bytes is required
+	}
+
+	return words;
+}
+
+/******************************************************************************
+ * Format information
+ *****************************************************************************/
+
+/* See calcFormatInfo in tests/test_mqrspec.c */
+static const unsigned int formatInfo[4][8] = {
+	{0x4445, 0x55ae, 0x6793, 0x7678, 0x06de, 0x1735, 0x2508, 0x34e3},
+	{0x4172, 0x5099, 0x62a4, 0x734f, 0x03e9, 0x1202, 0x203f, 0x31d4},
+	{0x4e2b, 0x5fc0, 0x6dfd, 0x7c16, 0x0cb0, 0x1d5b, 0x2f66, 0x3e8d},
+	{0x4b1c, 0x5af7, 0x68ca, 0x7921, 0x0987, 0x186c, 0x2a51, 0x3bba}
+};
+
+/* See Table 10 of Appendix 1. (pp.115) */
+static const int typeTable[MQRSPEC_VERSION_MAX + 1][3] = {
+	{-1, -1, -1},
+	{ 0, -1, -1},
+	{ 1,  2, -1},
+	{ 3,  4, -1},
+	{ 5,  6,  7}
+};
+
+unsigned int MQRspec_getFormatInfo(int mask, int version, QRecLevel level)
+{
+	int type;
+
+	if(mask < 0 || mask > 3) return 0;
+	if(version <= 0 || version > MQRSPEC_VERSION_MAX) return 0;
+	if(level == QR_ECLEVEL_H) return 0;
+	type = typeTable[version][level];
+	if(type < 0) return 0;
+
+	return formatInfo[mask][type];
+}
+
+/******************************************************************************
+ * Frame
+ *****************************************************************************/
+
+/**
+ * Put a finder pattern.
+ * @param frame
+ * @param width
+ * @param ox,oy upper-left coordinate of the pattern
+ */
+static void putFinderPattern(unsigned char *frame, int width, int ox, int oy)
+{
+	static const unsigned char finder[] = {
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+	};
+	int x, y;
+	const unsigned char *s;
+
+	frame += oy * width + ox;
+	s = finder;
+	for(y = 0; y < 7; y++) {
+		for(x = 0; x < 7; x++) {
+			frame[x] = s[x];
+		}
+		frame += width;
+		s += 7;
+	}
+}
+
+static unsigned char *MQRspec_createFrame(int version)
+{
+	unsigned char *frame, *p, *q;
+	int width;
+	int x, y;
+
+	width = mqrspecCapacity[version].width;
+	frame = (unsigned char *)malloc(width * width);
+	if(frame == NULL) return NULL;
+
+	memset(frame, 0, width * width);
+	/* Finder pattern */
+	putFinderPattern(frame, width, 0, 0);
+	/* Separator */
+	p = frame;
+	for(y = 0; y < 7; y++) {
+		p[7] = 0xc0;
+		p += width;
+	}
+	memset(frame + width * 7, 0xc0, 8);
+	/* Mask format information area */
+	memset(frame + width * 8 + 1, 0x84, 8);
+	p = frame + width + 8;
+	for(y = 0; y < 7; y++) {
+		*p = 0x84;
+		p += width;
+	}
+	/* Timing pattern */
+	p = frame + 8;
+	q = frame + width * 8;
+	for(x = 1; x < width-7; x++) {
+		*p =  0x90 | (x & 1);
+		*q =  0x90 | (x & 1);
+		p++;
+		q += width;
+	}
+
+	return frame;
+}
+
+unsigned char *MQRspec_newFrame(int version)
+{
+	if(version < 1 || version > MQRSPEC_VERSION_MAX) return NULL;
+
+	return MQRspec_createFrame(version);
+}
diff --git a/apps/eink-advanced/qrcode.c b/apps/eink-advanced/qrcode.c
new file mode 100644
index 0000000000000000000000000000000000000000..bd8d2884fa8522348486e07c3bbf1e0705465e16
--- /dev/null
+++ b/apps/eink-advanced/qrcode.c
@@ -0,0 +1,65 @@
+/*
+    //sets a block of 8x8 pixels on or off. x < 50 & y < 38
+    void setBlock(int x, int y, int on)
+    {
+        for(int i = 0; i < 8; i++)
+        {
+            if(on == 1){
+                screen[x + (50 * i) + (50 * y * 8)] = 255;
+            }else{
+                screen[x + (50 * i) + (50 * y * 8)] = 0;
+            }
+            
+        }
+    }
+
+    //inserts a grid of pixels, but much larger
+    void insertBigPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord)
+    {
+        for(int y = 0; y < height; y++)
+        {
+            for(int x = 0; x <width; x++)
+            {
+                if(grid[y][x] == 1)
+                {
+                    setBlock(x, y, 1);
+                }
+                else
+                {
+                    setBlock(x, y, 0);
+                }
+            }
+        }
+    }
+
+
+    writeStringAtLocation("<- umich.edu", 185, 60);
+
+    writeStringAtLocation("YAY IT WORKS!", 130, 200);
+
+    uint8_t qrCode[21][21] = {
+        {1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1},
+        {1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1},
+        {1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1},
+        {1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1},
+        {1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1},
+        {1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1},
+        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
+        {0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
+        {1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0},
+        {0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0},
+        {1,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0},
+        {1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,0},
+        {1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0},
+        {0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,1},
+        {1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0},
+        {1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1},
+        {1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0},
+        {1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0},
+        {1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1},
+        {1,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0},
+        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0}
+    };
+    
+    insertBigPixelGrid(21, 21, qrCode, 14, 8);
+    */
\ No newline at end of file
diff --git a/apps/eink-advanced/qrencode.c b/apps/eink-advanced/qrencode.c
new file mode 100644
index 0000000000000000000000000000000000000000..3a8be86d178f0421d3d16d3e7c380405e7907c96
--- /dev/null
+++ b/apps/eink-advanced/qrencode.c
@@ -0,0 +1,886 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "qrspec.h"
+#include "mqrspec.h"
+#include "bitstream.h"
+#include "qrinput.h"
+#include "rsecc.h"
+#include "split.h"
+#include "mask.h"
+#include "mmask.h"
+
+/******************************************************************************
+ * Raw code
+ *****************************************************************************/
+
+typedef struct {
+	int dataLength;
+	unsigned char *data;
+	int eccLength;
+	unsigned char *ecc;
+} RSblock;
+
+typedef struct {
+	int version;
+	int dataLength;
+	int eccLength;
+	unsigned char *datacode;
+	unsigned char *ecccode;
+	int b1;
+	int blocks;
+	RSblock *rsblock;
+	int count;
+} QRRawCode;
+
+static void RSblock_initBlock(RSblock *block, int dl, unsigned char *data, int el, unsigned char *ecc)
+{
+	block->dataLength = dl;
+	block->data = data;
+	block->eccLength = el;
+	block->ecc = ecc;
+
+	RSECC_encode(dl, el, data, ecc);
+}
+
+static int RSblock_init(RSblock *blocks, int spec[5], unsigned char *data, unsigned char *ecc)
+{
+	int i;
+	RSblock *block;
+	unsigned char *dp, *ep;
+	int el, dl;
+
+	dl = QRspec_rsDataCodes1(spec);
+	el = QRspec_rsEccCodes1(spec);
+
+	block = blocks;
+	dp = data;
+	ep = ecc;
+	for(i = 0; i < QRspec_rsBlockNum1(spec); i++) {
+		RSblock_initBlock(block, dl, dp, el, ep);
+		dp += dl;
+		ep += el;
+		block++;
+	}
+
+	if(QRspec_rsBlockNum2(spec) == 0) return 0;
+
+	dl = QRspec_rsDataCodes2(spec);
+	el = QRspec_rsEccCodes2(spec);
+	for(i = 0; i < QRspec_rsBlockNum2(spec); i++) {
+		RSblock_initBlock(block, dl, dp, el, ep);
+		dp += dl;
+		ep += el;
+		block++;
+	}
+
+	return 0;
+}
+
+__STATIC void QRraw_free(QRRawCode *raw);
+__STATIC QRRawCode *QRraw_new(QRinput *input)
+{
+	QRRawCode *raw;
+	int spec[5], ret;
+
+	raw = (QRRawCode *)malloc(sizeof(QRRawCode));
+	if(raw == NULL) return NULL;
+
+	raw->datacode = QRinput_getByteStream(input);
+	if(raw->datacode == NULL) {
+		free(raw);
+		return NULL;
+	}
+
+	QRspec_getEccSpec(input->version, input->level, spec);
+
+	raw->version = input->version;
+	raw->b1 = QRspec_rsBlockNum1(spec);
+	raw->dataLength = QRspec_rsDataLength(spec);
+	raw->eccLength = QRspec_rsEccLength(spec);
+	raw->ecccode = (unsigned char *)malloc(raw->eccLength);
+	if(raw->ecccode == NULL) {
+		free(raw->datacode);
+		free(raw);
+		return NULL;
+	}
+
+	raw->blocks = QRspec_rsBlockNum(spec);
+	raw->rsblock = (RSblock *)calloc(raw->blocks, sizeof(RSblock));
+	if(raw->rsblock == NULL) {
+		QRraw_free(raw);
+		return NULL;
+	}
+	ret = RSblock_init(raw->rsblock, spec, raw->datacode, raw->ecccode);
+	if(ret < 0) {
+		QRraw_free(raw);
+		return NULL;
+	}
+
+	raw->count = 0;
+
+	return raw;
+}
+
+/**
+ * Return a code (byte).
+ * This function can be called iteratively.
+ * @param raw raw code.
+ * @return code
+ */
+__STATIC unsigned char QRraw_getCode(QRRawCode *raw)
+{
+	int col, row;
+	unsigned char ret;
+
+	if(raw->count < raw->dataLength) {
+		row = raw->count % raw->blocks;
+		col = raw->count / raw->blocks;
+		if(col >= raw->rsblock[0].dataLength) {
+			row += raw->b1;
+		}
+		ret = raw->rsblock[row].data[col];
+	} else if(raw->count < raw->dataLength + raw->eccLength) {
+		row = (raw->count - raw->dataLength) % raw->blocks;
+		col = (raw->count - raw->dataLength) / raw->blocks;
+		ret = raw->rsblock[row].ecc[col];
+	} else {
+		return 0;
+	}
+	raw->count++;
+	return ret;
+}
+
+__STATIC void QRraw_free(QRRawCode *raw)
+{
+	if(raw != NULL) {
+		free(raw->datacode);
+		free(raw->ecccode);
+		free(raw->rsblock);
+		free(raw);
+	}
+}
+
+/******************************************************************************
+ * Raw code for Micro QR Code
+ *****************************************************************************/
+
+typedef struct {
+	int version;
+	int dataLength;
+	int eccLength;
+	unsigned char *datacode;
+	unsigned char *ecccode;
+	RSblock *rsblock;
+	int oddbits;
+	int count;
+} MQRRawCode;
+
+__STATIC void MQRraw_free(MQRRawCode *raw);
+__STATIC MQRRawCode *MQRraw_new(QRinput *input)
+{
+	MQRRawCode *raw;
+
+	raw = (MQRRawCode *)malloc(sizeof(MQRRawCode));
+	if(raw == NULL) return NULL;
+
+	raw->version = input->version;
+	raw->dataLength = MQRspec_getDataLength(input->version, input->level);
+	raw->eccLength = MQRspec_getECCLength(input->version, input->level);
+	raw->oddbits = raw->dataLength * 8 - MQRspec_getDataLengthBit(input->version, input->level);
+	raw->datacode = QRinput_getByteStream(input);
+	if(raw->datacode == NULL) {
+		free(raw);
+		return NULL;
+	}
+	raw->ecccode = (unsigned char *)malloc(raw->eccLength);
+	if(raw->ecccode == NULL) {
+		free(raw->datacode);
+		free(raw);
+		return NULL;
+	}
+
+	raw->rsblock = (RSblock *)calloc(1, sizeof(RSblock));
+	if(raw->rsblock == NULL) {
+		MQRraw_free(raw);
+		return NULL;
+	}
+
+	RSblock_initBlock(raw->rsblock, raw->dataLength, raw->datacode, raw->eccLength, raw->ecccode);
+
+	raw->count = 0;
+
+	return raw;
+}
+
+/**
+ * Return a code (byte).
+ * This function can be called iteratively.
+ * @param raw raw code.
+ * @return code
+ */
+__STATIC unsigned char MQRraw_getCode(MQRRawCode *raw)
+{
+	unsigned char ret;
+
+	if(raw->count < raw->dataLength) {
+		ret = raw->datacode[raw->count];
+	} else if(raw->count < raw->dataLength + raw->eccLength) {
+		ret = raw->ecccode[raw->count - raw->dataLength];
+	} else {
+		return 0;
+	}
+	raw->count++;
+	return ret;
+}
+
+__STATIC void MQRraw_free(MQRRawCode *raw)
+{
+	if(raw != NULL) {
+		free(raw->datacode);
+		free(raw->ecccode);
+		free(raw->rsblock);
+		free(raw);
+	}
+}
+
+
+/******************************************************************************
+ * Frame filling
+ *****************************************************************************/
+
+typedef struct {
+	int width;
+	unsigned char *frame;
+	int x, y;
+	int dir;
+	int bit;
+	int mqr;
+} FrameFiller;
+
+static void FrameFiller_set(FrameFiller *filler, int width, unsigned char *frame, int mqr)
+{
+	filler->width = width;
+	filler->frame = frame;
+	filler->x = width - 1;
+	filler->y = width - 1;
+	filler->dir = -1;
+	filler->bit = -1;
+	filler->mqr = mqr;
+}
+
+static unsigned char *FrameFiller_next(FrameFiller *filler)
+{
+	unsigned char *p;
+	int x, y, w;
+
+	if(filler->bit == -1) {
+		filler->bit = 0;
+		return filler->frame + filler->y * filler->width + filler->x;
+	}
+
+	x = filler->x;
+	y = filler->y;
+	p = filler->frame;
+	w = filler->width;
+
+	if(filler->bit == 0) {
+		x--;
+		filler->bit++;
+	} else {
+		x++;
+		y += filler->dir;
+		filler->bit--;
+	}
+
+	if(filler->dir < 0) {
+		if(y < 0) {
+			y = 0;
+			x -= 2;
+			filler->dir = 1;
+			if(!filler->mqr && x == 6) {
+				x--;
+				y = 9;
+			}
+		}
+	} else {
+		if(y == w) {
+			y = w - 1;
+			x -= 2;
+			filler->dir = -1;
+			if(!filler->mqr && x == 6) {
+				x--;
+				y -= 8;
+			}
+		}
+	}
+	if(x < 0 || y < 0) return NULL;
+
+	filler->x = x;
+	filler->y = y;
+
+	if(p[y * w + x] & 0x80) {
+		// This tail recursion could be optimized.
+		return FrameFiller_next(filler);
+	}
+	return &p[y * w + x];
+}
+
+#ifdef WITH_TESTS
+extern unsigned char *FrameFiller_test(int version)
+{
+	int width;
+	unsigned char *frame, *p;
+	int i, length;
+	FrameFiller filler;
+
+	width = QRspec_getWidth(version);
+	frame = QRspec_newFrame(version);
+	if(frame == NULL) return NULL;
+	FrameFiller_set(&filler, width, frame, 0);
+	length = QRspec_getDataLength(version, QR_ECLEVEL_L) * 8
+	       + QRspec_getECCLength(version, QR_ECLEVEL_L) * 8
+		   + QRspec_getRemainder(version);
+	for(i = 0; i < length; i++) {
+		p = FrameFiller_next(&filler);
+		if(p == NULL) {
+			free(frame);
+			return NULL;
+		}
+		*p = (unsigned char)(i & 0x7f) | 0x80;
+	}
+	return frame;
+}
+
+extern unsigned char *FrameFiller_testMQR(int version)
+{
+	int width;
+	unsigned char *frame, *p;
+	int i, length;
+	FrameFiller filler;
+
+	width = MQRspec_getWidth(version);
+	frame = MQRspec_newFrame(version);
+	if(frame == NULL) return NULL;
+	FrameFiller_set(&filler, width, frame, 1);
+	length = MQRspec_getDataLengthBit(version, QR_ECLEVEL_L)
+	       + MQRspec_getECCLength(version, QR_ECLEVEL_L) * 8;
+	for(i = 0; i < length; i++) {
+		p = FrameFiller_next(&filler);
+		if(p == NULL) {
+			fprintf(stderr, "Frame filler run over the frame!\n");
+			return frame;
+		}
+		*p = (unsigned char)(i & 0x7f) | 0x80;
+	}
+	return frame;
+}
+#endif
+
+
+/******************************************************************************
+ * QR-code encoding
+ *****************************************************************************/
+
+__STATIC QRcode *QRcode_new(int version, int width, unsigned char *data)
+{
+	QRcode *qrcode;
+
+	qrcode = (QRcode *)malloc(sizeof(QRcode));
+	if(qrcode == NULL) return NULL;
+
+	qrcode->version = version;
+	qrcode->width = width;
+	qrcode->data = data;
+
+	return qrcode;
+}
+
+void QRcode_free(QRcode *qrcode)
+{
+	if(qrcode != NULL) {
+		free(qrcode->data);
+		free(qrcode);
+	}
+}
+
+__STATIC QRcode *QRcode_encodeMask(QRinput *input, int mask)
+{
+	int width, version;
+	QRRawCode *raw;
+	unsigned char *frame, *masked, *p, code, bit;
+	int i, j;
+	QRcode *qrcode = NULL;
+	FrameFiller filler;
+
+	if(input->mqr) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->version < 0 || input->version > QRSPEC_VERSION_MAX) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->level > QR_ECLEVEL_H) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	raw = QRraw_new(input);
+	if(raw == NULL) return NULL;
+
+	version = raw->version;
+	width = QRspec_getWidth(version);
+	frame = QRspec_newFrame(version);
+	if(frame == NULL) {
+		QRraw_free(raw);
+		return NULL;
+	}
+	FrameFiller_set(&filler, width, frame, 0);
+
+	/* inteleaved data and ecc codes */
+	for(i = 0; i < raw->dataLength + raw->eccLength; i++) {
+		code = QRraw_getCode(raw);
+		bit = 0x80;
+		for(j = 0; j < 8; j++) {
+			p = FrameFiller_next(&filler);
+			if(p == NULL)  goto EXIT;
+			*p = 0x02 | ((bit & code) != 0);
+			bit = bit >> 1;
+		}
+	}
+	QRraw_free(raw);
+	raw = NULL;
+	/* remainder bits */
+	j = QRspec_getRemainder(version);
+	for(i = 0; i < j; i++) {
+		p = FrameFiller_next(&filler);
+		if(p == NULL)  goto EXIT;
+		*p = 0x02;
+	}
+
+	/* masking */
+	if(mask == -2) { // just for debug purpose
+		masked = (unsigned char *)malloc(width * width);
+		memcpy(masked, frame, width * width);
+	} else if(mask < 0) {
+		masked = Mask_mask(width, frame, input->level);
+	} else {
+		masked = Mask_makeMask(width, frame, mask, input->level);
+	}
+	if(masked == NULL) {
+		goto EXIT;
+	}
+	qrcode = QRcode_new(version, width, masked);
+	if(qrcode == NULL) {
+		free(masked);
+	}
+
+EXIT:
+	QRraw_free(raw);
+	free(frame);
+	return qrcode;
+}
+
+__STATIC QRcode *QRcode_encodeMaskMQR(QRinput *input, int mask)
+{
+	int width, version;
+	MQRRawCode *raw;
+	unsigned char *frame, *masked, *p, code, bit;
+	int i, j, length;
+	QRcode *qrcode = NULL;
+	FrameFiller filler;
+
+	if(!input->mqr) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->version <= 0 || input->version > MQRSPEC_VERSION_MAX) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(input->level > QR_ECLEVEL_Q) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	raw = MQRraw_new(input);
+	if(raw == NULL) return NULL;
+
+	version = raw->version;
+	width = MQRspec_getWidth(version);
+	frame = MQRspec_newFrame(version);
+	if(frame == NULL) {
+		MQRraw_free(raw);
+		return NULL;
+	}
+	FrameFiller_set(&filler, width, frame, 1);
+
+	/* inteleaved data and ecc codes */
+	for(i = 0; i < raw->dataLength + raw->eccLength; i++) {
+		code = MQRraw_getCode(raw);
+		bit = 0x80;
+		if(raw->oddbits && i == raw->dataLength - 1) {
+			length = raw->oddbits;
+		} else {
+			length = 8;
+		}
+		for(j = 0; j < length; j++) {
+			p = FrameFiller_next(&filler);
+			if(p == NULL) goto EXIT;
+			*p = 0x02 | ((bit & code) != 0);
+			bit = bit >> 1;
+		}
+	}
+	MQRraw_free(raw);
+	raw = NULL;
+
+	/* masking */
+	if(mask == -2) { // just for debug purpose
+		masked = (unsigned char *)malloc(width * width);
+		memcpy(masked, frame, width * width);
+	} else if(mask < 0) {
+		masked = MMask_mask(version, frame, input->level);
+	} else {
+		masked = MMask_makeMask(version, frame, mask, input->level);
+	}
+	if(masked == NULL) {
+		goto EXIT;
+	}
+
+	qrcode = QRcode_new(version, width, masked);
+	if(qrcode == NULL) {
+		free(masked);
+	}
+
+EXIT:
+	MQRraw_free(raw);
+	free(frame);
+	return qrcode;
+}
+
+QRcode *QRcode_encodeInput(QRinput *input)
+{
+	if(input->mqr) {
+		return QRcode_encodeMaskMQR(input, -1);
+	} else {
+		return QRcode_encodeMask(input, -1);
+	}
+}
+
+static QRcode *QRcode_encodeStringReal(const char *string, int version, QRecLevel level, int mqr, QRencodeMode hint, int casesensitive)
+{
+	QRinput *input;
+	QRcode *code;
+	int ret;
+
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(hint != QR_MODE_8 && hint != QR_MODE_KANJI) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	if(mqr) {
+		input = QRinput_newMQR(version, level);
+	} else {
+		input = QRinput_new2(version, level);
+	}
+	if(input == NULL) return NULL;
+
+	ret = Split_splitStringToQRinput(string, input, hint, casesensitive);
+	if(ret < 0) {
+		QRinput_free(input);
+		return NULL;
+	}
+	code = QRcode_encodeInput(input);
+	QRinput_free(input);
+
+	return code;
+}
+
+QRcode *QRcode_encodeString(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)
+{
+	return QRcode_encodeStringReal(string, version, level, 0, hint, casesensitive);
+}
+
+QRcode *QRcode_encodeStringMQR(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)
+{
+	return QRcode_encodeStringReal(string, version, level, 1, hint, casesensitive);
+}
+
+static QRcode *QRcode_encodeDataReal(const unsigned char *data, int length, int version, QRecLevel level, int mqr)
+{
+	QRinput *input;
+	QRcode *code;
+	int ret;
+
+	if(data == NULL || length == 0) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	if(mqr) {
+		input = QRinput_newMQR(version, level);
+	} else {
+		input = QRinput_new2(version, level);
+	}
+	if(input == NULL) return NULL;
+
+	ret = QRinput_append(input, QR_MODE_8, length, data);
+	if(ret < 0) {
+		QRinput_free(input);
+		return NULL;
+	}
+	code = QRcode_encodeInput(input);
+	QRinput_free(input);
+
+	return code;
+}
+
+QRcode *QRcode_encodeData(int size, const unsigned char *data, int version, QRecLevel level)
+{
+	return QRcode_encodeDataReal(data, size, version, level, 0);
+}
+
+QRcode *QRcode_encodeString8bit(const char *string, int version, QRecLevel level)
+{
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataReal((unsigned char *)string, strlen(string), version, level, 0);
+}
+
+QRcode *QRcode_encodeDataMQR(int size, const unsigned char *data, int version, QRecLevel level)
+{
+	return QRcode_encodeDataReal(data, size, version, level, 1);
+}
+
+QRcode *QRcode_encodeString8bitMQR(const char *string, int version, QRecLevel level)
+{
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataReal((unsigned char *)string, strlen(string), version, level, 1);
+}
+
+
+/******************************************************************************
+ * Structured QR-code encoding
+ *****************************************************************************/
+
+static QRcode_List *QRcode_List_newEntry(void)
+{
+	QRcode_List *entry;
+
+	entry = (QRcode_List *)malloc(sizeof(QRcode_List));
+	if(entry == NULL) return NULL;
+
+	entry->next = NULL;
+	entry->code = NULL;
+
+	return entry;
+}
+
+static void QRcode_List_freeEntry(QRcode_List *entry)
+{
+	if(entry != NULL) {
+		QRcode_free(entry->code);
+		free(entry);
+	}
+}
+
+void QRcode_List_free(QRcode_List *qrlist)
+{
+	QRcode_List *list = qrlist, *next;
+
+	while(list != NULL) {
+		next = list->next;
+		QRcode_List_freeEntry(list);
+		list = next;
+	}
+}
+
+int QRcode_List_size(QRcode_List *qrlist)
+{
+	QRcode_List *list = qrlist;
+	int size = 0;
+
+	while(list != NULL) {
+		size++;
+		list = list->next;
+	}
+
+	return size;
+}
+
+#if 0
+static unsigned char QRcode_parity(const char *str, int size)
+{
+	unsigned char parity = 0;
+	int i;
+
+	for(i = 0; i < size; i++) {
+		parity ^= str[i];
+	}
+
+	return parity;
+}
+#endif
+
+QRcode_List *QRcode_encodeInputStructured(QRinput_Struct *s)
+{
+	QRcode_List *head = NULL;
+	QRcode_List *tail = NULL;
+	QRcode_List *entry;
+	QRinput_InputList *list = s->head;
+
+	while(list != NULL) {
+		if(head == NULL) {
+			entry = QRcode_List_newEntry();
+			if(entry == NULL) goto ABORT;
+			head = entry;
+			tail = head;
+		} else {
+			entry = QRcode_List_newEntry();
+			if(entry == NULL) goto ABORT;
+			tail->next = entry;
+			tail = tail->next;
+		}
+		tail->code = QRcode_encodeInput(list->input);
+		if(tail->code == NULL) {
+			goto ABORT;
+		}
+		list = list->next;
+	}
+
+	return head;
+ABORT:
+	QRcode_List_free(head);
+	return NULL;
+}
+
+static QRcode_List *QRcode_encodeInputToStructured(QRinput *input)
+{
+	QRinput_Struct *s;
+	QRcode_List *codes;
+
+	s = QRinput_splitQRinputToStruct(input);
+	if(s == NULL) return NULL;
+
+	codes = QRcode_encodeInputStructured(s);
+	QRinput_Struct_free(s);
+
+	return codes;
+}
+
+static QRcode_List *QRcode_encodeDataStructuredReal(
+	int size, const unsigned char *data,
+	int version, QRecLevel level,
+	int eightbit, QRencodeMode hint, int casesensitive)
+{
+	QRinput *input;
+	QRcode_List *codes;
+	int ret;
+
+	if(version <= 0) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if(!eightbit && (hint != QR_MODE_8 && hint != QR_MODE_KANJI)) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	input = QRinput_new2(version, level);
+	if(input == NULL) return NULL;
+
+	if(eightbit) {
+		ret = QRinput_append(input, QR_MODE_8, size, data);
+	} else {
+		ret = Split_splitStringToQRinput((char *)data, input, hint, casesensitive);
+	}
+	if(ret < 0) {
+		QRinput_free(input);
+		return NULL;
+	}
+	codes = QRcode_encodeInputToStructured(input);
+	QRinput_free(input);
+
+	return codes;
+}
+
+QRcode_List *QRcode_encodeDataStructured(int size, const unsigned char *data, int version, QRecLevel level) {
+	return QRcode_encodeDataStructuredReal(size, data, version, level, 1, QR_MODE_NUL, 0);
+}
+
+QRcode_List *QRcode_encodeString8bitStructured(const char *string, int version, QRecLevel level) {
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataStructured(strlen(string), (unsigned char *)string, version, level);
+}
+
+QRcode_List *QRcode_encodeStringStructured(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)
+{
+	if(string == NULL) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return QRcode_encodeDataStructuredReal(strlen(string), (unsigned char *)string, version, level, 0, hint, casesensitive);
+}
+
+/******************************************************************************
+ * System utilities
+ *****************************************************************************/
+
+/*
+void QRcode_APIVersion(int *major_version, int *minor_version, int *micro_version)
+{
+	if(major_version != NULL) {
+		*major_version = MAJOR_VERSION;
+	}
+	if(minor_version != NULL) {
+		*minor_version = MINOR_VERSION;
+	}
+	if(micro_version != NULL) {
+		*micro_version = MICRO_VERSION;
+	}
+}
+
+char *QRcode_APIVersionString(void)
+{
+	return VERSION;
+}
+*/
\ No newline at end of file
diff --git a/apps/eink-advanced/qrencode.h b/apps/eink-advanced/qrencode.h
new file mode 100644
index 0000000000000000000000000000000000000000..b121b3ba9fd6e0e0cb33275515a9f4d9de989e40
--- /dev/null
+++ b/apps/eink-advanced/qrencode.h
@@ -0,0 +1,559 @@
+/**
+ * qrencode - QR Code encoder
+ *
+ * Copyright (C) 2006-2012 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+/** \mainpage
+ * Libqrencode is a library for encoding data in a QR Code symbol, a kind of 2D
+ * symbology.
+ *
+ * \section encoding Encoding
+ *
+ * There are two methods to encode data: <b>encoding a string/data</b> or
+ * <b>encoding a structured data</b>.
+ *
+ * \subsection encoding-string Encoding a string/data
+ * You can encode a string by calling QRcode_encodeString().
+ * The given string is parsed automatically and encoded. If you want to encode
+ * data that can be represented as a C string style (NUL terminated), you can
+ * simply use this way.
+ *
+ * If the input data contains Kanji (Shift-JIS) characters and you want to
+ * encode them as Kanji in QR Code, you should give QR_MODE_KANJI as a hint.
+ * Otherwise, all of non-alphanumeric characters are encoded as 8 bit data.
+ * If you want to encode a whole string in 8 bit mode, you can use
+ * QRcode_encodeString8bit() instead.
+ *
+ * Please note that a C string can not contain NUL characters. If your data
+ * contains NUL, you must use QRcode_encodeData().
+ *
+ * \subsection encoding-input Encoding a structured data
+ * You can construct a structured input data manually. If the structure of the
+ * input data is known, you can use this way.
+ * At first, create a ::QRinput object by QRinput_new(). Then add input data
+ * to the QRinput object by QRinput_append(). Finally call QRcode_encodeInput()
+ * to encode the QRinput data.
+ * You can reuse the QRinput data again to encode it in other symbols with
+ * different parameters.
+ *
+ * \section result Result
+ * The encoded symbol is resulted as a ::QRcode object. It will contain
+ * its version number, width of the symbol and an array represents the symbol.
+ * See ::QRcode for the details. You can free the object by QRcode_free().
+ *
+ * Please note that the version of the result may be larger than specified.
+ * In such cases, the input data would be too large to be encoded in a
+ * symbol of the specified version.
+ *
+ * \section structured Structured append
+ * Libqrencode can generate "Structured-appended" symbols that enables to split
+ * a large data set into mulitple QR codes. A QR code reader concatenates
+ * multiple QR code symbols into a string.
+ * Just like QRcode_encodeString(), you can use QRcode_encodeStringStructured()
+ * to generate structured-appended symbols. This functions returns an instance
+ * of ::QRcode_List. The returned list is a singly-linked list of QRcode: you
+ * can retrieve each QR code in this way:
+ *
+ * \code
+ * QRcode_List *qrcodes;
+ * QRcode_List *entry;
+ * QRcode *qrcode;
+ *
+ * qrcodes = QRcode_encodeStringStructured(...);
+ * entry = qrcodes;
+ * while(entry != NULL) {
+ *     qrcode = entry->code;
+ *     // do something
+ *     entry = entry->next;
+ * }
+ * QRcode_List_free(entry);
+ * \endcode
+ *
+ * Instead of using auto-parsing functions, you can construct your own
+ * structured input. At first, instantiate an object of ::QRinput_Struct
+ * by calling QRinput_Struct_new(). This object can hold multiple ::QRinput,
+ * and one QR code is generated for a ::QRinput.
+ * QRinput_Struct_appendInput() appends a ::QRinput to a ::QRinput_Struct
+ * object. In order to generate structured-appended symbols, it is required to
+ * embed headers to each symbol. You can use
+ * QRinput_Struct_insertStructuredAppendHeaders() to insert appropriate
+ * headers to each symbol. You should call this function just once before
+ * encoding symbols.
+ */
+
+#ifndef __QRENCODE_H__
+#define __QRENCODE_H__
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+/**
+ * Encoding mode.
+ */
+typedef enum {
+	QR_MODE_NUL = -1,  ///< Terminator (NUL character). Internal use only
+	QR_MODE_NUM = 0,   ///< Numeric mode
+	QR_MODE_AN,        ///< Alphabet-numeric mode
+	QR_MODE_8,         ///< 8-bit data mode
+	QR_MODE_KANJI,     ///< Kanji (shift-jis) mode
+	QR_MODE_STRUCTURE, ///< Internal use only
+	QR_MODE_ECI,       ///< ECI mode
+	QR_MODE_FNC1FIRST,  ///< FNC1, first position
+	QR_MODE_FNC1SECOND, ///< FNC1, second position
+} QRencodeMode;
+
+/**
+ * Level of error correction.
+ */
+typedef enum {
+	QR_ECLEVEL_L = 0, ///< lowest
+	QR_ECLEVEL_M,
+	QR_ECLEVEL_Q,
+	QR_ECLEVEL_H      ///< highest
+} QRecLevel;
+
+/**
+ * Maximum version (size) of QR-code symbol.
+ */
+#define QRSPEC_VERSION_MAX 40
+
+/**
+ * Maximum version (size) of QR-code symbol.
+ */
+#define MQRSPEC_VERSION_MAX 4
+
+
+/******************************************************************************
+ * Input data (qrinput.c)
+ *****************************************************************************/
+
+/**
+ * Singly linked list to contain input strings. An instance of this class
+ * contains its version and error correction level too. It is required to
+ * set them by QRinput_setVersion() and QRinput_setErrorCorrectionLevel(),
+ * or use QRinput_new2() to instantiate an object.
+ */
+typedef struct _QRinput QRinput;
+
+/**
+ * Instantiate an input data object. The version is set to 0 (auto-select)
+ * and the error correction level is set to QR_ECLEVEL_L.
+ * @return an input object (initialized). On error, NULL is returned and errno
+ *         is set to indicate the error.
+ * @throw ENOMEM unable to allocate memory.
+ */
+extern QRinput *QRinput_new(void);
+
+/**
+ * Instantiate an input data object.
+ * @param version version number.
+ * @param level Error correction level.
+ * @return an input object (initialized). On error, NULL is returned and errno
+ *         is set to indicate the error.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ * @throw EINVAL invalid arguments.
+ */
+extern QRinput *QRinput_new2(int version, QRecLevel level);
+
+/**
+ * Instantiate an input data object. Object's Micro QR Code flag is set.
+ * Unlike with full-sized QR Code, version number must be specified (>0).
+ * @param version version number (1--4).
+ * @param level Error correction level.
+ * @return an input object (initialized). On error, NULL is returned and errno
+ *         is set to indicate the error.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ * @throw EINVAL invalid arguments.
+ */
+extern QRinput *QRinput_newMQR(int version, QRecLevel level);
+
+/**
+ * Append data to an input object.
+ * The data is copied and appended to the input object.
+ * @param input input object.
+ * @param mode encoding mode.
+ * @param size size of data (byte).
+ * @param data a pointer to the memory area of the input data.
+ * @retval 0 success.
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL input data is invalid.
+ *
+ */
+extern int QRinput_append(QRinput *input, QRencodeMode mode, int size, const unsigned char *data);
+
+/**
+ * Append ECI header.
+ * @param input input object.
+ * @param ecinum ECI indicator number (0 - 999999)
+ * @retval 0 success.
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL input data is invalid.
+ *
+ */
+extern int QRinput_appendECIheader(QRinput *input, unsigned int ecinum);
+
+/**
+ * Get current version.
+ * @param input input object.
+ * @return current version.
+ */
+extern int QRinput_getVersion(QRinput *input);
+
+/**
+ * Set version of the QR code that is to be encoded.
+ * This function cannot be applied to Micro QR Code.
+ * @param input input object.
+ * @param version version number (0 = auto)
+ * @retval 0 success.
+ * @retval -1 invalid argument.
+ */
+extern int QRinput_setVersion(QRinput *input, int version);
+
+/**
+ * Get current error correction level.
+ * @param input input object.
+ * @return Current error correcntion level.
+ */
+extern QRecLevel QRinput_getErrorCorrectionLevel(QRinput *input);
+
+/**
+ * Set error correction level of the QR code that is to be encoded.
+ * This function cannot be applied to Micro QR Code.
+ * @param input input object.
+ * @param level Error correction level.
+ * @retval 0 success.
+ * @retval -1 invalid argument.
+ */
+extern int QRinput_setErrorCorrectionLevel(QRinput *input, QRecLevel level);
+
+/**
+ * Set version and error correction level of the QR code at once.
+ * This function is recommened for Micro QR Code.
+ * @param input input object.
+ * @param version version number (0 = auto)
+ * @param level Error correction level.
+ * @retval 0 success.
+ * @retval -1 invalid argument.
+ */
+extern int QRinput_setVersionAndErrorCorrectionLevel(QRinput *input, int version, QRecLevel level);
+
+/**
+ * Free the input object.
+ * All of data chunks in the input object are freed too.
+ * @param input input object.
+ */
+extern void QRinput_free(QRinput *input);
+
+/**
+ * Validate the input data.
+ * @param mode encoding mode.
+ * @param size size of data (byte).
+ * @param data a pointer to the memory area of the input data.
+ * @retval 0 success.
+ * @retval -1 invalid arguments.
+ */
+extern int QRinput_check(QRencodeMode mode, int size, const unsigned char *data);
+
+/**
+ * Set of QRinput for structured symbols.
+ */
+typedef struct _QRinput_Struct QRinput_Struct;
+
+/**
+ * Instantiate a set of input data object.
+ * @return an instance of QRinput_Struct. On error, NULL is returned and errno
+ *         is set to indicate the error.
+ * @throw ENOMEM unable to allocate memory.
+ */
+extern QRinput_Struct *QRinput_Struct_new(void);
+
+/**
+ * Set parity of structured symbols.
+ * @param s structured input object.
+ * @param parity parity of s.
+ */
+extern void QRinput_Struct_setParity(QRinput_Struct *s, unsigned char parity);
+
+/**
+ * Append a QRinput object to the set. QRinput created by QRinput_newMQR()
+ * will be rejected.
+ * @warning never append the same QRinput object twice or more.
+ * @param s structured input object.
+ * @param input an input object.
+ * @retval >0 number of input objects in the structure.
+ * @retval -1 an error occurred. See Exceptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL invalid arguments.
+ */
+extern int QRinput_Struct_appendInput(QRinput_Struct *s, QRinput *input);
+
+/**
+ * Free all of QRinput in the set.
+ * @param s a structured input object.
+ */
+extern void QRinput_Struct_free(QRinput_Struct *s);
+
+/**
+ * Split a QRinput to QRinput_Struct. It calculates a parity, set it, then
+ * insert structured-append headers. QRinput created by QRinput_newMQR() will
+ * be rejected.
+ * @param input input object. Version number and error correction level must be
+ *        set.
+ * @return a set of input data. On error, NULL is returned, and errno is set
+ *         to indicate the error. See Exceptions for the details.
+ * @throw ERANGE input data is too large.
+ * @throw EINVAL invalid input data.
+ * @throw ENOMEM unable to allocate memory.
+ */
+extern QRinput_Struct *QRinput_splitQRinputToStruct(QRinput *input);
+
+/**
+ * Insert structured-append headers to the input structure. It calculates
+ * a parity and set it if the parity is not set yet.
+ * @param s input structure
+ * @retval 0 success.
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw EINVAL invalid input object.
+ * @throw ENOMEM unable to allocate memory.
+ */
+extern int QRinput_Struct_insertStructuredAppendHeaders(QRinput_Struct *s);
+
+/**
+ * Set FNC1-1st position flag.
+ */
+extern int QRinput_setFNC1First(QRinput *input);
+
+/**
+ * Set FNC1-2nd position flag and application identifier.
+ */
+extern int QRinput_setFNC1Second(QRinput *input, unsigned char appid);
+
+/******************************************************************************
+ * QRcode output (qrencode.c)
+ *****************************************************************************/
+
+/**
+ * QRcode class.
+ * Symbol data is represented as an array contains width*width uchars.
+ * Each uchar represents a module (dot). If the less significant bit of
+ * the uchar is 1, the corresponding module is black. The other bits are
+ * meaningless for usual applications, but here its specification is described.
+ *
+ * @verbatim
+   MSB 76543210 LSB
+       |||||||`- 1=black/0=white
+       ||||||`-- data and ecc code area
+       |||||`--- format information
+       ||||`---- version information
+       |||`----- timing pattern
+       ||`------ alignment pattern
+       |`------- finder pattern and separator
+       `-------- non-data modules (format, timing, etc.)
+   @endverbatim
+ */
+typedef struct {
+	int version;         ///< version of the symbol
+	int width;           ///< width of the symbol
+	unsigned char *data; ///< symbol data
+} QRcode;
+
+/**
+ * Singly-linked list of QRcode. Used to represent a structured symbols.
+ * A list is terminated with NULL.
+ */
+typedef struct _QRcode_List {
+	QRcode *code;
+	struct _QRcode_List *next;
+} QRcode_List;
+
+/**
+ * Create a symbol from the input data.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ * @param input input data.
+ * @return an instance of QRcode class. The version of the result QRcode may
+ *         be larger than the designated version. On error, NULL is returned,
+ *         and errno is set to indicate the error. See Exceptions for the
+ *         details.
+ * @throw EINVAL invalid input object.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ */
+extern QRcode *QRcode_encodeInput(QRinput *input);
+
+/**
+ * Create a symbol from the string. The library automatically parses the input
+ * string and encodes in a QR Code symbol.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ * @param string input string. It must be NUL terminated.
+ * @param version version of the symbol. If 0, the library chooses the minimum
+ *                version for the given input data.
+ * @param level error correction level.
+ * @param hint tell the library how Japanese Kanji characters should be
+ *             encoded. If QR_MODE_KANJI is given, the library assumes that the
+ *             given string contains Shift-JIS characters and encodes them in
+ *             Kanji-mode. If QR_MODE_8 is given, all of non-alphanumerical
+ *             characters will be encoded as is. If you want to embed UTF-8
+ *             string, choose this. Other mode will cause EINVAL error.
+ * @param casesensitive case-sensitive(1) or not(0).
+ * @return an instance of QRcode class. The version of the result QRcode may
+ *         be larger than the designated version. On error, NULL is returned,
+ *         and errno is set to indicate the error. See Exceptions for the
+ *         details.
+ * @throw EINVAL invalid input object.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ * @throw ERANGE input data is too large.
+ */
+extern QRcode *QRcode_encodeString(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive);
+
+/**
+ * Same to QRcode_encodeString(), but encode whole data in 8-bit mode.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ */
+extern QRcode *QRcode_encodeString8bit(const char *string, int version, QRecLevel level);
+
+/**
+ * Micro QR Code version of QRcode_encodeString().
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ */
+extern QRcode *QRcode_encodeStringMQR(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive);
+
+/**
+ * Micro QR Code version of QRcode_encodeString8bit().
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ */
+extern QRcode *QRcode_encodeString8bitMQR(const char *string, int version, QRecLevel level);
+
+/**
+ * Encode byte stream (may include '\0') in 8-bit mode.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ * @param size size of the input data.
+ * @param data input data.
+ * @param version version of the symbol. If 0, the library chooses the minimum
+ *                version for the given input data.
+ * @param level error correction level.
+ * @throw EINVAL invalid input object.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ * @throw ERANGE input data is too large.
+ */
+extern QRcode *QRcode_encodeData(int size, const unsigned char *data, int version, QRecLevel level);
+
+/**
+ * Micro QR Code version of QRcode_encodeData().
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ */
+extern QRcode *QRcode_encodeDataMQR(int size, const unsigned char *data, int version, QRecLevel level);
+
+/**
+ * Free the instance of QRcode class.
+ * @param qrcode an instance of QRcode class.
+ */
+extern void QRcode_free(QRcode *qrcode);
+
+/**
+ * Create structured symbols from the input data.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ * @param s input data, structured.
+ * @return a singly-linked list of QRcode.
+ */
+extern QRcode_List *QRcode_encodeInputStructured(QRinput_Struct *s);
+
+/**
+ * Create structured symbols from the string. The library automatically parses
+ * the input string and encodes in a QR Code symbol.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ * @param string input string. It must be NUL terminated.
+ * @param version version of the symbol.
+ * @param level error correction level.
+ * @param hint tell the library how Japanese Kanji characters should be
+ *             encoded. If QR_MODE_KANJI is given, the library assumes that the
+ *             given string contains Shift-JIS characters and encodes them in
+ *             Kanji-mode. If QR_MODE_8 is given, all of non-alphanumerical
+ *             characters will be encoded as is. If you want to embed UTF-8
+ *             string, choose this. Other mode will cause EINVAL error.
+ * @param casesensitive case-sensitive(1) or not(0).
+ * @return a singly-linked list of QRcode. On error, NULL is returned, and
+ *         errno is set to indicate the error. See Exceptions for the details.
+ * @throw EINVAL invalid input object.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ */
+extern QRcode_List *QRcode_encodeStringStructured(const char *string, int version, QRecLevel level, QRencodeMode hint, int casesensitive);
+
+/**
+ * Same to QRcode_encodeStringStructured(), but encode whole data in 8-bit mode.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ */
+extern QRcode_List *QRcode_encodeString8bitStructured(const char *string, int version, QRecLevel level);
+
+/**
+ * Create structured symbols from byte stream (may include '\0'). Wholde data
+ * are encoded in 8-bit mode.
+ * @warning This function is THREAD UNSAFE when pthread is disabled.
+ * @param size size of the input data.
+ * @param data input dat.
+ * @param version version of the symbol.
+ * @param level error correction level.
+ * @return a singly-linked list of QRcode. On error, NULL is returned, and
+ *         errno is set to indicate the error. See Exceptions for the details.
+ * @throw EINVAL invalid input object.
+ * @throw ENOMEM unable to allocate memory for input objects.
+ */
+extern QRcode_List *QRcode_encodeDataStructured(int size, const unsigned char *data, int version, QRecLevel level);
+
+/**
+ * Return the number of symbols included in a QRcode_List.
+ * @param qrlist a head entry of a QRcode_List.
+ * @return number of symbols in the list.
+ */
+extern int QRcode_List_size(QRcode_List *qrlist);
+
+/**
+ * Free the QRcode_List.
+ * @param qrlist a head entry of a QRcode_List.
+ */
+extern void QRcode_List_free(QRcode_List *qrlist);
+
+
+/******************************************************************************
+ * System utilities
+ *****************************************************************************/
+
+/**
+ * Return a string that identifies the library version.
+ * @param major_version major version number
+ * @param minor_version minor version number
+ * @param micro_version micro version number
+ */
+extern void QRcode_APIVersion(int *major_version, int *minor_version, int *micro_version);
+
+/**
+ * Return a string that identifies the library version.
+ * @return a string identifies the library version. The string is held by the
+ * library. Do NOT free it.
+ */
+extern char *QRcode_APIVersionString(void);
+
+#if defined(__cplusplus)
+}
+#endif
+
+#endif /* __QRENCODE_H__ */
diff --git a/apps/eink-advanced/qrinput.c b/apps/eink-advanced/qrinput.c
new file mode 100644
index 0000000000000000000000000000000000000000..b2bab4a777c7968f5bb2e30e9ecba67f9e0be73f
--- /dev/null
+++ b/apps/eink-advanced/qrinput.c
@@ -0,0 +1,1628 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Input data chunk class
+ * Copyright (C) 2006-2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "qrencode.h"
+#include "qrspec.h"
+#include "mqrspec.h"
+#include "bitstream.h"
+#include "qrinput.h"
+
+/******************************************************************************
+ * Utilities
+ *****************************************************************************/
+int QRinput_isSplittableMode(QRencodeMode mode)
+{
+	return (mode >= QR_MODE_NUM && mode <= QR_MODE_KANJI);
+}
+
+/******************************************************************************
+ * Entry of input data
+ *****************************************************************************/
+
+static QRinput_List *QRinput_List_newEntry(QRencodeMode mode, int size, const unsigned char *data)
+{
+	QRinput_List *entry;
+
+	if(QRinput_check(mode, size, data)) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	entry = (QRinput_List *)malloc(sizeof(QRinput_List));
+	if(entry == NULL) return NULL;
+
+	entry->mode = mode;
+	entry->size = size;
+	entry->data = NULL;
+	if(size > 0) {
+		entry->data = (unsigned char *)malloc(size);
+		if(entry->data == NULL) {
+			free(entry);
+			return NULL;
+		}
+		memcpy(entry->data, data, size);
+	}
+	entry->bstream = NULL;
+	entry->next = NULL;
+
+	return entry;
+}
+
+static void QRinput_List_freeEntry(QRinput_List *entry)
+{
+	if(entry != NULL) {
+		free(entry->data);
+		BitStream_free(entry->bstream);
+		free(entry);
+	}
+}
+
+static QRinput_List *QRinput_List_dup(QRinput_List *entry)
+{
+	QRinput_List *n;
+
+	n = (QRinput_List *)malloc(sizeof(QRinput_List));
+	if(n == NULL) return NULL;
+
+	n->mode = entry->mode;
+	n->size = entry->size;
+	n->data = (unsigned char *)malloc(n->size);
+	if(n->data == NULL) {
+		free(n);
+		return NULL;
+	}
+	memcpy(n->data, entry->data, entry->size);
+	n->bstream = NULL;
+	n->next = NULL;
+
+	return n;
+}
+
+/******************************************************************************
+ * Input Data
+ *****************************************************************************/
+
+QRinput *QRinput_new(void)
+{
+	return QRinput_new2(0, QR_ECLEVEL_L);
+}
+
+QRinput *QRinput_new2(int version, QRecLevel level)
+{
+	QRinput *input;
+
+	if(version < 0 || version > QRSPEC_VERSION_MAX || level > QR_ECLEVEL_H) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	input = (QRinput *)malloc(sizeof(QRinput));
+	if(input == NULL) return NULL;
+
+	input->head = NULL;
+	input->tail = NULL;
+	input->version = version;
+	input->level = level;
+	input->mqr = 0;
+	input->fnc1 = 0;
+
+	return input;
+}
+
+QRinput *QRinput_newMQR(int version, QRecLevel level)
+{
+	QRinput *input;
+
+	if(version <= 0 || version > MQRSPEC_VERSION_MAX) goto INVALID;
+	if((MQRspec_getECCLength(version, level) == 0)) goto INVALID;
+
+	input = QRinput_new2(version, level);
+	if(input == NULL) return NULL;
+
+	input->mqr = 1;
+
+	return input;
+
+INVALID:
+	errno = EINVAL;
+	return NULL;
+}
+
+int QRinput_getVersion(QRinput *input)
+{
+	return input->version;
+}
+
+int QRinput_setVersion(QRinput *input, int version)
+{
+	if(input->mqr || version < 0 || version > QRSPEC_VERSION_MAX) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	input->version = version;
+
+	return 0;
+}
+
+QRecLevel QRinput_getErrorCorrectionLevel(QRinput *input)
+{
+	return input->level;
+}
+
+int QRinput_setErrorCorrectionLevel(QRinput *input, QRecLevel level)
+{
+	if(input->mqr || level > QR_ECLEVEL_H) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	input->level = level;
+
+	return 0;
+}
+
+int QRinput_setVersionAndErrorCorrectionLevel(QRinput *input, int version, QRecLevel level)
+{
+	if(input->mqr) {
+		if(version <= 0 || version > MQRSPEC_VERSION_MAX) goto INVALID;
+		if((MQRspec_getECCLength(version, level) == 0)) goto INVALID;
+	} else {
+		if(version < 0 || version > QRSPEC_VERSION_MAX) goto INVALID;
+		if(level > QR_ECLEVEL_H) goto INVALID;
+	}
+
+	input->version = version;
+	input->level = level;
+
+	return 0;
+
+INVALID:
+	errno = EINVAL;
+	return -1;
+}
+
+static void QRinput_appendEntry(QRinput *input, QRinput_List *entry)
+{
+	if(input->tail == NULL) {
+		input->head = entry;
+		input->tail = entry;
+	} else {
+		input->tail->next = entry;
+		input->tail = entry;
+	}
+	entry->next = NULL;
+}
+
+int QRinput_append(QRinput *input, QRencodeMode mode, int size, const unsigned char *data)
+{
+	QRinput_List *entry;
+
+	entry = QRinput_List_newEntry(mode, size, data);
+	if(entry == NULL) {
+		return -1;
+	}
+
+	QRinput_appendEntry(input, entry);
+
+	return 0;
+}
+
+/**
+ * Insert a structured-append header to the head of the input data.
+ * @param input input data.
+ * @param size number of structured symbols.
+ * @param number index number of the symbol. (1 <= number <= size)
+ * @param parity parity among input data. (NOTE: each symbol of a set of structured symbols has the same parity data)
+ * @retval 0 success.
+ * @retval -1 error occurred and errno is set to indeicate the error. See Execptions for the details.
+ * @throw EINVAL invalid parameter.
+ * @throw ENOMEM unable to allocate memory.
+ */
+int QRinput_insertStructuredAppendHeader(QRinput *input, int size, int number, unsigned char parity)
+{
+	QRinput_List *entry;
+	unsigned char buf[3];
+
+	if(size > MAX_STRUCTURED_SYMBOLS) {
+		errno = EINVAL;
+		return -1;
+	}
+	if(number <= 0 || number > size) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	buf[0] = (unsigned char)size;
+	buf[1] = (unsigned char)number;
+	buf[2] = parity;
+	entry = QRinput_List_newEntry(QR_MODE_STRUCTURE, 3, buf);
+	if(entry == NULL) {
+		return -1;
+	}
+
+	entry->next = input->head;
+	input->head = entry;
+
+	return 0;
+}
+
+int QRinput_appendECIheader(QRinput *input, unsigned int ecinum)
+{
+	unsigned char data[4];
+
+	if(ecinum > 999999) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	/* We manually create byte array of ecinum because
+	 (unsigned char *)&ecinum may cause bus error on some architectures, */
+	data[0] = ecinum & 0xff;
+	data[1] = (ecinum >>  8) & 0xff;
+	data[2] = (ecinum >> 16) & 0xff;
+	data[3] = (ecinum >> 24) & 0xff;
+	return QRinput_append(input, QR_MODE_ECI, 4, data);
+}
+
+void QRinput_free(QRinput *input)
+{
+	QRinput_List *list, *next;
+
+	if(input != NULL) {
+		list = input->head;
+		while(list != NULL) {
+			next = list->next;
+			QRinput_List_freeEntry(list);
+			list = next;
+		}
+		free(input);
+	}
+}
+
+static unsigned char QRinput_calcParity(QRinput *input)
+{
+	unsigned char parity = 0;
+	QRinput_List *list;
+	int i;
+
+	list = input->head;
+	while(list != NULL) {
+		if(list->mode != QR_MODE_STRUCTURE) {
+			for(i = list->size-1; i >= 0; i--) {
+				parity ^= list->data[i];
+			}
+		}
+		list = list->next;
+	}
+
+	return parity;
+}
+
+QRinput *QRinput_dup(QRinput *input)
+{
+	QRinput *n;
+	QRinput_List *list, *e;
+
+	if(input->mqr) {
+		n = QRinput_newMQR(input->version, input->level);
+	} else {
+		n = QRinput_new2(input->version, input->level);
+	}
+	if(n == NULL) return NULL;
+
+	list = input->head;
+	while(list != NULL) {
+		e = QRinput_List_dup(list);
+		if(e == NULL) {
+			QRinput_free(n);
+			return NULL;
+		}
+		QRinput_appendEntry(n, e);
+		list = list->next;
+	}
+
+	return n;
+}
+
+/******************************************************************************
+ * Numeric data
+ *****************************************************************************/
+
+/**
+ * Check the input data.
+ * @param size
+ * @param data
+ * @return result
+ */
+static int QRinput_checkModeNum(int size, const char *data)
+{
+	int i;
+
+	for(i = 0; i < size; i++) {
+		if(data[i] < '0' || data[i] > '9')
+			return -1;
+	}
+
+	return 0;
+}
+
+/**
+ * Estimate the length of the encoded bit stream of numeric data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsModeNum(int size)
+{
+	int w;
+	int bits;
+
+	w = size / 3;
+	bits = w * 10;
+	switch(size - w * 3) {
+		case 1:
+			bits += 4;
+			break;
+		case 2:
+			bits += 7;
+			break;
+		default:
+			break;
+	}
+
+	return bits;
+}
+
+/**
+ * Convert the number data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_encodeModeNum(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int words, i, ret;
+	unsigned int val;
+
+	if(mqr) {
+		if(version > 1) {
+			ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_NUM);
+			if(ret < 0) return -1;
+		}
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_NUM, version), entry->size);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_NUM);
+		if(ret < 0) return -1;
+
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_NUM, version), entry->size);
+		if(ret < 0) return -1;
+	}
+
+	words = entry->size / 3;
+	for(i = 0; i < words; i++) {
+		val  = (entry->data[i*3  ] - '0') * 100;
+		val += (entry->data[i*3+1] - '0') * 10;
+		val += (entry->data[i*3+2] - '0');
+
+		ret = BitStream_appendNum(bstream, 10, val);
+		if(ret < 0) return -1;
+	}
+
+	if(entry->size - words * 3 == 1) {
+		val = entry->data[words*3] - '0';
+		ret = BitStream_appendNum(bstream, 4, val);
+		if(ret < 0) return -1;
+	} else if(entry->size - words * 3 == 2) {
+		val  = (entry->data[words*3  ] - '0') * 10;
+		val += (entry->data[words*3+1] - '0');
+		BitStream_appendNum(bstream, 7, val);
+		if(ret < 0) return -1;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * Alphabet-numeric data
+ *****************************************************************************/
+
+const signed char QRinput_anTable[128] = {
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,
+	 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 44, -1, -1, -1, -1, -1,
+	-1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
+	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
+};
+
+/**
+ * Check the input data.
+ * @param size
+ * @param data
+ * @return result
+ */
+static int QRinput_checkModeAn(int size, const char *data)
+{
+	int i;
+
+	for(i = 0; i < size; i++) {
+		if(QRinput_lookAnTable(data[i]) < 0)
+			return -1;
+	}
+
+	return 0;
+}
+
+/**
+ * Estimate the length of the encoded bit stream of alphabet-numeric data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsModeAn(int size)
+{
+	int w;
+	int bits;
+
+	w = size / 2;
+	bits = w * 11;
+	if(size & 1) {
+		bits += 6;
+	}
+
+	return bits;
+}
+
+/**
+ * Convert the alphabet-numeric data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL invalid version.
+ */
+static int QRinput_encodeModeAn(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int words, i, ret;
+	unsigned int val;
+
+	if(mqr) {
+		if(version < 2) {
+			errno = EINVAL;
+			return -1;
+		}
+		ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_AN);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_AN, version), entry->size);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_AN);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_AN, version), entry->size);
+		if(ret < 0) return -1;
+	}
+
+	words = entry->size / 2;
+	for(i = 0; i < words; i++) {
+		val  = (unsigned int)QRinput_lookAnTable(entry->data[i*2  ]) * 45;
+		val += (unsigned int)QRinput_lookAnTable(entry->data[i*2+1]);
+
+		ret = BitStream_appendNum(bstream, 11, val);
+		if(ret < 0) return -1;
+	}
+
+	if(entry->size & 1) {
+		val = (unsigned int)QRinput_lookAnTable(entry->data[words * 2]);
+
+		ret = BitStream_appendNum(bstream, 6, val);
+		if(ret < 0) return -1;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * 8 bit data
+ *****************************************************************************/
+
+/**
+ * Estimate the length of the encoded bit stream of 8 bit data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsMode8(int size)
+{
+	return size * 8;
+}
+
+/**
+ * Convert the 8bits data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_encodeMode8(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int ret;
+
+	if(mqr) {
+		if(version < 3) {
+			errno = EINVAL;
+			return -1;
+		}
+		ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_8);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_8, version), entry->size);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_8);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_8, version), entry->size);
+		if(ret < 0) return -1;
+	}
+
+	ret = BitStream_appendBytes(bstream, entry->size, entry->data);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+
+/******************************************************************************
+ * Kanji data
+ *****************************************************************************/
+
+/**
+ * Estimate the length of the encoded bit stream of kanji data.
+ * @param size
+ * @return number of bits
+ */
+int QRinput_estimateBitsModeKanji(int size)
+{
+	return (size / 2) * 13;
+}
+
+/**
+ * Check the input data.
+ * @param size
+ * @param data
+ * @return result
+ */
+static int QRinput_checkModeKanji(int size, const unsigned char *data)
+{
+	int i;
+	unsigned int val;
+
+	if(size & 1)
+		return -1;
+
+	for(i = 0; i < size; i+=2) {
+		val = ((unsigned int)data[i] << 8) | data[i+1];
+		if(val < 0x8140 || (val > 0x9ffc && val < 0xe040) || val > 0xebbf) {
+			return -1;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Convert the kanji data and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL invalid version.
+ */
+static int QRinput_encodeModeKanji(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int ret, i;
+	unsigned int val, h;
+
+	if(mqr) {
+		if(version < 2) {
+			errno = EINVAL;
+			return -1;
+		}
+		ret = BitStream_appendNum(bstream, version - 1, MQRSPEC_MODEID_KANJI);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, MQRspec_lengthIndicator(QR_MODE_KANJI, version), entry->size/2);
+		if(ret < 0) return -1;
+	} else {
+		ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_KANJI);
+		if(ret < 0) return -1;
+		ret = BitStream_appendNum(bstream, QRspec_lengthIndicator(QR_MODE_KANJI, version), entry->size/2);
+		if(ret < 0) return -1;
+	}
+
+	for(i = 0; i < entry->size; i+=2) {
+		val = ((unsigned int)entry->data[i] << 8) | entry->data[i+1];
+		if(val <= 0x9ffc) {
+			val -= 0x8140;
+		} else {
+			val -= 0xc140;
+		}
+		h = (val >> 8) * 0xc0;
+		val = (val & 0xff) + h;
+
+		ret = BitStream_appendNum(bstream, 13, val);
+		if(ret < 0) return -1;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * Structured Symbol
+ *****************************************************************************/
+
+/**
+ * Convert a structure symbol code and append to a bit stream.
+ * @param entry
+ * @param mqr
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw EINVAL invalid entry.
+ */
+static int QRinput_encodeModeStructure(QRinput_List *entry, BitStream *bstream, int mqr)
+{
+	int ret;
+
+	if(mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_STRUCTURE);
+	if(ret < 0) return -1;
+	ret = BitStream_appendNum(bstream, 4, entry->data[1] - 1);
+	if(ret < 0) return -1;
+	ret = BitStream_appendNum(bstream, 4, entry->data[0] - 1);
+	if(ret < 0) return -1;
+	ret = BitStream_appendNum(bstream, 8, entry->data[2]);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/******************************************************************************
+ * FNC1
+ *****************************************************************************/
+
+static int QRinput_checkModeFNC1Second(int size)
+{
+	if(size != 1) return -1;
+
+	/* No data check required. */
+
+	return 0;
+}
+
+static int QRinput_encodeModeFNC1Second(QRinput_List *entry, BitStream *bstream)
+{
+	int ret;
+
+	ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_FNC1SECOND);
+	if(ret < 0) return -1;
+
+	ret = BitStream_appendBytes(bstream, 1, entry->data);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/******************************************************************************
+ * ECI header
+ *****************************************************************************/
+static unsigned int QRinput_decodeECIfromByteArray(unsigned char *data)
+{
+	int i;
+	unsigned int ecinum;
+
+	ecinum = 0;
+	for(i = 0; i < 4; i++) {
+		ecinum = ecinum << 8;
+		ecinum |= data[3-i];
+	}
+
+	return ecinum;
+}
+
+static int QRinput_estimateBitsModeECI(unsigned char *data)
+{
+	unsigned int ecinum;
+
+	ecinum = QRinput_decodeECIfromByteArray(data);
+
+	/* See Table 4 of JISX 0510:2004 pp.17. */
+	if(ecinum < 128) {
+		return MODE_INDICATOR_SIZE + 8;
+	} else if(ecinum < 16384) {
+		return MODE_INDICATOR_SIZE + 16;
+	} else {
+		return MODE_INDICATOR_SIZE + 24;
+	}
+}
+
+static int QRinput_encodeModeECI(QRinput_List *entry, BitStream *bstream)
+{
+	int ret, words;
+	unsigned int ecinum, code;
+
+	ecinum = QRinput_decodeECIfromByteArray(entry->data);
+
+	/* See Table 4 of JISX 0510:2004 pp.17. */
+	if(ecinum < 128) {
+		words = 1;
+		code = ecinum;
+	} else if(ecinum < 16384) {
+		words = 2;
+		code = 0x8000 + ecinum;
+	} else {
+		words = 3;
+		code = 0xc0000 + ecinum;
+	}
+
+	ret = BitStream_appendNum(bstream, 4, QRSPEC_MODEID_ECI);
+	if(ret < 0) return -1;
+
+	ret = BitStream_appendNum(bstream, words * 8, code);
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/******************************************************************************
+ * Validation
+ *****************************************************************************/
+
+int QRinput_check(QRencodeMode mode, int size, const unsigned char *data)
+{
+	if((mode == QR_MODE_FNC1FIRST && size < 0) || size <= 0) return -1;
+
+	switch(mode) {
+		case QR_MODE_NUM:
+			return QRinput_checkModeNum(size, (const char *)data);
+		case QR_MODE_AN:
+			return QRinput_checkModeAn(size, (const char *)data);
+		case QR_MODE_KANJI:
+			return QRinput_checkModeKanji(size, data);
+		case QR_MODE_8:
+			return 0;
+		case QR_MODE_STRUCTURE:
+			return 0;
+		case QR_MODE_ECI:
+			return 0;
+		case QR_MODE_FNC1FIRST:
+			return 0;
+		case QR_MODE_FNC1SECOND:
+			return QRinput_checkModeFNC1Second(size);
+		case QR_MODE_NUL:
+			break;
+	}
+
+	return -1;
+}
+
+/******************************************************************************
+ * Estimation of the bit length
+ *****************************************************************************/
+
+/**
+ * Estimate the length of the encoded bit stream on the current version.
+ * @param entry
+ * @param version version of the symbol
+ * @param mqr
+ * @return number of bits
+ */
+static int QRinput_estimateBitStreamSizeOfEntry(QRinput_List *entry, int version, int mqr)
+{
+	int bits = 0;
+	int l, m;
+	int num;
+
+	if(version == 0) version = 1;
+
+	switch(entry->mode) {
+		case QR_MODE_NUM:
+			bits = QRinput_estimateBitsModeNum(entry->size);
+			break;
+		case QR_MODE_AN:
+			bits = QRinput_estimateBitsModeAn(entry->size);
+			break;
+		case QR_MODE_8:
+			bits = QRinput_estimateBitsMode8(entry->size);
+			break;
+		case QR_MODE_KANJI:
+			bits = QRinput_estimateBitsModeKanji(entry->size);
+			break;
+		case QR_MODE_STRUCTURE:
+			return STRUCTURE_HEADER_SIZE;
+		case QR_MODE_ECI:
+			bits = QRinput_estimateBitsModeECI(entry->data);
+			break;
+		case QR_MODE_FNC1FIRST:
+			return MODE_INDICATOR_SIZE;
+		case QR_MODE_FNC1SECOND:
+			return MODE_INDICATOR_SIZE + 8;
+		default:
+			return 0;
+	}
+
+	if(mqr) {
+		l = QRspec_lengthIndicator(entry->mode, version);
+		m = version - 1;
+		bits += l + m;
+	} else {
+		l = QRspec_lengthIndicator(entry->mode, version);
+		m = 1 << l;
+		num = (entry->size + m - 1) / m;
+
+		bits += num * (MODE_INDICATOR_SIZE + l);
+	}
+
+	return bits;
+}
+
+/**
+ * Estimate the length of the encoded bit stream of the data.
+ * @param input input data
+ * @param version version of the symbol
+ * @return number of bits
+ */
+int QRinput_estimateBitStreamSize(QRinput *input, int version)
+{
+	QRinput_List *list;
+	int bits = 0;
+
+	list = input->head;
+	while(list != NULL) {
+		bits += QRinput_estimateBitStreamSizeOfEntry(list, version, input->mqr);
+		list = list->next;
+	}
+
+	return bits;
+}
+
+/**
+ * Estimate the required version number of the symbol.
+ * @param input input data
+ * @return required version number
+ */
+static int QRinput_estimateVersion(QRinput *input)
+{
+	int bits;
+	int version, prev;
+
+	version = 0;
+	do {
+		prev = version;
+		bits = QRinput_estimateBitStreamSize(input, prev);
+		version = QRspec_getMinimumVersion((bits + 7) / 8, input->level);
+	} while (version > prev);
+
+	return version;
+}
+
+/**
+ * Return required length in bytes for specified mode, version and bits.
+ * @param mode
+ * @param version
+ * @param bits
+ * @return required length of code words in bytes.
+ */
+int QRinput_lengthOfCode(QRencodeMode mode, int version, int bits)
+{
+	int payload, size, chunks, remain, maxsize;
+
+	payload = bits - 4 - QRspec_lengthIndicator(mode, version);
+	switch(mode) {
+		case QR_MODE_NUM:
+			chunks = payload / 10;
+			remain = payload - chunks * 10;
+			size = chunks * 3;
+			if(remain >= 7) {
+				size += 2;
+			} else if(remain >= 4) {
+				size += 1;
+			}
+			break;
+		case QR_MODE_AN:
+			chunks = payload / 11;
+			remain = payload - chunks * 11;
+			size = chunks * 2;
+			if(remain >= 6) size++;
+			break;
+		case QR_MODE_8:
+			size = payload / 8;
+			break;
+		case QR_MODE_KANJI:
+			size = (payload / 13) * 2;
+			break;
+		case QR_MODE_STRUCTURE:
+			size = payload / 8;
+			break;
+		default:
+			size = 0;
+			break;
+	}
+	maxsize = QRspec_maximumWords(mode, version);
+	if(size < 0) size = 0;
+	if(maxsize > 0 && size > maxsize) size = maxsize;
+
+	return size;
+}
+
+/******************************************************************************
+ * Data conversion
+ *****************************************************************************/
+
+/**
+ * Convert the input data in the data chunk and append to a bit stream.
+ * @param entry
+ * @param bstream
+ * @return number of bits (>0) or -1 for failure.
+ */
+static int QRinput_encodeBitStream(QRinput_List *entry, BitStream *bstream, int version, int mqr)
+{
+	int words, ret;
+	QRinput_List *st1 = NULL, *st2 = NULL;
+	int prevsize;
+
+	prevsize = BitStream_size(bstream);
+
+	words = QRspec_maximumWords(entry->mode, version);
+	if(words != 0 && entry->size > words) {
+		st1 = QRinput_List_newEntry(entry->mode, words, entry->data);
+		if(st1 == NULL) goto ABORT;
+		st2 = QRinput_List_newEntry(entry->mode, entry->size - words, &entry->data[words]);
+		if(st2 == NULL) goto ABORT;
+
+		ret = QRinput_encodeBitStream(st1, bstream, version, mqr);
+		if(ret < 0) goto ABORT;
+		ret = QRinput_encodeBitStream(st2, bstream, version, mqr);
+		if(ret < 0) goto ABORT;
+
+		QRinput_List_freeEntry(st1);
+		QRinput_List_freeEntry(st2);
+	} else {
+		ret = 0;
+		switch(entry->mode) {
+			case QR_MODE_NUM:
+				ret = QRinput_encodeModeNum(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_AN:
+				ret = QRinput_encodeModeAn(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_8:
+				ret = QRinput_encodeMode8(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_KANJI:
+				ret = QRinput_encodeModeKanji(entry, bstream, version, mqr);
+				break;
+			case QR_MODE_STRUCTURE:
+				ret = QRinput_encodeModeStructure(entry, bstream, mqr);
+				break;
+			case QR_MODE_ECI:
+				ret = QRinput_encodeModeECI(entry, bstream);
+				break;
+			case QR_MODE_FNC1SECOND:
+				ret = QRinput_encodeModeFNC1Second(entry, bstream);
+				break;
+			default:
+				break;
+		}
+		if(ret < 0) return -1;
+	}
+
+	return BitStream_size(bstream) - prevsize;
+ABORT:
+	QRinput_List_freeEntry(st1);
+	QRinput_List_freeEntry(st2);
+	return -1;
+}
+
+/**
+ * Convert the input data to a bit stream.
+ * @param input input data.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_createBitStream(QRinput *input, BitStream *bstream)
+{
+	QRinput_List *list;
+	int bits, total = 0;
+
+	list = input->head;
+	while(list != NULL) {
+		bits = QRinput_encodeBitStream(list, bstream, input->version, input->mqr);
+		if(bits < 0) return -1;
+		total += bits;
+		list = list->next;
+	}
+
+	return total;
+}
+
+/**
+ * Convert the input data to a bit stream.
+ * When the version number is given and that is not sufficient, it is increased
+ * automatically.
+ * @param input input data.
+ * @param bstream where the converted data is stored.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ENOMEM unable to allocate memory.
+ * @throw ERANGE input data is too large.
+ */
+static int QRinput_convertData(QRinput *input, BitStream *bstream)
+{
+	int bits;
+	int ver;
+
+	ver = QRinput_estimateVersion(input);
+	if(ver > QRinput_getVersion(input)) {
+		QRinput_setVersion(input, ver);
+	}
+
+	for(;;) {
+		BitStream_reset(bstream);
+		bits = QRinput_createBitStream(input, bstream);
+		if(bits < 0) return -1;
+		ver = QRspec_getMinimumVersion((bits + 7) / 8, input->level);
+		if(ver > QRinput_getVersion(input)) {
+			QRinput_setVersion(input, ver);
+		} else {
+			break;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Append padding bits for the input data.
+ * @param bstream Bitstream to be appended.
+ * @param input input data.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ERANGE input data is too large.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_appendPaddingBit(BitStream *bstream, QRinput *input)
+{
+	int bits, maxbits, words, maxwords, i, ret;
+	int padlen;
+
+	bits = BitStream_size(bstream);
+	maxwords = QRspec_getDataLength(input->version, input->level);
+	maxbits = maxwords * 8;
+
+	if(maxbits < bits) {
+		errno = ERANGE;
+		return -1;
+	}
+	if(maxbits == bits) {
+		return 0;
+	}
+
+	if(maxbits - bits <= 4) {
+		return BitStream_appendNum(bstream, maxbits - bits, 0);
+	}
+
+	words = (bits + 4 + 7) / 8;
+
+	ret = BitStream_appendNum(bstream, words * 8 - bits, 0);
+	if(ret < 0) return ret;
+
+	padlen = maxwords - words;
+	if(padlen > 0) {
+		for(i = 0; i < padlen; i++) {
+			ret = BitStream_appendNum(bstream, 8, (i&1)?0x11:0xec);
+			if(ret < 0) {
+				return ret;
+			}
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Append padding bits for the input data - Micro QR Code version.
+ * @param bstream Bitstream to be appended.
+ * @param input input data.
+ * @retval 0 success
+ * @retval -1 an error occurred and errno is set to indeicate the error.
+ *            See Execptions for the details.
+ * @throw ERANGE input data is too large.
+ * @throw ENOMEM unable to allocate memory.
+ */
+static int QRinput_appendPaddingBitMQR(BitStream *bstream, QRinput *input)
+{
+	int bits, maxbits, words, maxwords, i, ret, termbits;
+	int padlen;
+
+	bits = BitStream_size(bstream);
+	maxbits = MQRspec_getDataLengthBit(input->version, input->level);
+	maxwords = maxbits / 8;
+
+	if(maxbits < bits) {
+		errno = ERANGE;
+		return -1;
+	}
+	if(maxbits == bits) {
+		return 0;
+	}
+
+	termbits = input->version * 2 + 1;
+
+	if(maxbits - bits <= termbits) {
+		return BitStream_appendNum(bstream, maxbits - bits, 0);
+	}
+
+	bits += termbits;
+
+	words = (bits + 7) / 8;
+	if(maxbits - words * 8 > 0) {
+		termbits += words * 8 - bits;
+		if(words == maxwords) termbits += maxbits - words * 8;
+	} else {
+		termbits += words * 8 - bits;
+	}
+	ret = BitStream_appendNum(bstream, termbits, 0);
+	if(ret < 0) return ret;
+
+	padlen = maxwords - words;
+	if(padlen > 0) {
+		for(i = 0; i < padlen; i++) {
+			ret = BitStream_appendNum(bstream, 8, (i&1)?0x11:0xec);
+			if(ret < 0) return ret;
+		}
+		termbits = maxbits - maxwords * 8;
+		if(termbits > 0) {
+			ret = BitStream_appendNum(bstream, termbits, 0);
+			if(ret < 0) return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int QRinput_insertFNC1Header(QRinput *input)
+{
+	QRinput_List *entry = NULL;
+
+	if(input->fnc1 == 1) {
+		entry = QRinput_List_newEntry(QR_MODE_FNC1FIRST, 0, NULL);
+	} else if(input->fnc1 == 2) {
+		entry = QRinput_List_newEntry(QR_MODE_FNC1SECOND, 1, &(input->appid));
+	}
+	if(entry == NULL) {
+		return -1;
+	}
+
+	if(input->head->mode != QR_MODE_STRUCTURE && input->head->mode != QR_MODE_ECI) {
+		entry->next = input->head;
+		input->head = entry;
+	} else {
+		entry->next = input->head->next;
+		input->head->next = entry;
+	}
+
+	return 0;
+}
+
+/**
+ * Merge all bit streams in the input data.
+ * @param input input data.
+ * @return merged bit stream
+ */
+
+int QRinput_mergeBitStream(QRinput *input, BitStream *bstream)
+{
+	if(input->mqr) {
+		if(QRinput_createBitStream(input, bstream) < 0) {
+			return -1;
+		}
+	} else {
+		if(input->fnc1) {
+			if(QRinput_insertFNC1Header(input) < 0) {
+				return -1;
+			}
+		}
+		if(QRinput_convertData(input, bstream) < 0) {
+			return -1;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * Merge all bit streams in the input data and append padding bits
+ * @param input input data.
+ * @return padded merged bit stream
+ */
+
+int QRinput_getBitStream(QRinput *input, BitStream *bstream)
+{
+	int ret;
+
+	ret = QRinput_mergeBitStream(input, bstream);
+	if(ret < 0) return -1;
+
+	if(input->mqr) {
+		ret = QRinput_appendPaddingBitMQR(bstream, input);
+	} else {
+		ret = QRinput_appendPaddingBit(bstream, input);
+	}
+	if(ret < 0) return -1;
+
+	return 0;
+}
+
+/**
+ * Pack all bit streams padding bits into a byte array.
+ * @param input input data.
+ * @return padded merged byte stream
+ */
+
+unsigned char *QRinput_getByteStream(QRinput *input)
+{
+	BitStream *bstream;
+	unsigned char *array;
+	int ret;
+
+	bstream = BitStream_new();
+	if(bstream == NULL) {
+		return NULL;
+	}
+
+	ret = QRinput_getBitStream(input, bstream);
+	if(ret < 0) {
+		BitStream_free(bstream);
+		return NULL;
+	}
+	array = BitStream_toByte(bstream);
+	BitStream_free(bstream);
+
+	return array;
+}
+
+/******************************************************************************
+ * Structured input data
+ *****************************************************************************/
+
+static QRinput_InputList *QRinput_InputList_newEntry(QRinput *input)
+{
+	QRinput_InputList *entry;
+
+	entry = (QRinput_InputList *)malloc(sizeof(QRinput_InputList));
+	if(entry == NULL) return NULL;
+
+	entry->input = input;
+	entry->next = NULL;
+
+	return entry;
+}
+
+static void QRinput_InputList_freeEntry(QRinput_InputList *entry)
+{
+	if(entry != NULL) {
+		QRinput_free(entry->input);
+		free(entry);
+	}
+}
+
+QRinput_Struct *QRinput_Struct_new(void)
+{
+	QRinput_Struct *s;
+
+	s = (QRinput_Struct *)malloc(sizeof(QRinput_Struct));
+	if(s == NULL) return NULL;
+
+	s->size = 0;
+	s->parity = -1;
+	s->head = NULL;
+	s->tail = NULL;
+
+	return s;
+}
+
+void QRinput_Struct_setParity(QRinput_Struct *s, unsigned char parity)
+{
+	s->parity = (int)parity;
+}
+
+int QRinput_Struct_appendInput(QRinput_Struct *s, QRinput *input)
+{
+	QRinput_InputList *e;
+
+	if(input->mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	e = QRinput_InputList_newEntry(input);
+	if(e == NULL) return -1;
+
+	s->size++;
+	if(s->tail == NULL) {
+		s->head = e;
+		s->tail = e;
+	} else {
+		s->tail->next = e;
+		s->tail = e;
+	}
+
+	return s->size;
+}
+
+void QRinput_Struct_free(QRinput_Struct *s)
+{
+	QRinput_InputList *list, *next;
+
+	if(s != NULL) {
+		list = s->head;
+		while(list != NULL) {
+			next = list->next;
+			QRinput_InputList_freeEntry(list);
+			list = next;
+		}
+		free(s);
+	}
+}
+
+static unsigned char QRinput_Struct_calcParity(QRinput_Struct *s)
+{
+	QRinput_InputList *list;
+	unsigned char parity = 0;
+
+	list = s->head;
+	while(list != NULL) {
+		parity ^= QRinput_calcParity(list->input);
+		list = list->next;
+	}
+
+	QRinput_Struct_setParity(s, parity);
+
+	return parity;
+}
+
+static int QRinput_List_shrinkEntry(QRinput_List *entry, int bytes)
+{
+	unsigned char *data;
+
+	data = (unsigned char *)malloc(bytes);
+	if(data == NULL) return -1;
+
+	memcpy(data, entry->data, bytes);
+	free(entry->data);
+	entry->data = data;
+	entry->size = bytes;
+
+	return 0;
+}
+
+int QRinput_splitEntry(QRinput_List *entry, int bytes)
+{
+	QRinput_List *e;
+	int ret;
+
+	e = QRinput_List_newEntry(entry->mode, entry->size - bytes, entry->data + bytes);
+	if(e == NULL) {
+		return -1;
+	}
+
+	ret = QRinput_List_shrinkEntry(entry, bytes);
+	if(ret < 0) {
+		QRinput_List_freeEntry(e);
+		return -1;
+	}
+
+	e->next = entry->next;
+	entry->next = e;
+
+	return 0;
+}
+
+QRinput_Struct *QRinput_splitQRinputToStruct(QRinput *input)
+{
+	QRinput *p = NULL;
+	QRinput_Struct *s = NULL;
+	int bits, maxbits, nextbits, bytes, ret;
+	QRinput_List *list, *next, *prev;
+	BitStream *bstream = NULL;
+
+	if(input->mqr) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	s = QRinput_Struct_new();
+	if(s == NULL) return NULL;
+
+	input = QRinput_dup(input);
+	if(input == NULL) {
+		QRinput_Struct_free(s);
+		return NULL;
+	}
+
+	QRinput_Struct_setParity(s, QRinput_calcParity(input));
+	maxbits = QRspec_getDataLength(input->version, input->level) * 8 - STRUCTURE_HEADER_SIZE;
+
+	if(maxbits <= 0) goto ABORT;
+
+	bstream = BitStream_new();
+	if(bstream == NULL) goto ABORT;
+
+	bits = 0;
+	list = input->head;
+	prev = NULL;
+	while(list != NULL) {
+		nextbits = QRinput_estimateBitStreamSizeOfEntry(list, input->version, input->mqr);
+		if(bits + nextbits <= maxbits) {
+			BitStream_reset(bstream);
+			ret = QRinput_encodeBitStream(list, bstream, input->version, input->mqr);
+			if(ret < 0) goto ABORT;
+			bits += ret;
+			prev = list;
+			list = list->next;
+		} else {
+			bytes = QRinput_lengthOfCode(list->mode, input->version, maxbits - bits);
+			p = QRinput_new2(input->version, input->level);
+			if(p == NULL) goto ABORT;
+			if(bytes > 0) {
+				/* Splits this entry into 2 entries. */
+				ret = QRinput_splitEntry(list, bytes);
+				if(ret < 0) {
+					QRinput_free(p);
+					goto ABORT;
+				}
+				/* First half is the tail of the current input. */
+				next = list->next;
+				list->next = NULL;
+				/* Second half is the head of the next input, p.*/
+				p->head = next;
+				/* Renew QRinput.tail. */
+				p->tail = input->tail;
+				input->tail = list;
+				/* Point to the next entry. */
+				prev = list;
+				list = next;
+			} else {
+				/* Current entry will go to the next input. */
+				prev->next = NULL;
+				p->head = list;
+				p->tail = input->tail;
+				input->tail = prev;
+			}
+			ret = QRinput_Struct_appendInput(s, input);
+			if(ret < 0) {
+				QRinput_free(p);
+				goto ABORT;
+			}
+			input = p;
+			bits = 0;
+		}
+	}
+	ret = QRinput_Struct_appendInput(s, input);
+	if(ret < 0) goto ABORT;
+	if(s->size > MAX_STRUCTURED_SYMBOLS) {
+		errno = ERANGE;
+		QRinput_Struct_free(s);
+		BitStream_free(bstream);
+		return NULL;
+	}
+	ret = QRinput_Struct_insertStructuredAppendHeaders(s);
+	if(ret < 0) {
+		QRinput_Struct_free(s);
+		BitStream_free(bstream);
+		return NULL;
+	}
+
+	BitStream_free(bstream);
+	return s;
+
+ABORT:
+	BitStream_free(bstream);
+	QRinput_free(input);
+	QRinput_Struct_free(s);
+	return NULL;
+}
+
+int QRinput_Struct_insertStructuredAppendHeaders(QRinput_Struct *s)
+{
+	int i;
+	QRinput_InputList *list;
+
+	if(s->size == 1) {
+		return 0;
+	}
+
+	if(s->parity < 0) {
+		QRinput_Struct_calcParity(s);
+	}
+	i = 1;
+	list = s->head;
+	while(list != NULL) {
+		if(QRinput_insertStructuredAppendHeader(list->input, s->size, i, s->parity))
+			return -1;
+		i++;
+		list = list->next;
+	}
+
+	return 0;
+}
+
+/******************************************************************************
+ * Extended encoding mode (FNC1 and ECI)
+ *****************************************************************************/
+
+int QRinput_setFNC1First(QRinput *input)
+{
+	if(input->mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+	input->fnc1 = 1;
+
+	return 0;
+}
+
+int QRinput_setFNC1Second(QRinput *input, unsigned char appid)
+{
+	if(input->mqr) {
+		errno = EINVAL;
+		return -1;
+	}
+	input->fnc1 = 2;
+	input->appid = appid;
+
+	return 0;
+}
diff --git a/apps/eink-advanced/qrspec.c b/apps/eink-advanced/qrspec.c
new file mode 100644
index 0000000000000000000000000000000000000000..a4d5ba4453b73f338032a6abbfb0399a1695c4b3
--- /dev/null
+++ b/apps/eink-advanced/qrspec.c
@@ -0,0 +1,514 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * QR Code specification in convenient format.
+ * Copyright (C) 2006-2013 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * The following data / specifications are taken from
+ * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
+ *  or
+ * "Automatic identification and data capture techniques --
+ *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include "qrspec.h"
+#include "qrinput.h"
+
+/******************************************************************************
+ * Version and capacity
+ *****************************************************************************/
+
+typedef struct {
+	int width; //< Edge length of the symbol
+	int words;  //< Data capacity (bytes)
+	int remainder; //< Remainder bit (bits)
+	int ec[4];  //< Number of ECC code (bytes)
+} QRspec_Capacity;
+
+/**
+ * Table of the capacity of symbols
+ * See Table 1 (pp.13) and Table 12-16 (pp.30-36), JIS X0510:2004.
+ */
+static const QRspec_Capacity qrspecCapacity[QRSPEC_VERSION_MAX + 1] = {
+	{  0,    0, 0, {   0,    0,    0,    0}},
+	{ 21,   26, 0, {   7,   10,   13,   17}}, // 1
+	{ 25,   44, 7, {  10,   16,   22,   28}},
+	{ 29,   70, 7, {  15,   26,   36,   44}},
+	{ 33,  100, 7, {  20,   36,   52,   64}},
+	{ 37,  134, 7, {  26,   48,   72,   88}}, // 5
+	{ 41,  172, 7, {  36,   64,   96,  112}},
+	{ 45,  196, 0, {  40,   72,  108,  130}},
+	{ 49,  242, 0, {  48,   88,  132,  156}},
+	{ 53,  292, 0, {  60,  110,  160,  192}},
+	{ 57,  346, 0, {  72,  130,  192,  224}}, //10
+	{ 61,  404, 0, {  80,  150,  224,  264}},
+	{ 65,  466, 0, {  96,  176,  260,  308}},
+	{ 69,  532, 0, { 104,  198,  288,  352}},
+	{ 73,  581, 3, { 120,  216,  320,  384}},
+	{ 77,  655, 3, { 132,  240,  360,  432}}, //15
+	{ 81,  733, 3, { 144,  280,  408,  480}},
+	{ 85,  815, 3, { 168,  308,  448,  532}},
+	{ 89,  901, 3, { 180,  338,  504,  588}},
+	{ 93,  991, 3, { 196,  364,  546,  650}},
+	{ 97, 1085, 3, { 224,  416,  600,  700}}, //20
+	{101, 1156, 4, { 224,  442,  644,  750}},
+	{105, 1258, 4, { 252,  476,  690,  816}},
+	{109, 1364, 4, { 270,  504,  750,  900}},
+	{113, 1474, 4, { 300,  560,  810,  960}},
+	{117, 1588, 4, { 312,  588,  870, 1050}}, //25
+	{121, 1706, 4, { 336,  644,  952, 1110}},
+	{125, 1828, 4, { 360,  700, 1020, 1200}},
+	{129, 1921, 3, { 390,  728, 1050, 1260}},
+	{133, 2051, 3, { 420,  784, 1140, 1350}},
+	{137, 2185, 3, { 450,  812, 1200, 1440}}, //30
+	{141, 2323, 3, { 480,  868, 1290, 1530}},
+	{145, 2465, 3, { 510,  924, 1350, 1620}},
+	{149, 2611, 3, { 540,  980, 1440, 1710}},
+	{153, 2761, 3, { 570, 1036, 1530, 1800}},
+	{157, 2876, 0, { 570, 1064, 1590, 1890}}, //35
+	{161, 3034, 0, { 600, 1120, 1680, 1980}},
+	{165, 3196, 0, { 630, 1204, 1770, 2100}},
+	{169, 3362, 0, { 660, 1260, 1860, 2220}},
+	{173, 3532, 0, { 720, 1316, 1950, 2310}},
+	{177, 3706, 0, { 750, 1372, 2040, 2430}} //40
+};
+
+int QRspec_getDataLength(int version, QRecLevel level)
+{
+	return qrspecCapacity[version].words - qrspecCapacity[version].ec[level];
+}
+
+int QRspec_getECCLength(int version, QRecLevel level)
+{
+	return qrspecCapacity[version].ec[level];
+}
+
+int QRspec_getMinimumVersion(int size, QRecLevel level)
+{
+	int i;
+	int words;
+
+	for(i = 1; i <= QRSPEC_VERSION_MAX; i++) {
+		words  = qrspecCapacity[i].words - qrspecCapacity[i].ec[level];
+		if(words >= size) return i;
+	}
+
+	return QRSPEC_VERSION_MAX;
+}
+
+int QRspec_getWidth(int version)
+{
+	return qrspecCapacity[version].width;
+}
+
+int QRspec_getRemainder(int version)
+{
+	return qrspecCapacity[version].remainder;
+}
+
+/******************************************************************************
+ * Length indicator
+ *****************************************************************************/
+
+static const int lengthTableBits[4][3] = {
+	{10, 12, 14},
+	{ 9, 11, 13},
+	{ 8, 16, 16},
+	{ 8, 10, 12}
+};
+
+int QRspec_lengthIndicator(QRencodeMode mode, int version)
+{
+	int l;
+
+	if(!QRinput_isSplittableMode(mode)) return 0;
+	if(version <= 9) {
+		l = 0;
+	} else if(version <= 26) {
+		l = 1;
+	} else {
+		l = 2;
+	}
+
+	return lengthTableBits[mode][l];
+}
+
+int QRspec_maximumWords(QRencodeMode mode, int version)
+{
+	int l;
+	int bits;
+	int words;
+
+	if(!QRinput_isSplittableMode(mode)) return 0;
+	if(version <= 9) {
+		l = 0;
+	} else if(version <= 26) {
+		l = 1;
+	} else {
+		l = 2;
+	}
+
+	bits = lengthTableBits[mode][l];
+	words = (1 << bits) - 1;
+	if(mode == QR_MODE_KANJI) {
+		words *= 2; // the number of bytes is required
+	}
+
+	return words;
+}
+
+/******************************************************************************
+ * Error correction code
+ *****************************************************************************/
+
+/**
+ * Table of the error correction code (Reed-Solomon block)
+ * See Table 12-16 (pp.30-36), JIS X0510:2004.
+ */
+static const int eccTable[QRSPEC_VERSION_MAX+1][4][2] = {
+	{{ 0,  0}, { 0,  0}, { 0,  0}, { 0,  0}},
+	{{ 1,  0}, { 1,  0}, { 1,  0}, { 1,  0}}, // 1
+	{{ 1,  0}, { 1,  0}, { 1,  0}, { 1,  0}},
+	{{ 1,  0}, { 1,  0}, { 2,  0}, { 2,  0}},
+	{{ 1,  0}, { 2,  0}, { 2,  0}, { 4,  0}},
+	{{ 1,  0}, { 2,  0}, { 2,  2}, { 2,  2}}, // 5
+	{{ 2,  0}, { 4,  0}, { 4,  0}, { 4,  0}},
+	{{ 2,  0}, { 4,  0}, { 2,  4}, { 4,  1}},
+	{{ 2,  0}, { 2,  2}, { 4,  2}, { 4,  2}},
+	{{ 2,  0}, { 3,  2}, { 4,  4}, { 4,  4}},
+	{{ 2,  2}, { 4,  1}, { 6,  2}, { 6,  2}}, //10
+	{{ 4,  0}, { 1,  4}, { 4,  4}, { 3,  8}},
+	{{ 2,  2}, { 6,  2}, { 4,  6}, { 7,  4}},
+	{{ 4,  0}, { 8,  1}, { 8,  4}, {12,  4}},
+	{{ 3,  1}, { 4,  5}, {11,  5}, {11,  5}},
+	{{ 5,  1}, { 5,  5}, { 5,  7}, {11,  7}}, //15
+	{{ 5,  1}, { 7,  3}, {15,  2}, { 3, 13}},
+	{{ 1,  5}, {10,  1}, { 1, 15}, { 2, 17}},
+	{{ 5,  1}, { 9,  4}, {17,  1}, { 2, 19}},
+	{{ 3,  4}, { 3, 11}, {17,  4}, { 9, 16}},
+	{{ 3,  5}, { 3, 13}, {15,  5}, {15, 10}}, //20
+	{{ 4,  4}, {17,  0}, {17,  6}, {19,  6}},
+	{{ 2,  7}, {17,  0}, { 7, 16}, {34,  0}},
+	{{ 4,  5}, { 4, 14}, {11, 14}, {16, 14}},
+	{{ 6,  4}, { 6, 14}, {11, 16}, {30,  2}},
+	{{ 8,  4}, { 8, 13}, { 7, 22}, {22, 13}}, //25
+	{{10,  2}, {19,  4}, {28,  6}, {33,  4}},
+	{{ 8,  4}, {22,  3}, { 8, 26}, {12, 28}},
+	{{ 3, 10}, { 3, 23}, { 4, 31}, {11, 31}},
+	{{ 7,  7}, {21,  7}, { 1, 37}, {19, 26}},
+	{{ 5, 10}, {19, 10}, {15, 25}, {23, 25}}, //30
+	{{13,  3}, { 2, 29}, {42,  1}, {23, 28}},
+	{{17,  0}, {10, 23}, {10, 35}, {19, 35}},
+	{{17,  1}, {14, 21}, {29, 19}, {11, 46}},
+	{{13,  6}, {14, 23}, {44,  7}, {59,  1}},
+	{{12,  7}, {12, 26}, {39, 14}, {22, 41}}, //35
+	{{ 6, 14}, { 6, 34}, {46, 10}, { 2, 64}},
+	{{17,  4}, {29, 14}, {49, 10}, {24, 46}},
+	{{ 4, 18}, {13, 32}, {48, 14}, {42, 32}},
+	{{20,  4}, {40,  7}, {43, 22}, {10, 67}},
+	{{19,  6}, {18, 31}, {34, 34}, {20, 61}},//40
+};
+
+void QRspec_getEccSpec(int version, QRecLevel level, int spec[5])
+{
+	int b1, b2;
+	int data, ecc;
+
+	b1 = eccTable[version][level][0];
+	b2 = eccTable[version][level][1];
+	data = QRspec_getDataLength(version, level);
+	ecc  = QRspec_getECCLength(version, level);
+
+	if(b2 == 0) {
+		spec[0] = b1;
+		spec[1] = data / b1;
+		spec[2] = ecc / b1;
+		spec[3] = spec[4] = 0;
+	} else {
+		spec[0] = b1;
+		spec[1] = data / (b1 + b2);
+		spec[2] = ecc  / (b1 + b2);
+		spec[3] = b2;
+		spec[4] = spec[1] + 1;
+	}
+}
+
+/******************************************************************************
+ * Alignment pattern
+ *****************************************************************************/
+
+/**
+ * Positions of alignment patterns.
+ * This array includes only the second and the third position of the alignment
+ * patterns. Rest of them can be calculated from the distance between them.
+ *
+ * See Table 1 in Appendix E (pp.71) of JIS X0510:2004.
+ */
+static const int alignmentPattern[QRSPEC_VERSION_MAX+1][2] = {
+	{ 0,  0},
+	{ 0,  0}, {18,  0}, {22,  0}, {26,  0}, {30,  0}, // 1- 5
+	{34,  0}, {22, 38}, {24, 42}, {26, 46}, {28, 50}, // 6-10
+	{30, 54}, {32, 58}, {34, 62}, {26, 46}, {26, 48}, //11-15
+	{26, 50}, {30, 54}, {30, 56}, {30, 58}, {34, 62}, //16-20
+	{28, 50}, {26, 50}, {30, 54}, {28, 54}, {32, 58}, //21-25
+	{30, 58}, {34, 62}, {26, 50}, {30, 54}, {26, 52}, //26-30
+	{30, 56}, {34, 60}, {30, 58}, {34, 62}, {30, 54}, //31-35
+	{24, 50}, {28, 54}, {32, 58}, {26, 54}, {30, 58}, //35-40
+};
+
+/**
+ * Put an alignment marker.
+ * @param frame
+ * @param width
+ * @param ox,oy center coordinate of the pattern
+ */
+static void QRspec_putAlignmentMarker(unsigned char *frame, int width, int ox, int oy)
+{
+	static const unsigned char finder[] = {
+		0xa1, 0xa1, 0xa1, 0xa1, 0xa1,
+		0xa1, 0xa0, 0xa0, 0xa0, 0xa1,
+		0xa1, 0xa0, 0xa1, 0xa0, 0xa1,
+		0xa1, 0xa0, 0xa0, 0xa0, 0xa1,
+		0xa1, 0xa1, 0xa1, 0xa1, 0xa1,
+	};
+	int x, y;
+	const unsigned char *s;
+
+	frame += (oy - 2) * width + ox - 2;
+	s = finder;
+	for(y = 0; y < 5; y++) {
+		for(x = 0; x < 5; x++) {
+			frame[x] = s[x];
+		}
+		frame += width;
+		s += 5;
+	}
+}
+
+static void QRspec_putAlignmentPattern(int version, unsigned char *frame, int width)
+{
+	int d, w, x, y, cx, cy;
+
+	if(version < 2) return;
+
+	d = alignmentPattern[version][1] - alignmentPattern[version][0];
+	if(d < 0) {
+		w = 2;
+	} else {
+		w = (width - alignmentPattern[version][0]) / d + 2;
+	}
+
+	if(w * w - 3 == 1) {
+		x = alignmentPattern[version][0];
+		y = alignmentPattern[version][0];
+		QRspec_putAlignmentMarker(frame, width, x, y);
+		return;
+	}
+
+	cx = alignmentPattern[version][0];
+	for(x = 1; x < w - 1; x++) {
+		QRspec_putAlignmentMarker(frame, width,  6, cx);
+		QRspec_putAlignmentMarker(frame, width, cx,  6);
+		cx += d;
+	}
+
+	cy = alignmentPattern[version][0];
+	for(y = 0; y < w-1; y++) {
+		cx = alignmentPattern[version][0];
+		for(x = 0; x < w-1; x++) {
+			QRspec_putAlignmentMarker(frame, width, cx, cy);
+			cx += d;
+		}
+		cy += d;
+	}
+}
+
+/******************************************************************************
+ * Version information pattern
+ *****************************************************************************/
+
+/**
+ * Version information pattern (BCH coded).
+ * See Table 1 in Appendix D (pp.68) of JIS X0510:2004.
+ */
+static const unsigned int versionPattern[QRSPEC_VERSION_MAX - 6] = {
+	0x07c94, 0x085bc, 0x09a99, 0x0a4d3, 0x0bbf6, 0x0c762, 0x0d847, 0x0e60d,
+	0x0f928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9,
+	0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75,
+	0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64,
+	0x27541, 0x28c69
+};
+
+unsigned int QRspec_getVersionPattern(int version)
+{
+	if(version < 7 || version > QRSPEC_VERSION_MAX) return 0;
+
+	return versionPattern[version - 7];
+}
+
+/******************************************************************************
+ * Format information
+ *****************************************************************************/
+
+/* See calcFormatInfo in tests/test_qrspec.c */
+static const unsigned int formatInfo[4][8] = {
+	{0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976},
+	{0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0},
+	{0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed},
+	{0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b}
+};
+
+unsigned int QRspec_getFormatInfo(int mask, QRecLevel level)
+{
+	if(mask < 0 || mask > 7) return 0;
+
+	return formatInfo[level][mask];
+}
+
+/******************************************************************************
+ * Frame
+ *****************************************************************************/
+
+/**
+ * Put a finder pattern.
+ * @param frame
+ * @param width
+ * @param ox,oy upper-left coordinate of the pattern
+ */
+static void putFinderPattern(unsigned char *frame, int width, int ox, int oy)
+{
+	static const unsigned char finder[] = {
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
+		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
+		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
+	};
+	int x, y;
+	const unsigned char *s;
+
+	frame += oy * width + ox;
+	s = finder;
+	for(y = 0; y < 7; y++) {
+		for(x = 0; x < 7; x++) {
+			frame[x] = s[x];
+		}
+		frame += width;
+		s += 7;
+	}
+}
+
+
+static unsigned char *QRspec_createFrame(int version)
+{
+	unsigned char *frame, *p, *q;
+	int width;
+	int x, y;
+	unsigned int verinfo, v;
+
+	width = qrspecCapacity[version].width;
+	frame = (unsigned char *)malloc(width * width);
+	if(frame == NULL) return NULL;
+
+	memset(frame, 0, width * width);
+	/* Finder pattern */
+	putFinderPattern(frame, width, 0, 0);
+	putFinderPattern(frame, width, width - 7, 0);
+	putFinderPattern(frame, width, 0, width - 7);
+	/* Separator */
+	p = frame;
+	q = frame + width * (width - 7);
+	for(y = 0; y < 7; y++) {
+		p[7] = 0xc0;
+		p[width - 8] = 0xc0;
+		q[7] = 0xc0;
+		p += width;
+		q += width;
+	}
+	memset(frame + width * 7, 0xc0, 8);
+	memset(frame + width * 8 - 8, 0xc0, 8);
+	memset(frame + width * (width - 8), 0xc0, 8);
+	/* Mask format information area */
+	memset(frame + width * 8, 0x84, 9);
+	memset(frame + width * 9 - 8, 0x84, 8);
+	p = frame + 8;
+	for(y = 0; y < 8; y++) {
+		*p = 0x84;
+		p += width;
+	}
+	p = frame + width * (width - 7) + 8;
+	for(y = 0; y < 7; y++) {
+		*p = 0x84;
+		p += width;
+	}
+	/* Timing pattern */
+	p = frame + width * 6 + 8;
+	q = frame + width * 8 + 6;
+	for(x = 1; x < width-15; x++) {
+		*p =  0x90 | (x & 1);
+		*q =  0x90 | (x & 1);
+		p++;
+		q += width;
+	}
+	/* Alignment pattern */
+	QRspec_putAlignmentPattern(version, frame, width);
+
+	/* Version information */
+	if(version >= 7) {
+		verinfo = QRspec_getVersionPattern(version);
+
+		p = frame + width * (width - 11);
+		v = verinfo;
+		for(x = 0; x < 6; x++) {
+			for(y = 0; y < 3; y++) {
+				p[width * y + x] = 0x88 | (v & 1);
+				v = v >> 1;
+			}
+		}
+
+		p = frame + width - 11;
+		v = verinfo;
+		for(y = 0; y < 6; y++) {
+			for(x = 0; x < 3; x++) {
+				p[x] = 0x88 | (v & 1);
+				v = v >> 1;
+			}
+			p += width;
+		}
+	}
+	/* and a little bit... */
+	frame[width * (width - 8) + 8] = 0x81;
+
+	return frame;
+}
+
+unsigned char *QRspec_newFrame(int version)
+{
+	if(version < 1 || version > QRSPEC_VERSION_MAX) return NULL;
+
+	return QRspec_createFrame(version);
+}
diff --git a/apps/eink-advanced/rsecc.c b/apps/eink-advanced/rsecc.c
new file mode 100644
index 0000000000000000000000000000000000000000..5ca0511ab6cfbbc6b186d543467483cabba37025
--- /dev/null
+++ b/apps/eink-advanced/rsecc.c
@@ -0,0 +1,149 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Reed solomon error correction code encoder specialized for QR code.
+ * This code is rewritten by Kentaro Fukuchi, referring to the FEC library
+ * developed by Phil Karn (KA9Q).
+ *
+ * Copyright (C) 2002, 2003, 2004, 2006 Phil Karn, KA9Q
+ * Copyright (C) 2014 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#if HAVE_LIBPTHREAD
+#include <pthread.h>
+#endif
+
+#include "rsecc.h"
+
+#if HAVE_LIBPTHREAD
+static pthread_mutex_t RSECC_mutex = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
+static int initialized = 0;
+
+#define SYMBOL_SIZE (8)
+#define symbols ((1 << SYMBOL_SIZE) - 1)
+static const int proot = 0x11d; /* stands for x^8+x^4+x^3+x^2+1 (see pp.37 of JIS X0510:2004) */
+
+/* min/max codeword length of ECC, calculated from the specification. */
+#define min_length (2)
+#define max_length (30)
+#define max_generatorSize (max_length)
+
+static unsigned char alpha[symbols + 1];
+static unsigned char aindex[symbols + 1];
+static unsigned char generator[max_length - min_length + 1][max_generatorSize + 1];
+static unsigned char generatorInitialized[max_length - min_length + 1];
+
+static void RSECC_initLookupTable(void)
+{
+	int i, b;
+
+	alpha[symbols] = 0;
+	aindex[0] = symbols;
+
+	b = 1;
+	for(i = 0; i < symbols; i++) {
+		alpha[i] = b;
+		aindex[b] = i;
+		b <<= 1;
+		if(b & (symbols + 1)) {
+			b ^= proot;
+		}
+		b &= symbols;
+	}
+}
+
+static void RSECC_init(void)
+{
+	RSECC_initLookupTable();
+	memset(generatorInitialized, 0, (max_length - min_length + 1));
+	initialized = 1;
+}
+
+static void generator_init(int length)
+{
+	int i, j;
+	int g[max_generatorSize + 1];
+
+	g[0] = 1;
+	for(i = 0; i < length; i++) {
+		g[i + 1] = 1;
+		/* Because g[0] never be zero, skipped some conditional checks. */
+		for(j = i; j > 0; j--) {
+			g[j] = g[j - 1] ^  alpha[(aindex[g[j]] + i) % symbols];
+		}
+		g[0] = alpha[(aindex[g[0]] + i) % symbols];
+	}
+
+	for(i = 0; i <= length; i++) {
+		generator[length - min_length][i] = aindex[g[i]];
+	}
+
+	generatorInitialized[length - min_length] = 1;
+}
+
+int RSECC_encode(int data_length, int ecc_length, const unsigned char *data, unsigned char *ecc)
+{
+	int i, j;
+	unsigned char feedback;
+	unsigned char *gen;
+
+#if HAVE_LIBPTHREAD
+	pthread_mutex_lock(&RSECC_mutex);
+#endif
+	if(!initialized) {
+		RSECC_init();
+	}
+#if HAVE_LIBPTHREAD
+	pthread_mutex_unlock(&RSECC_mutex);
+#endif
+
+	if(ecc_length > max_length) return -1;
+
+	memset(ecc, 0, ecc_length);
+#if HAVE_LIBPTHREAD
+	pthread_mutex_lock(&RSECC_mutex);
+#endif
+	if(!generatorInitialized[ecc_length - min_length]) generator_init(ecc_length);
+#if HAVE_LIBPTHREAD
+	pthread_mutex_unlock(&RSECC_mutex);
+#endif
+	gen = generator[ecc_length - min_length];
+
+	for(i = 0; i < data_length; i++) {
+		feedback = aindex[data[i] ^ ecc[0]];
+		if(feedback != symbols) {
+			for(j = 1; j < ecc_length; j++) {
+				ecc[j] ^= alpha[(feedback + gen[ecc_length - j]) % symbols];
+			}
+		}
+		memmove(&ecc[0], &ecc[1], ecc_length - 1);
+		if(feedback != symbols) {
+			ecc[ecc_length - 1] = alpha[(feedback + gen[0]) % symbols];
+		} else {
+			ecc[ecc_length - 1] = 0;
+		}
+	}
+
+	return 0;
+}
diff --git a/apps/eink-advanced/split.c b/apps/eink-advanced/split.c
new file mode 100644
index 0000000000000000000000000000000000000000..d894aa5eefcf45a438b4a25b6725ceea81302fe3
--- /dev/null
+++ b/apps/eink-advanced/split.c
@@ -0,0 +1,324 @@
+/*
+ * qrencode - QR Code encoder
+ *
+ * Input data splitter.
+ * Copyright (C) 2006-2013 Kentaro Fukuchi <kentaro@fukuchi.org>
+ *
+ * The following data / specifications are taken from
+ * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
+ *  or
+ * "Automatic identification and data capture techniques --
+ *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include "qrencode.h"
+#include "qrinput.h"
+#include "qrspec.h"
+#include "split.h"
+
+#define isdigit(__c__) ((unsigned char)((signed char)(__c__) - '0') < 10)
+#define isalnum(__c__) (QRinput_lookAnTable(__c__) >= 0)
+
+#if !HAVE_STRDUP
+#undef strdup
+char *strdup(const char *s)
+{
+	size_t len = strlen(s) + 1;
+	void *newstring = malloc(len);
+	if(newstring == NULL) return NULL;
+	return (char *)memcpy(newstring, s, len);
+}
+#endif
+
+static QRencodeMode Split_identifyMode(const char *string, QRencodeMode hint)
+{
+	unsigned char c, d;
+	unsigned int word;
+
+	c = string[0];
+
+	if(c == '\0') return QR_MODE_NUL;
+	if(isdigit(c)) {
+		return QR_MODE_NUM;
+	} else if(isalnum(c)) {
+		return QR_MODE_AN;
+	} else if(hint == QR_MODE_KANJI) {
+		d = string[1];
+		if(d != '\0') {
+			word = ((unsigned int)c << 8) | d;
+			if((word >= 0x8140 && word <= 0x9ffc) || (word >= 0xe040 && word <= 0xebbf)) {
+				return QR_MODE_KANJI;
+			}
+		}
+	}
+
+	return QR_MODE_8;
+}
+
+static int Split_eatAn(const char *string, QRinput *input, QRencodeMode hint);
+static int Split_eat8(const char *string, QRinput *input, QRencodeMode hint);
+
+static int Split_eatNum(const char *string, QRinput *input,QRencodeMode hint)
+{
+	const char *p;
+	int ret;
+	int run;
+	int dif;
+	int ln;
+	QRencodeMode mode;
+
+	ln = QRspec_lengthIndicator(QR_MODE_NUM, input->version);
+
+	p = string;
+	while(isdigit(*p)) {
+		p++;
+	}
+	run = p - string;
+	mode = Split_identifyMode(p, hint);
+	if(mode == QR_MODE_8) {
+		dif = QRinput_estimateBitsModeNum(run) + 4 + ln
+			+ QRinput_estimateBitsMode8(1) /* + 4 + l8 */
+			- QRinput_estimateBitsMode8(run + 1) /* - 4 - l8 */;
+		if(dif > 0) {
+			return Split_eat8(string, input, hint);
+		}
+	}
+	if(mode == QR_MODE_AN) {
+		dif = QRinput_estimateBitsModeNum(run) + 4 + ln
+			+ QRinput_estimateBitsModeAn(1) /* + 4 + la */
+			- QRinput_estimateBitsModeAn(run + 1) /* - 4 - la */;
+		if(dif > 0) {
+			return Split_eatAn(string, input, hint);
+		}
+	}
+
+	ret = QRinput_append(input, QR_MODE_NUM, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_eatAn(const char *string, QRinput *input, QRencodeMode hint)
+{
+	const char *p, *q;
+	int ret;
+	int run;
+	int dif;
+	int la, ln;
+
+	la = QRspec_lengthIndicator(QR_MODE_AN, input->version);
+	ln = QRspec_lengthIndicator(QR_MODE_NUM, input->version);
+
+	p = string;
+	while(isalnum(*p)) {
+		if(isdigit(*p)) {
+			q = p;
+			while(isdigit(*q)) {
+				q++;
+			}
+			dif = QRinput_estimateBitsModeAn(p - string) /* + 4 + la */
+				+ QRinput_estimateBitsModeNum(q - p) + 4 + ln
+				+ (isalnum(*q)?(4 + ln):0)
+				- QRinput_estimateBitsModeAn(q - string) /* - 4 - la */;
+			if(dif < 0) {
+				break;
+			} else {
+				p = q;
+			}
+		} else {
+			p++;
+		}
+	}
+
+	run = p - string;
+
+	if(*p && !isalnum(*p)) {
+		dif = QRinput_estimateBitsModeAn(run) + 4 + la
+			+ QRinput_estimateBitsMode8(1) /* + 4 + l8 */
+			- QRinput_estimateBitsMode8(run + 1) /* - 4 - l8 */;
+		if(dif > 0) {
+			return Split_eat8(string, input, hint);
+		}
+	}
+
+	ret = QRinput_append(input, QR_MODE_AN, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_eatKanji(const char *string, QRinput *input, QRencodeMode hint)
+{
+	const char *p;
+	int ret;
+	int run;
+
+	p = string;
+	while(Split_identifyMode(p, hint) == QR_MODE_KANJI) {
+		p += 2;
+	}
+	run = p - string;
+	ret = QRinput_append(input, QR_MODE_KANJI, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_eat8(const char *string, QRinput *input, QRencodeMode hint)
+{
+	const char *p, *q;
+	QRencodeMode mode;
+	int ret;
+	int run;
+	int dif;
+	int la, ln, l8;
+	int swcost;
+
+	la = QRspec_lengthIndicator(QR_MODE_AN, input->version);
+	ln = QRspec_lengthIndicator(QR_MODE_NUM, input->version);
+	l8 = QRspec_lengthIndicator(QR_MODE_8, input->version);
+
+	p = string + 1;
+	while(*p != '\0') {
+		mode = Split_identifyMode(p, hint);
+		if(mode == QR_MODE_KANJI) {
+			break;
+		}
+		if(mode == QR_MODE_NUM) {
+			q = p;
+			while(isdigit(*q)) {
+				q++;
+			}
+			if(Split_identifyMode(q, hint) == QR_MODE_8) {
+				swcost = 4 + l8;
+			} else {
+				swcost = 0;
+			}
+			dif = QRinput_estimateBitsMode8(p - string) /* + 4 + l8 */
+				+ QRinput_estimateBitsModeNum(q - p) + 4 + ln
+				+ swcost
+				- QRinput_estimateBitsMode8(q - string) /* - 4 - l8 */;
+			if(dif < 0) {
+				break;
+			} else {
+				p = q;
+			}
+		} else if(mode == QR_MODE_AN) {
+			q = p;
+			while(isalnum(*q)) {
+				q++;
+			}
+			if(Split_identifyMode(q, hint) == QR_MODE_8) {
+				swcost = 4 + l8;
+			} else {
+				swcost = 0;
+			}
+			dif = QRinput_estimateBitsMode8(p - string) /* + 4 + l8 */
+				+ QRinput_estimateBitsModeAn(q - p) + 4 + la
+				+ swcost
+				- QRinput_estimateBitsMode8(q - string) /* - 4 - l8 */;
+			if(dif < 0) {
+				break;
+			} else {
+				p = q;
+			}
+		} else {
+			p++;
+		}
+	}
+
+	run = p - string;
+	ret = QRinput_append(input, QR_MODE_8, run, (unsigned char *)string);
+	if(ret < 0) return -1;
+
+	return run;
+}
+
+static int Split_splitString(const char *string, QRinput *input,
+		QRencodeMode hint)
+{
+	int length;
+	QRencodeMode mode;
+
+	if(*string == '\0') return 0;
+
+	mode = Split_identifyMode(string, hint);
+	if(mode == QR_MODE_NUM) {
+		length = Split_eatNum(string, input, hint);
+	} else if(mode == QR_MODE_AN) {
+		length = Split_eatAn(string, input, hint);
+	} else if(mode == QR_MODE_KANJI && hint == QR_MODE_KANJI) {
+		length = Split_eatKanji(string, input, hint);
+	} else {
+		length = Split_eat8(string, input, hint);
+	}
+	if(length == 0) return 0;
+	if(length < 0) return -1;
+	return Split_splitString(&string[length], input, hint);
+}
+
+static char *dupAndToUpper(const char *str, QRencodeMode hint)
+{
+	char *newstr, *p;
+	QRencodeMode mode;
+
+	newstr = strdup(str);
+	if(newstr == NULL) return NULL;
+
+	p = newstr;
+	while(*p != '\0') {
+		mode = Split_identifyMode(p, hint);
+		if(mode == QR_MODE_KANJI) {
+			p += 2;
+		} else {
+			if (*p >= 'a' && *p <= 'z') {
+				*p = (char)((int)*p - 32);
+			}
+			p++;
+		}
+	}
+
+	return newstr;
+}
+
+int Split_splitStringToQRinput(const char *string, QRinput *input,
+		QRencodeMode hint, int casesensitive)
+{
+	char *newstr;
+	int ret;
+
+	if(string == NULL || *string == '\0') {
+		errno = EINVAL;
+		return -1;
+	}
+	if(!casesensitive) {
+		newstr = dupAndToUpper(string, hint);
+		if(newstr == NULL) return -1;
+		ret = Split_splitString(newstr, input, hint);
+		free(newstr);
+	} else {
+		ret = Split_splitString(string, input, hint);
+	}
+
+	return ret;
+}
diff --git a/apps/eink-advanced/writetext.c b/apps/eink-advanced/writetext.c
index 28c78d46cf912ae67603df34da240e7a1445c67a..2c4370e0df106c9b66083c124d0d922f366bbcad 100644
--- a/apps/eink-advanced/writetext.c
+++ b/apps/eink-advanced/writetext.c
@@ -56,4 +56,31 @@ void writeText(char text[])
         }
     }
 }
+
+void writeText(char text[])
+{
+    int numberOfCharacters = strlen(text);
+    //uint8_t offset = 0;//used to prevent word wrapping
+
+    //loop over each character to be written
+    for(int i = 0; i < numberOfCharacters; i++)
+    {
+        char find = text[i];//character to write
+        char *bitmap = font8x8_basic[find];//bitmap of that character
+        uint8_t line =  ((i) / 50);//which line to write it on
+
+        //write each row of the character pixels into the picture
+        for(int j = 0; j < 8; j++)
+        {
+            int index = (i) + (50 * j) + (line * 50 * 8);//index of screen to place it
+
+            if(index < 15000)//make sure nothing is written beyond the array in memory
+            {
+                //each chunk of 8 pixels is written right to left, so we need to reverse it first
+                screen[index] = reverse(bitmap[j]);
+            }
+        }
+        
+    }
+}
 */
\ No newline at end of file

From cbba902e3b9592c6468fb03587a31e0860f5d78f Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Thu, 23 Jun 2016 21:22:01 -0400
Subject: [PATCH] Combined eink-advanced with service-example. Turning the led
 on also activates the eink display

---
 apps/eink-advanced/Makefile |   3 +
 apps/eink-advanced/main.c   | 224 +++++++++++++++++++++++++++++---------------
 2 files changed, 154 insertions(+), 73 deletions(-)

diff --git a/apps/eink-advanced/Makefile b/apps/eink-advanced/Makefile
index bbe06def0a20563e062fa43298788cfef497bae4..49743904feee4e7cda8b3092265314e963a5b05e 100644
--- a/apps/eink-advanced/Makefile
+++ b/apps/eink-advanced/Makefile
@@ -10,6 +10,9 @@ APPLICATION_SRCS += app_error.c
 APPLICATION_SRCS += app_gpiote.c
 APPLICATION_SRCS += led.c
 
+APPLICATION_SRCS += simple_ble.c
+APPLICATION_SRCS += simple_adv.c
+
 APPLICATION_SRCS += nrf_drv_spi.c
 APPLICATION_SRCS += nrf_drv_common.c
 APPLICATION_SRCS += nrf_drv_gpiote.c
diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 245d222bc633d9ccec4e0a41bc5c096c4a2cbd93..94a10bc91b9463c66937d0c74fbe4e95f6818b3b 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -13,11 +13,76 @@
 #include "math.h"
 #include <string.h>
 #include "board.h"
+
+//qrcode + text
 #include "font8x8_basic.h"
 #include "qrencode.h"
 
-// Need pin number for LED
+// Nordic libraries
+#include "ble_advdata.h"
+
+// nrf5x-base libraries
+#include "simple_ble.h"
+#include "simple_adv.h"
+#include "led.h"
+#include "device_info_service.h"
+
+// Define constants about this beacon.
+#define DEVICE_NAME "QRcodedisp"
+
+// LED pin number
 #define LED0 18
+
+// Intervals for advertising and connections
+static simple_ble_config_t ble_config = {
+    .platform_id       = 0x00,              // used as 4th octect in device BLE address
+    .device_id         = DEVICE_ID_DEFAULT,
+    .adv_name          = DEVICE_NAME,       // used in advertisements if there is room
+    .adv_interval      = MSEC_TO_UNITS(500, UNIT_0_625_MS),
+    .min_conn_interval = MSEC_TO_UNITS(500, UNIT_1_25_MS),
+    .max_conn_interval = MSEC_TO_UNITS(1000, UNIT_1_25_MS)
+};
+
+// service and characteristic handles
+//  UUID created by `uuidgen -r`
+//  16-bit short uuid is 0x890f (bytes 12 and 13 of 128-bit UUID)
+static simple_ble_service_t led_service = {
+    .uuid128 = {{0x41, 0xa6, 0xab, 0x05, 0xb5, 0x7c, 0x4f, 0xd4,
+                 0x89, 0x30, 0x4f, 0xff, 0xa4, 0x4a, 0x28, 0xe5}}
+};
+static simple_ble_char_t led_on_char = {.uuid16 = 0xa410};
+static simple_ble_char_t led_off_char = {.uuid16 = 0xa411};
+static simple_ble_char_t led_state_char = {.uuid16 = 0xa412};
+
+
+static uint8_t led_on_value = 0;
+static uint8_t led_off_value = 0;
+static uint8_t led_state_value = 0;
+
+// called automatically by simple_ble_init
+void services_init (void) {
+    // add led service
+    simple_ble_add_service(&led_service);
+
+    // add led_on characteristic
+    simple_ble_add_characteristic(0, 1, 0, 0, // read, write, notify, vlen
+            1, (uint8_t*)&led_on_value,
+            &led_service, &led_on_char);
+
+    // add led_off characteristic
+    simple_ble_add_characteristic(0, 1, 0, 0, // read, write, notify, vlen
+            1, (uint8_t*)&led_off_value,
+            &led_service, &led_off_char);
+
+    // add led_state characteristic
+    simple_ble_add_characteristic(1, 0, 1, 0, // read, write, notify, vlen
+            1, (uint8_t*)&led_state_value,
+            &led_service, &led_state_char);
+}
+
+
+// Need pin number for LED
+//#define LED0 18
 #define LED1 19
 #define LED2 20
 
@@ -27,9 +92,6 @@
 
 static nrf_drv_spi_t _spi = NRF_DRV_SPI_INSTANCE(SPI_INSTANCE);
 
-
-
-
 static void spi_init () {
     uint32_t err;
 
@@ -493,7 +555,7 @@ void insertBigPixelGrid(int width, int height, uint8_t grid[height][width], int
     }
 }
 
-//write a qr code to the screen
+//write a qr code to the screen. Can handle up to 52 characters
 void writeQRcode(char *str)
 {
     QRcode *qrcode;
@@ -524,52 +586,11 @@ void writeQRcode(char *str)
 
 }
 
-int main(void) 
+//update display
+uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
+uint8_t rx[256] = {0};
+void updateDisplay()
 {
-    led_init(LED0);
-    
-    led_off(LED0);
-
-    clearScreen();
-
-    writeQRcode("Branden is dumb");
-    //writeStringAtLocation("Testing", 0, 0, 5);
-
-    //write the string "Hello" at x=0 y=0 and scale of 20x
-    //writeStringAtLocation("Yo", 0, 0, 9);
-
-    // Setup input for busy
-    nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
-
-    // Assert ENABLE
-    nrf_gpio_cfg_output(nTC_EN);
-    nrf_gpio_pin_clear(nTC_EN);
-
-    // Need to wait 6.5 ms per datasheet (section 5.5)
-    // Up that a little to be safe and who cares about a couple ms
-    nrf_delay_ms(10);
-
-    // Setup SPI
-    spi_init();
-
-    uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
-    uint8_t rx[256] = {0};
-
-    // Get device id to check that we can comm with this display
-    // Send the command
-    nrf_drv_spi_transfer(&_spi, tx, 4, NULL, 0);
-
-    // Wait until no longer busy
-    wait_for_not_busy();
-
-    // Receive response
-    nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 28);
-
-    // Not sure, sometimes busy signal, sometimes not?
-    // Just wait for a hot sec for now
-    nrf_delay_ms(1);
-
-
     uint8_t pic[255];
 
     // Setup spi comm header
@@ -609,27 +630,6 @@ int main(void)
 
     uint8_t i;
 
-    // // display a pattern
-    // pic[3] = 250;
-    // // pic[3] = 150;
-    // for (i=4; i<254; i++) {
-    //     if (i % 2 == 0) {
-    //         pic[i] = 0x80;
-    //     } else {
-    //         pic[i] = 0x0C;
-    //     }
-    //     // pic[i] = i;
-    // }
-    //
-    // // Display a lot more
-    // for (i=0; i<30; i++) {
-    //     nrf_drv_spi_transfer(&_spi, pic, 254, NULL, 0);
-    //     wait_for_not_busy();
-    //     nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
-    //     wait_for_not_busy();
-    // }
-
-
     // display an image
     pic[3] = 250;
     for (i=0; i<60; i++) {
@@ -655,10 +655,88 @@ int main(void)
 
 
     nrf_gpio_pin_set(nTC_EN);
-    
+    nrf_delay_ms(1000);
+}
+
+//set up led and spi
+void init()
+{
+    clearScreen();
+
+    led_init(LED0);
+    led_off(LED0);
+
+    // Setup input for busy
+    nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
+
+    // Assert ENABLE
+    nrf_gpio_cfg_output(nTC_EN);
+    nrf_gpio_pin_clear(nTC_EN);
+
+    // Need to wait 6.5 ms per datasheet (section 5.5)
+    // Up that a little to be safe and who cares about a couple ms
+    nrf_delay_ms(10);
+
+    // Setup SPI
+    spi_init();
+
+    //uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
+    //uint8_t rx[256] = {0};
+
+    // Get device id to check that we can comm with this display
+    // Send the command
+    nrf_drv_spi_transfer(&_spi, tx, 4, NULL, 0);
+
+    // Wait until no longer busy
+    wait_for_not_busy();
+
+    // Receive response
+    nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 28);
+
+    // Not sure, sometimes busy signal, sometimes not?
+    // Just wait for a hot sec for now
+    nrf_delay_ms(1);
+}
+
+
+void ble_evt_write(ble_evt_t* p_ble_evt) {
+
+    if (simple_ble_is_char_event(p_ble_evt, &led_on_char)) {
+        // user wrote to led_on characteristic
+        led_on(LED0);
+
+        // update led state and notify
+        led_state_value = 1;
+        simple_ble_notify_char(&led_state_char);
+
+        writeStringAtLocation("Successfully received", 0, 0, 2);
+        updateDisplay();
+
+    } else if (simple_ble_is_char_event(p_ble_evt, &led_off_char)) {
+        // user wrote to led_off characteristic
+        led_off(LED0);
+
+        // update led state and notify
+        led_state_value = 0;
+        simple_ble_notify_char(&led_state_char);
+
+        updateDisplay();
+    }
+}
+
+int main(void) 
+{
+    //set up the led, spi, and bluetooth
+    init();
+
+    //write to the screen array and then update the display
+    //writeQRcode("Branden is dumb");
+
+    simple_ble_init(&ble_config);
+    simple_adv_only_name();
+
     // Enter main loop.
     while (1) {
         sd_app_evt_wait();
     }
-
 }

From d3fbf8584925cf88ab2d5e17f86cb8c3f3a05d2f Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Fri, 24 Jun 2016 15:37:51 -0400
Subject: [PATCH] turn display on and off over ble

---
 apps/eink-advanced/main.c | 34 ++++++++++++++++++++++++----------
 1 file changed, 24 insertions(+), 10 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 94a10bc91b9463c66937d0c74fbe4e95f6818b3b..b0ded5b40fa9b6cca92925577d95607b32ca8e27 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -111,7 +111,7 @@ static void spi_init () {
 
 static void wait_for_not_busy () {
     uint8_t found_busy_low = 0;
-    uint16_t count = 0;
+    int count = 0;
     while (1) {
         uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
         if (found_busy_low && pin) {
@@ -124,7 +124,7 @@ static void wait_for_not_busy () {
         if(!found_busy_low)
         {
             count++;
-            if(count > 1000)
+            if(count > 10)
             {
                 break;
             }
@@ -590,7 +590,15 @@ void writeQRcode(char *str)
 uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
 uint8_t rx[256] = {0};
 void updateDisplay()
-{
+{   
+    memset(rx, 0, 256 * sizeof(uint8_t));
+    tx[0] = 0x30;
+    tx[1] = 0x01;
+    tx[2] = 0x01;
+    tx[3] = 0x00;
+    tx[4] = 0x00;
+    tx[5] = 0x00;
+
     uint8_t pic[255];
 
     // Setup spi comm header
@@ -621,9 +629,8 @@ void updateDisplay()
     pic[19] = 0;
 
     // Send header
-    //THESE 2 LINES SCREW EVERYTHING UP AND IT FREEZES
     nrf_drv_spi_transfer(&_spi, pic, 20, NULL, 0);
-    wait_for_not_busy();
+    wait_for_not_busy();//THIS LINE FRICKEN MESSES EVERYTHING UP
 
     nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
     wait_for_not_busy();
@@ -655,7 +662,6 @@ void updateDisplay()
 
 
     nrf_gpio_pin_set(nTC_EN);
-    nrf_delay_ms(1000);
 }
 
 //set up led and spi
@@ -703,23 +709,24 @@ void ble_evt_write(ble_evt_t* p_ble_evt) {
 
     if (simple_ble_is_char_event(p_ble_evt, &led_on_char)) {
         // user wrote to led_on characteristic
-        led_on(LED0);
+        //led_on(LED0);
 
         // update led state and notify
         led_state_value = 1;
         simple_ble_notify_char(&led_state_char);
 
-        writeStringAtLocation("Successfully received", 0, 0, 2);
+        writeStringAtLocation("LED Success", 0, 0, 2);
         updateDisplay();
 
     } else if (simple_ble_is_char_event(p_ble_evt, &led_off_char)) {
         // user wrote to led_off characteristic
-        led_off(LED0);
+        //led_off(LED0);
 
         // update led state and notify
         led_state_value = 0;
         simple_ble_notify_char(&led_state_char);
 
+        clearScreen();
         updateDisplay();
     }
 }
@@ -730,13 +737,20 @@ int main(void)
     init();
 
     //write to the screen array and then update the display
-    //writeQRcode("Branden is dumb");
+    writeQRcode("http://eecs.umich.edu");
+    updateDisplay();
 
     simple_ble_init(&ble_config);
     simple_adv_only_name();
 
+    //writeStringAtLocation("Booted up", 0, 0, 2);
+    //updateDisplay();
+
+    //led_on(LED0);
+
     // Enter main loop.
     while (1) {
         sd_app_evt_wait();
+        //power_manage();
     }
 }

From d93a0e3eb34dc6be4bb293338111a742b7db7257 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Mon, 27 Jun 2016 15:54:56 -0400
Subject: [PATCH] display text sent over bluetooth

---
 apps/eink-advanced/main.c | 52 ++++++++++-------------------------------------
 1 file changed, 11 insertions(+), 41 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index b0ded5b40fa9b6cca92925577d95607b32ca8e27..50158a4f9645093607b84c18c7460ef182ddadbf 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -50,34 +50,21 @@ static simple_ble_service_t led_service = {
     .uuid128 = {{0x41, 0xa6, 0xab, 0x05, 0xb5, 0x7c, 0x4f, 0xd4,
                  0x89, 0x30, 0x4f, 0xff, 0xa4, 0x4a, 0x28, 0xe5}}
 };
-static simple_ble_char_t led_on_char = {.uuid16 = 0xa410};
-static simple_ble_char_t led_off_char = {.uuid16 = 0xa411};
-static simple_ble_char_t led_state_char = {.uuid16 = 0xa412};
 
+static simple_ble_char_t test_string_char = {.uuid16 = 0xa410};
+static char test_string_value[256] = {0};
 
 static uint8_t led_on_value = 0;
-static uint8_t led_off_value = 0;
-static uint8_t led_state_value = 0;
 
 // called automatically by simple_ble_init
 void services_init (void) {
     // add led service
     simple_ble_add_service(&led_service);
 
-    // add led_on characteristic
-    simple_ble_add_characteristic(0, 1, 0, 0, // read, write, notify, vlen
-            1, (uint8_t*)&led_on_value,
-            &led_service, &led_on_char);
-
-    // add led_off characteristic
-    simple_ble_add_characteristic(0, 1, 0, 0, // read, write, notify, vlen
-            1, (uint8_t*)&led_off_value,
-            &led_service, &led_off_char);
-
-    // add led_state characteristic
-    simple_ble_add_characteristic(1, 0, 1, 0, // read, write, notify, vlen
-            1, (uint8_t*)&led_state_value,
-            &led_service, &led_state_char);
+    //add string
+    simple_ble_add_characteristic(0, 1, 0, 0,
+            256, (char*)&test_string_value,
+            &led_service, &test_string_char);
 }
 
 
@@ -582,7 +569,7 @@ void writeQRcode(char *str)
         grid[x][y] = (*qrcode).data[i] & 1;
     }
     
-    insertBigPixelGrid(width, width, grid, 0, 0);
+    insertBigPixelGrid(width, width, grid, 10, 10);
 
 }
 
@@ -707,26 +694,9 @@ void init()
 
 void ble_evt_write(ble_evt_t* p_ble_evt) {
 
-    if (simple_ble_is_char_event(p_ble_evt, &led_on_char)) {
-        // user wrote to led_on characteristic
-        //led_on(LED0);
-
-        // update led state and notify
-        led_state_value = 1;
-        simple_ble_notify_char(&led_state_char);
-
-        writeStringAtLocation("LED Success", 0, 0, 2);
-        updateDisplay();
-
-    } else if (simple_ble_is_char_event(p_ble_evt, &led_off_char)) {
-        // user wrote to led_off characteristic
-        //led_off(LED0);
+    if (simple_ble_is_char_event(p_ble_evt, &test_string_char)) {
 
-        // update led state and notify
-        led_state_value = 0;
-        simple_ble_notify_char(&led_state_char);
-
-        clearScreen();
+        writeStringAtLocation(test_string_value, 0, 0, 2);
         updateDisplay();
     }
 }
@@ -737,8 +707,8 @@ int main(void)
     init();
 
     //write to the screen array and then update the display
-    writeQRcode("http://eecs.umich.edu");
-    updateDisplay();
+    //writeQRcode("http://eecs.umich.edu");
+    //updateDisplay();
 
     simple_ble_init(&ble_config);
     simple_adv_only_name();

From e5bf011176e47d3e2d57181b2349a55f5893def3 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Mon, 27 Jun 2016 22:23:23 -0400
Subject: [PATCH] write text @ (x,y) + scale + qrcode over ble. Added
 send_ble_data.js

---
 apps/eink-advanced/loopmain.c       | 605 ------------------------------------
 apps/eink-advanced/main.c           |  94 +++++-
 apps/eink-advanced/qrcode.c         |  65 ----
 apps/eink-advanced/send_ble_data.js |  50 +++
 4 files changed, 134 insertions(+), 680 deletions(-)

diff --git a/apps/eink-advanced/loopmain.c b/apps/eink-advanced/loopmain.c
deleted file mode 100644
index 4448d2f7623f4496b8fcbe785eff8126acb5015f..0000000000000000000000000000000000000000
--- a/apps/eink-advanced/loopmain.c
+++ /dev/null
@@ -1,605 +0,0 @@
-/* Blink with simple timer
- */
-/*
-#include <stdbool.h>
-#include <stdint.h>
-#include "led.h"
-#include "nordic_common.h"
-#include "softdevice_handler.h"
-#include "nrf_drv_spi.h"
-#include "nrf_delay.h"
-#include "app_gpiote.h"
-#include "app_util_platform.h"
-#include "math.h"
-#include <string.h>
-
-#include "board.h"
-
-//font
-#include "font8x8_basic.h"
-
-// Need pin number for LED
-#define LED0 18
-#define LED1 19
-#define LED2 20
-
-#define nTC_EN   24 // B3 on Atum Breakout
-#define nTC_BUSY 23 // B4 on Atum Breakout
-#define nTC_CS   22 // B5 on Atum Breakout
-
-static nrf_drv_spi_t _spi = NRF_DRV_SPI_INSTANCE(SPI_INSTANCE);
-
-
-
-
-static void spi_init () {
-    uint32_t err;
-
-    nrf_drv_spi_config_t spi_config = NRF_DRV_SPI_DEFAULT_CONFIG(SPI_INSTANCE);
-    // Datasheet says we can do 3 MHz, but 4 also seems to work.
-    spi_config.frequency = NRF_DRV_SPI_FREQ_4M;
-    // We do need CS pin
-    spi_config.ss_pin = nTC_CS;
-    // Datasheet claims we need CPOL=1 CPHA=1.
-    // However, I did not get that to work. MODE 2 does seem to work.
-    spi_config.mode = NRF_DRV_SPI_MODE_2;
-
-    // We want blocking mode
-    err = nrf_drv_spi_init(&_spi, &spi_config, NULL);
-    APP_ERROR_CHECK(err);
-}
-
-static void wait_for_not_busy () {
-    uint8_t found_busy_low = 0;
-    uint8_t count = 0;
-    while (1) {
-        uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
-        if (found_busy_low && pin) {
-            break;
-        }
-        if (pin == 0) {
-            found_busy_low = 1;
-        }
-
-        if(count > 1000)
-        {
-            break;
-        }
-
-        count++;
-    }
-
-    // Then wait a little longer so we don't violate the T_NS time.
-    nrf_delay_us(5);
-}
-
-uint8_t lab11[15000] = {
-255,253,255,255,255,255,255,255,251,127,255,255,127,255,255,253,0,0,9,127,255,127,255,111,127,127,247,191,255,255,255,255,255,255,255,255,255,255,255,191,255,192,0,0,0,0,0,0,0,0,
-255,183,175,91,250,181,106,170,173,182,247,251,171,118,255,190,170,74,164,55,245,213,117,181,213,213,93,106,255,255,251,182,219,109,182,182,182,239,189,245,111,128,0,0,0,0,0,0,0,0,
-253,253,255,255,111,255,255,255,238,255,127,190,223,223,187,253,0,0,18,253,190,182,223,251,110,190,239,219,127,255,111,255,254,254,255,255,239,186,235,111,253,128,0,0,0,0,0,0,0,0,
-255,183,86,175,250,214,182,182,181,91,237,239,235,123,255,221,42,149,73,55,235,219,183,93,181,213,245,118,191,253,254,213,171,183,213,170,189,239,189,187,183,192,0,0,0,0,0,0,0,0,
-251,254,255,251,223,255,239,255,255,190,191,255,119,254,239,125,0,32,18,94,253,125,221,246,222,251,95,223,223,255,255,255,255,253,255,255,247,125,107,110,255,192,0,0,0,0,0,0,0,0,
-255,123,215,190,234,181,189,213,213,91,250,253,218,183,191,237,82,20,137,63,175,171,107,127,107,87,254,250,239,247,237,221,118,175,109,109,189,175,254,219,221,192,0,0,0,0,0,0,0,0,
-247,239,127,247,191,255,247,127,127,239,191,255,247,253,253,253,0,128,68,181,245,118,221,173,246,221,87,223,187,255,255,255,223,251,191,251,239,250,171,190,247,224,0,0,0,0,0,0,0,0,
-253,255,214,190,238,222,222,237,212,182,221,119,122,175,183,221,36,18,33,63,95,187,119,119,187,182,250,247,247,255,190,237,251,110,246,174,186,175,246,235,191,96,0,0,0,0,0,0,0,0,
-247,181,127,239,251,247,187,191,123,175,247,191,222,254,255,250,0,64,136,159,245,110,218,218,238,219,87,93,109,255,251,255,111,187,255,255,247,250,173,189,237,224,0,0,0,0,0,0,0,0,
-255,255,215,187,95,189,255,245,222,235,111,127,251,87,221,185,73,10,37,85,191,219,183,183,191,109,221,247,223,255,255,191,253,239,86,218,222,175,251,107,127,240,0,0,0,0,0,0,0,0,
-238,215,123,255,246,239,182,222,235,91,255,174,255,189,255,244,0,0,136,95,234,237,109,109,109,246,182,173,117,255,255,245,183,125,255,247,251,250,174,223,219,176,0,0,0,0,0,0,0,0,
-251,251,215,182,191,187,127,107,93,181,86,255,218,215,111,180,144,82,33,47,127,119,187,222,247,127,219,223,187,255,125,223,255,215,118,190,222,223,247,181,127,248,0,0,0,0,0,0,0,0,
-239,174,255,255,214,255,213,255,255,237,255,203,255,239,254,241,2,0,136,151,219,173,221,117,173,173,237,117,109,247,247,255,219,127,223,235,247,118,186,239,214,240,0,0,0,0,0,0,0,0,
-255,247,171,186,255,214,191,191,255,250,214,247,191,118,219,232,32,136,34,78,254,251,107,174,246,246,190,219,219,255,255,251,127,245,117,190,221,221,223,90,255,216,0,0,0,0,0,0,0,0,
-237,90,247,223,182,253,247,254,235,119,127,187,237,219,255,209,4,2,132,175,215,174,222,247,91,91,215,173,109,255,255,191,251,95,223,119,251,119,106,255,182,252,0,0,0,0,0,0,0,0,
-255,247,189,253,255,183,254,251,254,221,181,253,255,253,255,224,32,80,16,87,125,251,117,173,237,237,122,247,183,254,255,253,239,251,125,253,111,221,255,170,255,248,0,0,0,0,0,0,0,0,
-215,91,235,95,90,239,191,239,187,235,111,214,239,107,110,201,2,4,69,43,247,93,175,118,182,183,173,186,219,239,238,247,191,239,239,175,253,247,85,247,171,110,0,0,0,0,0,0,0,0,
-255,215,127,235,247,190,251,191,255,126,253,253,125,253,255,192,32,16,16,151,223,247,250,219,219,218,214,215,127,255,255,255,253,125,123,251,111,93,254,173,255,252,0,0,0,0,0,0,0,0,
-215,127,181,254,222,251,255,255,109,223,183,111,127,246,191,169,4,130,66,75,250,186,175,182,189,111,123,109,171,255,191,255,247,239,221,111,219,247,85,255,90,222,0,0,0,0,0,0,0,0,
-255,214,251,239,247,111,221,187,255,117,221,251,191,191,123,192,64,16,8,85,111,239,218,221,235,181,174,218,254,255,246,221,223,253,247,253,190,189,255,85,255,254,0,0,0,0,0,0,0,0,
-221,127,127,246,189,255,255,255,255,254,255,110,219,253,223,169,9,4,33,41,251,122,237,183,93,222,245,239,87,255,255,255,255,119,93,175,247,239,170,239,107,122,0,0,0,0,0,0,0,0,
-247,237,181,187,238,190,246,219,109,175,87,251,191,239,127,128,0,72,132,69,175,223,119,122,238,181,175,90,255,254,239,255,125,255,255,250,221,186,255,123,191,223,0,0,0,0,0,0,0,0,
-191,254,255,251,187,255,223,255,255,251,253,111,214,255,223,168,73,0,16,42,253,117,221,215,181,219,122,237,187,255,253,183,239,221,181,111,119,239,213,173,237,254,0,0,0,0,0,0,0,0,
-238,219,245,238,253,239,127,111,219,126,175,254,223,221,237,194,0,36,65,20,95,223,118,189,110,238,215,119,127,255,247,253,255,255,255,251,254,251,126,247,127,111,0,0,0,0,0,0,0,0,
-191,254,255,253,215,125,253,251,127,219,251,127,235,255,247,160,73,1,4,75,117,247,219,235,187,91,187,173,239,251,255,247,251,118,213,174,215,95,215,93,171,253,0,0,0,0,0,0,0,0,
-247,187,235,255,238,223,255,223,254,253,95,182,183,127,127,145,0,36,17,33,95,93,126,189,214,246,221,118,251,255,254,223,111,255,255,253,253,245,123,239,254,183,128,0,0,0,0,0,0,0,
-190,254,255,181,127,127,110,247,239,215,250,255,253,247,237,196,18,128,64,21,53,247,213,214,189,173,182,219,191,255,247,255,255,255,109,95,87,191,221,117,91,255,0,0,0,0,0,0,0,0,
-239,239,107,255,219,183,255,254,251,125,111,222,215,255,255,160,64,20,5,73,111,93,127,123,235,251,107,182,247,255,255,246,251,109,255,245,253,237,119,175,238,239,128,0,0,0,0,0,0,0,
-187,251,127,253,127,253,246,219,255,239,255,239,253,110,251,161,9,65,16,18,187,247,213,173,94,174,253,223,255,239,251,127,223,255,237,191,183,119,221,250,187,191,128,0,0,0,0,0,0,0,
-239,125,119,183,173,95,127,255,189,251,123,119,118,255,223,200,0,4,65,68,93,125,127,119,245,219,171,117,223,255,191,223,123,191,191,237,237,221,119,95,239,251,128,0,0,0,0,0,0,0,
-189,239,125,255,255,247,254,214,247,183,223,223,223,95,254,160,74,80,4,18,175,215,213,221,95,109,118,223,247,255,255,251,239,237,253,187,127,127,221,234,189,111,192,0,0,0,0,0,0,0,
-239,253,111,254,171,190,219,255,255,253,253,247,250,187,255,194,0,2,128,73,90,253,126,238,234,223,175,187,127,255,253,254,253,191,247,239,219,213,118,189,239,254,192,0,0,0,0,0,0,0,
-189,191,123,251,255,219,255,251,189,223,111,187,255,223,119,168,82,160,18,4,87,87,215,117,189,181,122,255,223,255,255,183,183,254,255,123,118,255,223,215,123,119,192,0,0,0,0,0,0,0,
-247,245,63,223,182,247,254,222,247,247,254,255,111,107,255,193,0,8,128,162,174,254,237,190,215,123,223,174,251,251,254,255,255,119,221,238,223,173,186,251,221,223,192,0,0,0,0,0,0,0,
-223,222,235,255,255,222,219,251,255,127,183,237,253,215,223,160,74,66,18,8,91,171,187,213,251,214,181,251,255,255,223,251,125,253,255,251,245,247,239,93,119,253,192,0,0,0,0,0,0,0,
-250,254,63,254,238,247,255,191,187,221,255,125,247,250,255,201,0,16,64,34,183,126,238,239,86,189,238,191,191,255,255,239,247,223,183,111,95,93,123,239,222,247,192,0,0,0,0,0,0,64,
-191,246,182,247,251,251,255,246,255,255,221,247,255,109,253,208,34,136,9,9,45,215,187,117,187,215,91,219,247,255,254,255,222,246,255,253,246,247,173,90,247,191,192,0,0,0,0,0,8,0,
-239,190,61,255,223,189,182,255,221,183,127,222,223,246,191,194,8,34,64,32,191,122,253,190,237,122,246,254,255,223,255,255,127,191,253,223,189,222,255,247,93,255,64,0,0,0,0,0,0,0,
-251,246,87,223,255,239,255,182,255,255,247,127,253,255,119,232,65,8,5,5,43,215,175,213,183,175,175,87,127,117,191,251,253,237,223,123,219,187,213,93,247,183,192,0,0,0,0,0,0,0,
-191,124,61,253,253,250,251,255,219,123,191,250,223,187,191,193,8,32,144,65,61,122,245,127,109,117,117,253,215,255,255,191,247,191,119,254,254,254,255,247,94,255,192,0,0,0,0,0,0,0,
-247,238,22,255,183,191,223,219,127,222,251,239,183,254,223,232,34,2,2,20,151,223,127,213,222,223,187,111,253,222,214,254,223,251,253,219,183,171,173,93,247,221,128,0,0,0,0,0,0,0,
-254,252,159,247,255,253,126,255,253,255,238,255,254,239,235,228,128,168,32,128,93,106,213,126,245,234,214,255,247,251,255,247,254,223,111,255,253,254,251,239,125,255,192,0,0,0,0,0,128,0,
-223,222,42,191,254,239,251,247,183,187,191,189,187,255,95,208,10,0,136,5,43,253,255,215,91,93,189,223,255,127,123,127,255,247,255,109,175,111,174,187,175,111,128,0,0,0,0,0,0,0,
-251,244,15,255,187,254,239,222,255,255,251,247,223,253,245,234,32,68,2,160,30,215,85,122,239,182,235,254,255,239,223,222,239,189,187,255,251,245,251,221,251,253,128,0,0,0,0,0,0,0,
-222,253,77,94,255,223,191,255,254,222,239,255,239,95,239,224,130,16,32,9,75,250,255,223,186,239,94,255,255,255,245,191,253,255,239,182,222,191,94,238,175,127,128,0,0,0,0,0,0,0,
-255,188,7,255,255,251,254,251,219,251,253,190,253,255,186,234,8,129,4,160,46,175,85,106,215,90,247,187,221,246,255,239,191,235,126,255,247,213,247,119,251,239,128,0,0,0,0,0,0,0,
-239,232,166,175,237,191,95,239,255,239,223,239,175,109,255,240,0,8,16,4,151,251,239,255,125,247,187,255,255,191,222,182,247,191,247,219,126,255,93,221,110,255,0,0,0,0,0,0,0,0,
-189,252,11,251,255,253,247,127,119,127,253,255,247,251,253,233,37,65,1,80,21,93,91,85,214,173,110,255,247,255,255,251,254,251,127,127,219,181,247,183,251,187,128,0,0,0,0,0,0,0,
-255,184,129,175,255,239,239,253,255,253,247,187,125,191,239,240,0,8,68,0,79,247,125,254,251,119,183,255,127,251,247,223,255,255,213,251,127,255,126,253,95,255,0,0,0,0,0,32,0,0,
-247,248,37,251,187,127,187,255,255,183,191,255,239,237,191,245,37,33,16,169,26,187,171,87,86,221,127,251,253,255,126,250,255,237,127,223,237,85,215,175,246,239,0,0,0,0,64,0,0,0,
-222,232,65,94,255,238,254,223,182,255,254,239,122,255,255,112,0,0,0,128,23,237,222,251,251,183,219,255,239,111,255,237,247,255,239,123,191,255,122,245,95,191,0,0,0,191,191,133,32,0,
-255,248,20,235,254,255,247,253,255,255,255,255,255,182,255,244,148,137,74,84,157,126,181,174,174,237,127,255,191,255,237,254,191,191,189,254,251,187,223,95,246,255,0,0,43,106,239,248,0,8,
-247,176,33,127,119,247,253,223,255,221,183,187,109,255,223,242,2,32,16,130,55,171,223,251,219,187,223,247,254,219,191,254,255,251,239,215,238,238,245,245,127,254,0,9,43,174,182,254,146,0,
-190,248,8,109,223,191,222,255,109,255,254,239,247,91,253,244,36,2,133,84,186,253,106,174,246,222,255,127,255,255,255,183,95,255,123,127,127,251,191,95,215,251,0,66,174,251,255,255,212,128,
-255,240,10,63,191,255,251,119,255,247,251,189,189,255,111,232,130,128,81,34,111,175,221,219,187,107,191,255,127,222,253,254,191,255,239,251,237,191,107,246,253,190,0,8,123,174,221,191,229,0,
-215,208,34,171,239,237,255,255,247,125,42,171,118,173,255,224,20,10,132,170,245,117,118,190,223,254,251,255,251,251,239,247,91,255,253,190,255,237,253,93,183,254,0,2,221,251,183,247,248,192,
-253,240,2,157,251,127,255,127,125,146,148,170,149,119,223,234,6,64,34,85,190,255,187,235,234,171,239,219,255,111,255,123,111,222,247,239,182,255,175,247,255,252,2,175,246,174,255,255,253,48,
-215,176,1,87,173,255,253,223,210,0,34,73,117,191,127,208,78,5,73,74,213,170,214,183,127,255,127,255,183,253,251,221,191,255,253,123,255,181,245,93,111,254,2,189,191,251,219,126,254,16,
-223,224,0,94,255,251,247,245,0,87,173,170,222,171,239,193,12,17,5,43,251,255,123,93,213,85,255,253,254,223,127,247,75,255,223,222,219,255,127,239,254,236,63,255,210,173,109,191,127,172,
-183,240,2,43,182,191,255,186,86,221,123,255,183,237,127,212,45,4,82,75,86,170,221,238,255,255,255,111,223,247,238,187,183,127,251,119,254,219,213,117,191,253,255,255,255,215,87,239,223,212,
-254,224,0,23,255,223,127,213,83,107,221,87,251,182,223,192,12,66,9,43,253,223,235,91,218,173,255,251,123,125,191,253,173,255,255,222,219,255,127,191,247,255,119,255,127,125,253,187,247,244,
-175,192,0,69,91,127,253,106,169,21,119,253,110,213,251,82,92,17,36,175,86,245,94,237,127,255,109,191,239,222,247,87,215,191,237,183,255,187,237,234,223,223,255,253,255,255,111,239,191,252,
-255,224,0,3,239,215,247,182,173,239,189,95,251,237,95,164,26,132,130,47,251,95,245,183,246,215,255,237,93,251,221,221,117,255,127,250,219,255,123,127,255,127,255,119,247,255,253,189,255,254,
-173,192,8,20,255,123,253,85,254,189,223,246,222,182,239,80,152,18,42,175,221,234,175,109,127,253,255,255,255,111,111,127,170,191,254,223,254,219,239,171,125,255,255,255,253,247,255,247,251,255,
-255,192,0,2,171,254,251,127,247,239,106,219,251,213,189,138,58,68,4,191,246,189,250,219,187,119,246,183,213,223,181,219,223,95,251,181,87,255,122,255,255,255,255,255,223,95,255,254,255,255,
-223,64,0,9,127,219,253,191,212,187,255,255,111,173,255,100,180,18,170,191,253,215,95,189,255,223,223,253,127,117,126,254,233,239,255,254,254,221,223,173,247,255,255,191,255,251,251,123,239,127,
-251,192,0,33,117,255,186,246,171,247,106,181,253,214,215,170,240,136,10,247,254,237,234,235,95,255,255,175,173,175,219,127,246,191,254,215,91,247,253,255,191,255,255,255,245,182,239,239,191,239,
-255,192,0,0,190,254,254,158,173,109,255,255,183,107,123,105,244,4,165,93,255,95,127,189,254,255,250,250,247,250,237,191,189,171,255,251,239,127,183,86,255,255,255,255,255,223,127,255,255,255,
-191,128,0,4,95,111,245,235,119,191,181,109,255,181,223,183,224,162,21,255,127,234,213,215,95,254,223,223,93,87,95,238,254,223,127,94,187,218,255,255,255,247,255,254,222,251,191,255,127,251,
-247,132,144,1,23,191,254,169,173,106,255,254,170,215,117,239,212,8,149,171,223,127,190,251,239,219,246,234,255,237,107,255,247,107,255,247,87,127,238,173,255,255,238,255,255,238,239,255,251,223,
-255,182,170,0,94,255,245,86,85,183,90,183,255,170,223,118,232,34,75,253,123,213,107,173,127,255,189,191,213,90,191,255,253,174,255,187,253,235,191,255,255,255,255,255,255,127,251,183,239,255,
-223,169,85,160,39,223,191,85,85,90,255,250,170,215,245,221,164,136,46,175,223,251,254,247,175,254,235,234,191,109,221,221,255,247,255,237,86,190,247,251,191,255,255,183,255,251,191,255,191,255,
-253,170,146,160,23,247,253,181,84,165,86,175,255,74,175,247,210,2,159,245,119,254,171,189,251,123,183,127,245,182,127,127,175,173,255,127,251,251,221,191,255,255,186,250,191,255,245,223,255,247,
-255,73,41,92,75,191,253,109,171,85,91,246,170,174,254,173,105,84,90,191,173,251,254,239,111,238,223,170,175,95,255,255,235,250,255,234,173,95,127,255,255,254,255,223,213,221,255,127,255,223,
-239,36,68,5,11,237,255,91,117,85,45,175,125,91,85,255,180,161,63,234,251,126,171,187,191,255,253,239,253,235,251,127,116,189,191,255,255,109,215,255,255,223,247,118,238,191,95,239,251,255,
-254,145,1,82,167,191,253,174,223,108,165,122,223,95,175,106,213,42,85,127,86,223,254,238,251,245,182,189,127,55,254,223,254,182,239,237,85,191,125,237,255,123,221,223,187,235,255,187,255,255,
-254,4,40,0,162,253,255,233,247,246,150,215,122,246,218,223,250,149,127,213,213,95,87,191,239,191,255,255,237,223,215,253,215,85,191,127,254,235,239,191,255,255,254,245,255,191,219,238,247,247,
-220,161,2,74,29,239,255,253,26,221,171,111,239,223,107,125,173,73,237,190,72,165,250,251,127,238,171,106,187,95,234,255,250,214,247,251,107,189,187,255,255,255,107,191,93,245,127,255,223,125,
-253,20,72,32,166,255,123,111,213,191,106,218,190,171,181,111,250,165,127,234,162,19,239,239,254,253,254,191,221,109,63,239,109,234,223,255,254,235,239,255,251,253,255,109,247,127,237,246,253,247,
-248,64,17,2,21,221,255,253,250,235,219,239,249,117,85,85,191,43,213,122,17,68,245,127,255,219,183,234,171,191,171,125,250,181,255,237,183,190,191,255,255,247,251,255,187,223,191,127,255,239,
-237,9,66,72,75,127,250,247,111,190,245,127,214,218,170,186,213,167,255,213,68,8,63,221,219,254,237,191,253,106,95,255,173,94,191,255,253,235,251,127,255,223,222,246,239,251,247,255,123,189,
-248,66,8,0,37,239,255,47,223,235,190,219,114,165,73,79,123,94,255,232,128,34,189,127,255,87,191,234,218,223,111,182,246,181,255,255,111,126,223,255,255,255,247,187,253,111,127,183,223,239,
-186,40,66,73,22,255,253,177,122,189,235,127,200,4,170,245,173,175,255,165,17,0,15,255,254,253,246,189,109,186,187,255,90,173,93,247,255,219,127,255,254,255,126,239,91,255,254,255,253,187,
-241,2,40,0,138,183,253,93,79,247,95,239,82,85,85,26,234,255,170,168,64,20,174,239,247,214,187,85,170,223,79,85,214,175,239,255,251,255,239,239,251,255,235,189,255,189,255,254,255,238,
-244,169,2,74,37,223,254,214,160,93,234,123,128,42,170,205,191,85,251,170,136,64,3,191,221,255,213,106,85,85,61,246,171,85,127,238,223,109,191,191,239,254,222,247,173,239,223,255,238,187,
-226,4,168,16,18,117,253,82,223,86,181,174,169,118,213,102,213,110,174,164,34,4,171,255,127,90,173,170,165,90,175,218,217,175,191,235,255,255,255,255,255,251,187,190,255,123,127,255,255,239,
-233,82,5,65,73,191,127,174,169,171,221,91,0,218,182,181,181,187,213,82,128,32,5,255,255,246,214,213,84,164,45,181,86,234,239,229,253,251,125,255,255,254,254,247,237,239,237,255,255,253,
-212,73,80,8,4,174,254,213,182,180,107,92,149,165,21,85,219,110,190,136,41,9,34,247,246,218,187,106,137,1,47,237,106,95,253,242,95,223,247,255,255,215,219,255,255,253,191,255,255,87,
-210,164,74,162,82,191,127,106,85,187,93,90,82,168,170,213,125,187,234,165,64,128,20,127,255,173,221,170,66,84,5,118,171,107,119,248,159,255,255,255,255,123,127,214,255,87,255,255,255,255,
-202,85,32,8,129,87,191,170,149,86,182,218,69,146,2,170,234,222,189,16,21,42,65,63,251,118,235,72,40,0,82,171,90,189,255,234,71,255,223,255,251,239,235,255,183,253,109,255,255,253,
-169,42,149,162,20,93,223,213,74,171,171,105,86,72,144,86,191,87,245,74,164,128,138,191,222,219,93,34,129,33,5,90,173,86,255,121,33,126,255,255,239,189,127,125,253,127,255,255,255,255,
-213,82,170,17,33,43,255,237,81,42,213,170,169,85,4,21,87,122,218,65,18,90,32,31,251,234,170,144,4,4,8,170,171,175,187,250,148,251,255,255,255,247,239,175,223,239,255,255,255,251,
-170,170,169,74,8,173,111,117,76,149,85,107,86,180,82,130,187,175,237,42,168,129,5,79,254,171,117,74,64,144,34,10,174,222,255,249,74,47,255,255,254,255,219,251,119,255,255,255,254,255,
-170,173,85,84,165,47,191,250,162,64,170,173,42,234,168,65,93,221,116,137,2,40,144,87,239,90,170,32,18,0,129,69,83,119,191,238,33,95,255,255,255,221,254,255,223,127,255,255,255,255,
-181,213,66,34,160,157,111,237,42,182,85,181,91,85,85,40,171,119,170,84,168,132,66,151,186,173,170,137,0,2,4,82,173,221,238,253,85,15,255,255,251,255,191,221,255,255,255,255,255,255,
-214,169,40,149,45,87,250,255,170,72,148,170,170,218,165,146,79,221,180,138,164,18,40,35,253,246,212,64,72,144,0,129,85,119,223,253,84,163,255,255,255,183,247,119,123,255,255,255,255,255,
-187,84,66,2,82,46,175,90,233,36,86,170,171,85,94,160,42,246,210,85,18,133,65,21,247,93,106,148,2,0,16,41,85,221,255,189,82,85,15,255,255,254,253,253,239,255,255,255,255,255,
-214,161,8,84,137,171,253,239,173,170,169,165,41,171,91,84,151,219,105,42,169,81,16,137,221,247,168,1,32,8,130,68,170,119,109,253,107,84,163,255,253,191,223,175,255,255,255,255,255,127,
-250,72,33,1,36,175,247,186,181,82,149,85,85,85,106,208,18,237,72,170,160,10,164,36,255,221,82,164,8,128,0,18,85,95,247,246,221,168,17,255,255,255,246,255,127,255,255,255,253,255,
-170,130,0,18,74,87,191,109,74,170,170,41,5,42,170,181,11,181,162,85,66,5,66,74,254,254,169,8,128,16,8,9,42,186,223,221,234,66,132,127,237,255,127,247,255,255,191,255,255,255,
-244,40,146,64,145,47,251,246,209,85,69,68,170,148,149,92,74,250,9,90,144,1,48,2,123,247,68,64,18,2,64,148,173,87,251,254,181,16,34,191,255,251,251,125,255,251,251,255,255,95,
-210,128,0,10,4,19,109,187,42,170,40,18,64,66,37,110,10,214,164,171,1,64,202,169,63,221,41,18,64,64,0,2,171,191,111,183,208,68,136,191,255,255,221,223,255,239,255,191,182,255,
-169,34,73,32,169,69,255,236,139,85,66,129,21,16,74,181,69,117,18,189,84,40,40,2,191,253,68,64,0,0,2,32,173,171,187,253,85,0,2,31,239,255,247,255,255,127,254,254,239,127,
-212,8,0,2,0,16,181,90,170,168,144,40,64,132,1,47,2,212,65,82,33,2,178,80,159,238,169,9,18,36,32,4,86,221,238,239,80,36,40,167,255,255,125,239,253,254,215,251,89,183,
-82,160,34,72,85,69,127,235,86,165,4,130,10,16,148,82,164,213,21,105,72,64,25,10,79,250,68,32,0,128,128,129,37,235,123,250,165,0,130,23,255,255,215,191,247,251,250,181,86,223,
-164,4,128,1,0,16,42,181,42,144,80,16,32,0,0,149,65,84,69,149,37,42,68,80,151,253,41,0,128,0,2,18,85,119,182,238,168,72,8,137,255,245,255,255,255,238,173,237,82,191,
-82,160,18,84,42,133,85,182,149,74,5,65,0,130,2,43,68,169,18,82,146,128,130,132,79,218,172,136,18,4,0,0,43,186,255,189,81,1,32,82,255,223,191,255,127,187,214,210,74,175,
-136,18,0,0,0,32,46,237,90,161,80,8,8,16,80,10,145,84,74,169,74,84,41,41,39,245,87,0,0,32,8,17,10,223,170,250,164,32,5,5,127,254,255,127,237,253,119,41,37,117,
-82,136,146,65,73,18,151,84,149,20,2,32,128,0,2,82,160,82,170,148,169,66,132,80,147,250,161,210,64,0,128,128,74,181,255,109,73,4,16,32,191,255,255,253,255,106,170,132,16,175,
-68,66,0,8,0,64,21,186,85,66,168,130,2,2,8,9,69,42,37,69,85,40,82,138,11,234,136,160,4,128,0,4,37,126,170,245,160,64,129,20,95,247,253,247,213,253,172,80,139,174,
-33,16,82,32,73,9,10,213,42,168,0,8,32,72,65,37,32,84,145,42,162,5,8,32,161,245,36,88,0,4,4,17,2,215,127,90,74,16,42,66,31,255,255,255,251,170,177,2,36,174,
-138,69,0,130,0,32,69,81,85,5,85,32,0,0,4,1,82,34,74,146,168,168,66,41,11,234,146,45,32,0,16,64,41,93,213,235,32,132,128,144,143,255,255,95,110,234,200,72,22,157,
-32,16,84,8,146,4,19,86,170,80,0,1,4,0,32,148,161,40,36,74,160,5,16,128,72,213,85,68,4,32,64,2,2,239,126,180,148,16,42,10,7,223,253,255,213,109,82,1,81,88,
-21,66,2,160,0,144,133,86,149,37,36,132,0,9,2,2,148,149,18,34,66,34,68,84,34,234,191,170,144,129,0,8,145,85,171,107,65,2,129,80,67,255,255,253,183,170,136,144,77,58,
-64,17,84,5,36,2,1,170,180,136,64,32,32,128,8,73,80,66,65,10,144,16,129,1,9,212,246,240,64,4,1,32,5,111,219,81,84,72,42,37,17,239,253,255,106,211,80,2,146,113,
-42,72,145,16,0,136,36,181,85,81,18,0,0,0,32,2,69,40,8,73,64,132,18,68,68,169,113,187,0,1,189,65,32,186,237,234,128,2,145,84,160,255,255,251,170,174,2,40,80,228,
-64,132,36,65,40,32,1,85,84,132,64,146,4,2,2,73,48,146,130,10,84,17,64,144,16,210,170,76,146,38,162,168,2,223,118,165,82,72,68,171,4,191,245,254,235,169,72,130,139,200,
-18,34,128,8,66,1,8,174,170,81,8,0,32,32,8,0,165,36,32,73,32,4,10,1,5,82,89,85,64,0,0,20,144,118,219,85,8,18,18,172,144,255,255,255,169,84,2,21,35,130,
-68,144,33,37,0,160,32,115,105,36,66,64,128,128,64,146,80,136,137,5,73,33,64,128,80,100,139,82,136,18,164,5,5,95,234,194,161,33,77,33,4,31,239,253,85,73,40,72,15,32,
-16,69,20,73,84,4,130,29,170,137,16,8,0,2,2,1,74,162,0,36,160,8,20,18,5,65,33,66,64,132,72,2,64,183,189,89,4,10,40,148,81,95,255,255,170,160,65,32,172,9,
-69,18,66,37,33,64,0,174,170,80,68,128,4,0,16,72,81,16,144,10,148,165,65,0,32,168,72,21,64,17,181,32,146,125,214,196,160,161,162,2,132,39,255,253,165,21,4,132,26,32,
-16,169,41,170,172,17,8,30,213,5,16,18,32,8,65,2,148,170,4,130,80,0,16,4,138,69,5,66,144,69,90,132,64,159,251,82,8,13,72,84,80,143,255,255,84,128,34,17,112,132,
-69,10,148,170,82,132,1,10,104,168,65,0,0,64,4,8,73,8,64,41,74,21,4,64,0,160,80,1,66,18,247,65,18,110,237,74,129,42,1,19,2,35,255,253,170,84,128,0,160,1,
-16,169,86,17,0,64,64,85,165,18,8,32,129,1,0,65,37,82,36,0,160,128,144,17,42,84,2,74,0,69,11,104,0,59,250,164,32,104,36,73,80,9,255,254,164,128,16,133,68,36,
-5,86,169,72,146,16,18,10,212,160,161,4,8,0,17,4,169,73,9,5,20,36,1,4,0,129,32,1,65,10,41,165,73,47,223,82,10,144,129,32,132,128,255,254,145,21,4,34,1,1,
-81,106,34,2,4,66,64,43,170,138,4,0,0,0,4,16,37,40,160,64,169,9,68,0,36,84,8,149,8,33,22,248,0,63,250,136,129,66,42,132,64,37,127,251,84,64,64,8,136,16,
-6,149,72,72,80,136,1,13,209,32,144,72,128,36,128,65,82,164,9,8,132,16,16,73,2,128,128,4,33,0,170,170,169,31,238,164,21,36,65,1,41,0,255,253,82,17,1,2,0,4,
-34,64,2,1,4,0,16,38,170,138,1,0,17,0,16,4,36,146,160,32,80,133,64,0,40,168,17,42,128,68,2,186,0,87,187,82,0,9,10,32,128,21,63,245,73,234,16,72,0,145,
-8,42,168,164,73,34,68,11,164,181,80,18,0,0,2,0,146,164,10,2,74,16,2,72,130,66,64,18,10,1,40,40,73,47,253,136,72,128,72,0,72,128,127,245,47,93,64,0,34,0,
-69,0,2,9,16,8,1,34,211,85,170,64,64,8,64,170,74,145,64,136,36,5,8,0,8,144,2,72,32,132,0,129,0,63,238,165,0,41,41,66,32,18,191,237,84,3,164,129,0,10,
-16,170,169,32,66,64,144,5,137,0,85,4,4,129,21,85,37,84,18,33,72,72,64,137,34,132,8,42,2,16,66,8,40,151,226,144,42,128,16,16,132,128,31,245,88,128,248,16,2,237,
-66,1,4,10,8,34,4,146,164,164,42,208,128,16,85,34,170,161,64,0,18,2,2,0,0,161,32,144,144,64,8,32,130,63,72,133,0,18,162,128,80,9,95,218,162,42,21,2,11,183,
-20,172,178,145,65,8,16,1,170,9,5,34,16,69,82,0,146,168,20,137,72,40,72,36,136,136,0,40,4,0,32,2,16,87,128,80,72,128,8,36,34,64,31,234,84,144,136,0,37,8,
-1,18,144,4,16,128,64,149,69,82,80,136,2,2,128,72,74,162,129,32,4,2,0,128,2,64,2,145,17,2,0,128,68,93,85,5,2,32,161,0,136,10,159,234,210,213,82,72,4,65,
-84,73,74,169,68,0,2,1,144,170,170,81,64,16,42,130,42,148,84,4,161,16,146,18,80,146,72,68,0,72,66,9,1,47,0,164,168,8,72,168,34,128,47,181,85,254,64,0,145,42,
-0,133,64,68,1,34,8,74,170,151,213,68,9,69,85,84,146,201,0,144,20,10,0,0,4,128,2,160,20,0,8,0,40,54,36,17,0,130,34,2,20,37,7,213,43,251,186,128,10,170,
-18,42,160,16,136,0,64,1,66,127,125,82,64,1,46,233,42,165,84,2,72,128,84,146,64,164,146,32,1,1,0,18,66,153,2,164,68,32,144,168,32,0,87,234,151,173,196,34,85,43,
-64,16,137,2,32,8,2,73,148,44,182,148,0,42,251,244,149,84,170,208,34,21,1,33,18,64,2,136,72,144,0,0,8,36,16,137,16,8,4,0,21,74,135,85,75,181,49,0,36,174,
-4,138,32,72,130,128,144,2,162,154,164,162,146,65,21,62,37,75,83,11,168,0,84,148,64,146,36,80,4,2,32,68,160,146,5,80,65,2,17,82,64,0,83,234,33,90,20,129,43,251,
-16,32,128,2,0,0,2,72,148,74,88,20,0,20,45,80,149,145,173,192,80,149,35,85,18,64,130,130,17,32,1,0,4,68,66,37,4,0,64,0,20,170,163,169,72,171,74,32,133,223,
-64,20,82,169,36,36,72,2,209,18,212,66,64,128,170,164,10,173,103,69,68,0,145,226,128,146,9,80,128,8,0,18,65,17,21,72,32,72,2,73,0,1,85,213,4,16,161,68,90,183,
-2,73,0,4,0,1,1,40,138,64,34,145,0,37,41,16,43,69,125,106,168,18,70,169,84,64,34,42,34,68,136,0,16,66,13,34,130,0,0,16,21,85,89,180,162,132,10,17,11,91,
-16,18,84,161,73,32,36,1,97,9,16,4,4,128,4,0,133,178,151,181,2,65,53,51,1,17,4,144,136,0,0,36,133,0,21,72,16,2,73,36,64,12,53,213,40,33,0,128,68,175,
-64,73,64,20,0,8,128,164,148,32,64,2,64,0,64,32,11,84,219,84,168,8,151,245,80,68,18,74,85,5,0,128,32,73,29,37,68,72,0,1,9,106,116,234,130,4,37,73,0,17,
-4,5,42,128,164,130,20,1,81,2,4,136,1,34,0,130,38,234,42,162,0,2,85,170,138,128,137,33,0,16,66,4,137,0,90,144,16,0,4,148,5,90,106,180,80,144,0,32,145,68,
-16,36,160,42,0,32,1,84,164,8,16,2,144,0,4,0,7,122,161,89,82,72,10,84,65,34,36,132,0,65,16,16,0,72,58,165,66,33,32,0,1,119,210,213,4,0,21,4,64,0,
-65,2,149,0,148,137,82,1,73,64,64,72,0,136,16,1,37,127,95,237,0,1,81,34,44,72,26,64,1,0,64,66,85,2,117,80,16,132,2,85,10,191,37,106,161,68,128,161,4,146,
-4,41,80,84,32,16,8,32,160,1,1,1,34,0,64,8,11,93,245,118,160,4,173,17,74,128,107,32,68,1,9,0,0,64,253,74,68,0,72,0,0,145,87,186,20,16,10,18,80,0,
-32,2,74,2,132,133,66,138,149,32,4,18,0,66,0,0,134,191,223,217,4,128,175,234,180,81,45,169,0,0,64,18,66,9,85,32,0,34,2,149,2,111,253,212,160,0,33,64,128,36,
-9,72,160,16,65,32,40,0,164,4,0,4,129,16,0,66,43,87,107,84,0,16,171,223,253,32,28,170,16,8,36,128,16,129,122,170,146,128,168,72,32,189,182,181,9,0,8,146,36,128,
-64,2,85,69,20,21,149,36,169,16,32,64,36,0,0,0,6,171,181,32,64,0,45,125,232,128,86,41,74,161,16,18,68,4,42,144,0,10,5,18,132,2,169,20,160,65,5,4,144,9,
-42,72,168,2,66,170,112,129,68,64,129,10,128,64,2,8,173,84,168,130,9,2,19,219,116,105,21,5,106,168,66,64,2,37,109,85,82,32,81,68,0,0,4,170,68,4,18,80,64,32,
-0,2,36,145,16,191,42,40,169,0,0,0,1,9,16,0,6,213,68,16,0,32,64,87,162,144,42,0,4,174,144,9,32,136,180,72,0,138,225,82,144,146,64,21,16,0,9,66,4,128,
-85,40,152,4,138,83,200,130,82,8,4,42,164,0,0,2,95,85,34,128,128,0,2,40,144,100,138,192,0,39,1,32,10,2,22,165,36,35,82,138,66,0,18,170,130,32,42,8,160,4,
-32,66,85,34,39,61,37,40,168,128,16,130,0,68,0,32,13,84,144,36,17,9,8,4,10,162,42,168,33,24,72,0,128,57,90,144,128,149,149,42,0,8,0,10,80,1,17,64,16,0,
-69,17,42,9,8,234,80,2,68,34,64,20,129,16,64,130,79,170,68,128,0,32,0,145,81,116,10,146,148,193,0,132,41,72,21,42,2,90,252,94,128,32,146,74,132,136,36,128,162,2,
-16,68,172,128,165,36,138,168,170,128,5,66,68,66,4,0,46,213,17,18,68,0,32,0,4,177,82,164,85,40,34,0,128,41,74,132,144,47,209,116,4,0,0,37,32,0,18,34,8,32,
-73,34,84,34,21,82,32,66,36,16,16,85,1,8,144,9,31,180,132,64,0,132,132,165,82,252,10,146,9,64,0,18,20,81,21,81,1,2,34,216,0,4,148,138,146,36,149,136,161,0,
-37,89,109,8,161,40,138,152,169,66,137,32,128,32,64,32,95,210,80,9,16,0,0,0,9,117,33,72,165,1,8,64,74,41,150,148,72,168,143,224,16,128,1,38,160,128,4,162,136,9,
-74,172,148,128,10,2,34,82,36,8,32,133,9,4,36,130,31,106,5,32,0,32,17,18,85,250,20,84,40,4,0,1,28,146,10,162,2,2,85,65,0,17,36,3,74,18,80,84,65,64,
-42,246,174,4,160,160,10,168,169,65,18,80,32,17,0,0,191,213,80,68,132,132,64,64,5,124,66,19,68,64,33,4,74,65,170,148,160,169,110,136,2,0,1,81,144,128,5,18,36,0,
-92,237,34,80,21,9,85,98,20,40,132,74,129,64,42,36,61,178,5,16,16,0,2,9,85,252,8,128,16,0,4,17,53,146,75,72,21,18,180,0,8,68,148,10,197,42,144,68,128,170,
-39,180,154,1,84,181,109,144,162,132,81,42,0,8,128,130,191,216,160,1,0,0,8,32,23,253,18,32,129,17,0,4,119,64,139,165,66,74,146,64,32,0,1,69,162,64,1,0,42,0,
-81,74,73,0,43,110,182,68,25,34,0,137,66,162,20,16,127,101,20,164,34,36,64,133,74,252,0,132,4,0,32,73,127,4,111,168,41,55,104,4,129,18,80,16,200,149,84,17,0,81,
-45,33,44,73,93,221,216,145,74,73,74,37,8,0,10,133,127,216,128,0,0,0,2,16,23,253,40,0,32,0,4,33,239,161,83,210,132,168,0,16,0,0,5,69,64,170,169,0,84,8,
-74,148,181,0,11,117,36,4,20,16,16,146,162,136,160,32,255,101,42,145,16,128,8,65,37,254,2,16,128,65,17,10,247,4,175,106,81,34,146,64,8,68,160,18,196,109,85,74,161,68,
-32,66,218,2,85,146,72,161,42,130,149,73,84,34,5,74,253,216,128,4,2,18,32,8,23,253,40,64,4,4,0,165,223,65,87,244,132,136,0,0,1,0,9,8,160,41,21,85,90,17,
-74,151,116,0,0,0,17,8,10,72,30,170,0,0,40,1,247,213,42,80,72,0,1,34,149,254,0,0,0,0,74,18,254,80,167,180,81,34,68,9,32,17,32,69,81,42,0,170,171,164,
-36,45,208,145,4,73,64,33,86,32,135,85,81,9,81,85,255,106,64,1,0,8,128,0,75,239,81,2,32,34,17,75,215,36,85,250,132,72,16,128,0,0,10,32,160,20,128,0,5,0,
-181,187,106,0,32,0,4,132,43,66,5,170,132,85,64,3,183,213,42,132,32,128,18,74,23,190,132,8,2,0,136,33,126,65,39,117,41,2,130,34,4,132,160,149,100,150,128,0,5,72,
-86,254,128,2,0,0,16,17,23,16,34,170,170,170,130,43,254,250,144,32,4,17,0,0,151,255,64,32,8,20,82,139,235,40,143,220,132,80,16,0,64,16,9,2,80,37,40,0,21,2,
-191,210,64,32,2,18,66,132,171,164,18,162,85,85,8,15,187,170,164,129,32,64,36,148,75,255,164,0,64,66,128,37,126,146,166,246,82,5,65,36,0,2,68,80,177,10,213,0,148,0,
-213,80,18,0,136,64,0,32,21,161,9,90,16,168,0,175,255,250,144,20,2,4,128,1,23,123,200,128,0,16,36,146,235,8,143,219,36,160,4,1,18,64,145,10,116,66,84,171,80,73,
-90,170,64,8,0,1,41,10,167,212,68,165,2,166,68,29,221,110,202,128,144,16,9,36,79,223,208,34,2,74,128,9,237,36,141,253,72,21,32,64,0,20,4,65,56,41,82,84,170,2,
-38,128,1,33,0,4,0,64,74,233,18,168,170,80,17,95,255,251,96,34,1,2,32,17,43,245,234,136,33,0,9,83,247,10,47,110,146,128,65,9,32,129,81,42,93,4,169,5,64,128,
-145,41,36,0,18,32,34,21,37,244,72,85,0,149,0,63,247,173,189,8,36,32,130,68,151,95,245,32,136,80,32,5,186,197,27,187,72,85,8,0,4,8,4,1,58,162,10,82,146,21,
-36,66,0,64,64,0,128,128,149,90,133,84,148,168,74,255,191,247,213,64,128,4,8,18,93,251,170,138,18,4,130,81,223,146,94,239,101,0,65,36,144,161,34,168,189,20,161,8,64,0,
-73,16,146,9,0,130,8,36,75,253,36,149,66,160,0,251,255,94,253,84,8,128,65,73,87,127,237,100,161,32,0,9,234,201,63,191,180,169,16,0,2,4,16,5,90,161,4,2,20,149,
-2,68,64,0,0,8,2,17,21,110,162,74,173,2,75,255,245,251,239,170,162,34,10,37,91,238,178,146,8,0,18,82,245,116,189,254,213,4,68,146,64,16,138,160,95,72,32,72,128,0,
-84,18,18,144,4,0,72,132,75,255,169,36,144,72,1,254,223,95,186,213,21,17,81,182,238,255,213,84,162,9,0,33,239,186,255,255,234,161,0,0,20,128,32,21,117,82,129,0,84,168,
-1,65,64,2,16,0,0,33,42,191,212,146,36,1,47,239,251,238,255,181,106,170,78,171,123,254,213,74,8,64,34,137,185,121,255,255,186,84,34,33,0,37,10,128,47,164,40,5,0,0,
-84,20,8,136,0,130,74,136,75,238,233,8,129,72,7,255,239,127,255,250,171,85,85,253,175,255,170,81,64,0,0,34,254,219,255,123,234,129,8,132,36,128,64,42,189,209,2,32,37,80,
-34,129,34,0,64,16,0,34,42,255,180,64,16,0,175,191,123,187,238,223,117,170,175,87,118,253,169,74,18,17,17,8,251,117,255,254,253,84,64,0,0,9,21,1,95,164,160,8,128,0,
-72,84,64,34,0,0,146,8,149,187,122,18,0,2,30,255,254,255,191,235,187,90,245,254,221,247,85,40,128,128,4,69,237,187,255,223,213,73,36,146,82,64,64,170,119,233,8,130,21,64,
-37,1,20,128,2,2,0,162,75,255,250,128,66,72,123,253,219,254,255,190,239,237,175,255,247,191,170,165,36,4,64,16,190,223,253,247,253,80,128,0,0,9,20,1,95,232,64,16,130,0,
-144,84,64,8,136,16,40,8,150,247,253,36,0,1,111,255,254,239,254,255,189,110,255,247,189,253,82,168,0,32,1,37,123,107,239,189,182,138,36,137,37,32,1,85,255,245,2,2,41,64,
-74,1,9,2,0,64,130,130,43,222,254,128,0,0,191,239,255,253,255,251,255,219,235,127,247,239,85,37,82,0,20,2,221,190,255,255,237,81,2,32,0,4,180,10,187,250,72,0,68,128,
-33,84,32,32,0,4,8,40,150,255,254,82,36,149,247,255,246,255,247,255,109,125,191,255,253,253,170,144,0,132,128,16,255,219,255,110,250,164,144,2,72,145,66,191,239,189,32,146,18,0,
-168,0,132,136,130,17,33,4,87,223,251,128,0,1,223,127,255,181,127,255,255,239,255,253,223,254,169,74,146,16,0,133,121,111,253,255,219,66,36,136,2,10,85,109,191,254,136,0,164,128,
-69,82,16,2,16,64,8,82,150,255,255,84,128,38,247,247,253,255,254,247,189,189,223,239,253,251,85,32,0,0,36,0,110,186,247,251,253,84,128,33,32,82,219,191,253,253,165,84,66,160,
-168,4,66,64,1,4,162,0,95,255,254,208,18,21,191,255,255,255,255,255,239,119,253,255,255,125,74,149,80,129,0,18,186,223,255,190,238,136,42,0,8,155,237,255,255,190,82,2,145,0,
-82,161,8,18,68,16,8,170,173,247,251,85,32,171,127,251,253,186,239,251,127,255,191,255,255,246,170,72,4,16,0,64,105,117,254,247,187,82,128,137,34,110,223,127,255,235,169,84,10,176,
-40,20,66,64,0,2,130,2,191,255,127,84,149,85,171,253,255,255,190,255,237,111,239,191,255,189,85,34,144,64,36,2,58,159,127,222,221,72,82,32,1,191,251,251,222,244,138,32,160,146,
-42,129,16,9,33,36,40,169,111,223,245,187,107,166,255,187,191,238,251,245,183,255,191,253,254,245,90,144,2,2,0,8,154,123,255,255,110,162,128,4,170,251,255,255,251,222,80,136,5,72,
-18,84,69,32,8,0,130,21,191,255,221,85,85,85,239,255,255,127,255,254,238,239,127,255,247,213,106,69,80,8,0,128,93,173,127,255,245,180,42,65,43,255,255,253,239,250,138,34,73,42,
-25,34,16,5,64,148,17,86,251,127,237,170,213,75,251,253,255,255,238,251,255,223,223,255,255,85,85,16,2,64,66,1,13,95,191,221,222,210,129,21,173,223,191,223,125,237,80,136,4,146,
-12,148,132,168,36,2,170,173,175,255,90,215,119,111,191,255,239,254,253,189,173,254,247,127,255,85,88,68,144,0,8,8,38,181,127,255,251,249,42,85,219,254,247,126,255,85,4,32,162,73,
-22,81,34,83,82,169,42,187,255,255,237,89,85,150,253,254,255,247,255,254,253,127,95,255,253,82,181,16,4,18,0,32,15,94,255,255,254,170,81,86,255,255,255,255,191,118,162,0,9,4,
-13,74,85,85,85,45,85,214,253,255,86,173,235,79,223,255,255,223,238,173,219,189,255,247,253,41,104,66,160,128,0,0,147,171,95,255,255,245,77,127,237,253,239,255,253,169,16,137,36,82,
-31,106,171,173,218,171,111,125,191,255,218,183,109,189,127,223,223,127,255,254,238,251,91,127,233,5,101,8,2,0,65,2,3,181,191,255,127,221,86,223,191,223,123,111,191,180,68,32,1,4,
-11,173,189,246,239,183,187,239,247,189,170,213,174,155,247,255,255,255,251,175,123,222,255,255,252,170,208,66,72,17,4,0,19,222,223,253,251,126,181,251,255,254,255,254,254,209,17,0,148,17,
-14,246,239,127,245,221,222,253,191,255,245,171,107,55,223,127,253,255,255,214,222,245,250,223,242,19,138,40,0,0,0,32,64,235,127,247,255,247,223,239,251,223,109,171,245,164,0,4,32,68,
-23,187,187,215,91,247,119,255,238,254,75,95,221,189,255,255,191,255,246,255,247,95,239,254,200,138,161,2,72,132,0,130,10,250,175,255,215,221,127,191,191,247,126,255,250,160,164,144,137,1,
-7,239,255,255,255,127,251,190,255,245,172,221,107,63,109,253,255,251,255,234,189,247,255,255,210,86,20,72,0,16,18,16,0,255,87,255,253,255,246,255,247,219,175,223,188,148,0,0,64,16,
-19,125,253,253,87,255,191,251,223,221,91,93,239,109,191,255,223,255,255,247,239,127,127,191,40,41,65,1,32,1,109,239,73,125,183,253,183,87,223,255,223,255,126,251,254,34,73,2,20,68,
-15,239,183,239,254,238,253,239,247,254,181,123,221,94,239,219,251,255,191,255,95,215,255,254,162,148,20,80,2,191,255,127,244,190,219,255,251,255,255,239,123,251,215,191,242,136,0,36,128,1,
-21,191,255,190,191,251,255,255,255,181,95,189,119,114,191,175,127,127,255,251,247,127,254,255,72,105,1,4,75,119,109,254,255,255,87,255,214,189,183,191,239,255,239,221,221,33,84,8,33,8,
-23,254,254,255,254,255,239,255,223,251,174,215,93,106,254,245,223,255,251,255,93,254,255,249,37,68,84,17,127,253,255,255,255,255,90,250,251,247,255,254,219,255,190,255,233,20,0,0,132,32,
-45,191,221,238,191,123,254,247,255,252,189,255,247,75,95,251,255,255,255,255,254,255,247,254,146,169,0,139,221,223,183,247,191,255,109,255,223,191,255,107,127,191,255,182,210,129,36,130,16,2,
-23,247,127,251,253,255,191,255,246,219,94,245,237,38,222,188,247,255,255,255,119,253,255,244,73,2,85,127,127,247,255,190,247,247,86,255,255,238,215,255,219,251,239,255,84,32,0,16,0,64,
-46,223,247,95,127,119,251,255,127,245,251,254,245,93,235,223,125,253,255,127,255,255,255,235,84,169,43,255,246,191,182,255,255,191,171,95,254,255,255,246,191,255,253,218,161,9,16,64,130,8,
-53,254,253,247,223,191,127,251,253,93,119,255,85,45,247,175,175,247,255,255,255,255,255,212,146,85,127,187,255,251,255,221,239,255,106,255,255,187,189,255,237,223,247,247,84,64,66,2,16,2,
-87,255,183,110,253,247,255,255,245,254,251,189,126,251,186,255,127,255,255,253,255,255,246,170,170,151,238,254,219,191,118,247,254,255,173,191,251,255,255,190,191,255,238,221,34,18,0,8,0,144,
-125,189,253,191,111,93,119,247,254,175,215,254,213,117,187,46,190,191,127,255,255,255,187,85,74,254,255,247,255,237,219,94,183,253,182,255,255,255,251,251,250,239,255,245,72,128,41,32,68,0,
-215,255,110,219,254,238,254,255,213,215,255,249,255,107,221,125,247,234,239,255,255,253,218,170,95,223,255,255,218,191,239,245,255,255,213,171,254,247,191,127,191,255,255,244,132,84,128,0,0,68,
-46,253,246,222,191,107,191,247,111,251,159,111,245,175,87,245,255,127,255,255,255,111,106,181,251,125,247,123,119,246,186,191,174,239,171,247,255,255,255,239,247,255,223,234,41,0,0,2,17,1,
-91,254,221,191,253,181,253,255,187,125,127,243,254,214,245,239,255,191,191,255,255,251,246,255,255,247,223,223,223,223,255,219,251,254,221,93,255,191,255,126,255,191,255,169,64,68,146,72,64,16,
-111,187,247,246,255,222,223,254,223,237,191,247,63,191,254,239,127,255,255,251,255,255,95,223,239,255,254,254,255,125,86,190,175,255,215,235,255,251,255,247,255,255,253,82,21,16,0,0,0,4,
-93,253,109,95,250,181,251,237,174,253,203,215,222,221,191,95,223,91,251,255,255,239,254,255,127,191,251,251,255,254,239,239,253,127,213,108,251,127,223,253,191,239,255,72,128,66,72,0,4,145,
-247,247,251,254,239,219,255,254,255,187,235,222,171,239,255,235,125,190,223,255,255,125,251,247,254,255,111,255,255,247,186,189,223,255,238,213,95,255,255,215,251,255,244,164,85,8,1,36,64,4,
-93,91,182,251,254,239,119,181,123,245,122,221,247,183,239,87,253,255,255,255,255,255,239,127,255,255,255,255,255,255,255,255,246,255,181,182,191,255,255,255,127,191,90,17,0,65,32,0,0,66,
-174,253,255,191,255,93,255,239,223,235,157,93,191,125,190,185,251,174,191,255,191,191,255,239,251,247,191,255,255,255,255,247,255,223,238,218,171,255,255,255,223,255,161,68,85,18,8,0,18,16,
-85,183,170,255,235,235,222,219,119,238,239,118,214,214,234,254,183,191,255,255,254,247,125,255,223,191,255,255,251,126,246,223,127,127,235,106,221,255,255,255,255,250,148,17,0,64,65,34,64,74,
-187,123,255,255,255,119,123,235,215,174,231,187,110,219,85,223,87,87,247,255,255,255,255,253,254,255,255,247,191,239,191,253,255,255,117,170,182,223,255,255,247,235,33,4,85,9,0,0,1,0,
-101,239,239,247,125,223,191,95,117,237,251,126,189,229,253,167,223,234,255,254,255,255,239,191,247,255,255,222,234,187,247,119,247,255,238,181,219,111,255,255,255,84,72,64,0,64,8,0,4,80,
-154,189,191,223,247,254,255,247,251,253,238,175,190,122,247,90,237,123,219,255,255,239,253,255,127,255,253,255,255,238,221,255,222,251,250,86,181,187,255,255,245,73,18,18,170,18,33,17,16,4,
-197,239,255,127,255,187,182,190,252,250,238,239,245,189,46,189,191,93,255,255,253,255,127,237,237,255,239,253,254,255,255,223,255,223,240,43,110,238,170,181,90,164,160,64,0,128,128,0,1,80,
-37,123,255,255,222,254,253,253,223,109,91,242,250,175,175,235,127,207,250,251,191,255,255,127,255,253,191,111,247,219,119,255,125,127,248,53,245,189,218,74,74,18,18,9,42,40,4,0,36,64,
-5,222,255,255,255,239,247,251,239,63,93,253,235,215,181,126,187,247,255,255,247,255,239,247,255,191,255,250,191,255,254,255,255,255,240,30,174,246,173,85,37,73,72,0,0,130,64,72,129,0,
-37,55,191,254,251,255,250,247,181,215,219,190,181,110,126,221,254,250,250,255,255,251,253,191,127,255,255,223,238,238,223,247,239,239,248,43,219,187,116,144,144,164,128,165,82,8,17,0,8,8,
-2,165,91,255,255,253,174,191,190,237,247,239,186,189,255,189,247,250,255,127,255,239,255,253,251,255,255,255,251,255,251,189,255,191,252,54,237,237,170,74,85,18,42,0,0,65,0,2,37,32,
-4,82,111,255,235,255,191,94,235,246,191,123,191,251,247,235,254,254,125,253,191,255,254,223,255,253,246,245,175,111,254,255,123,251,220,27,91,117,106,161,8,169,0,18,169,8,72,16,0,0,
-16,4,47,239,119,247,107,222,188,251,109,255,175,247,191,253,119,251,127,255,247,255,119,255,239,191,223,191,253,251,123,247,255,254,252,23,182,214,180,138,82,4,168,128,4,33,1,0,168,2,
-0,128,46,191,190,222,255,223,215,231,175,175,241,107,221,190,255,239,175,127,255,125,253,187,255,255,255,254,223,95,239,253,223,251,254,29,223,107,82,65,36,169,2,21,80,132,16,34,2,72,
-0,17,23,255,255,125,249,183,123,175,83,255,254,175,127,247,191,247,181,255,255,247,223,255,255,255,253,219,247,245,127,223,127,127,252,22,181,181,169,40,146,68,80,64,2,0,66,8,160,0,
-4,0,93,254,239,255,247,181,215,223,189,127,127,223,254,239,215,173,223,190,251,255,255,255,253,255,247,255,253,127,251,251,253,255,223,15,218,214,169,5,9,41,4,4,168,36,8,130,8,0,
-16,128,31,223,119,90,214,255,255,61,253,125,223,235,251,251,239,125,126,255,239,191,239,111,119,237,255,183,111,221,191,110,247,254,254,10,183,90,210,80,80,66,81,32,0,129,32,40,65,36,
-0,9,95,187,238,239,110,250,254,247,255,159,255,122,183,222,245,245,255,255,191,254,255,255,255,191,255,239,253,239,255,251,191,251,251,15,218,170,164,138,133,16,0,10,170,16,4,130,0,1,
-0,0,29,223,191,251,189,255,94,191,231,253,111,223,223,127,254,215,55,223,255,247,253,255,221,255,223,189,255,182,237,174,251,255,239,10,182,213,81,32,80,138,170,64,0,69,80,40,148,148,
-2,32,95,247,253,247,219,239,186,246,245,223,254,247,223,245,245,239,223,255,255,191,223,254,247,246,255,255,183,255,255,251,239,255,255,15,107,86,132,10,10,64,0,41,82,0,2,128,0,0,
-16,0,62,175,251,221,247,255,237,239,246,175,127,125,239,191,239,247,222,254,255,255,255,251,254,191,247,247,254,251,254,190,191,255,191,5,186,170,169,65,65,42,169,2,8,170,73,42,74,164,
-0,4,159,255,247,254,247,187,245,251,221,235,253,219,187,235,221,127,91,255,254,255,255,239,219,251,254,254,223,239,251,239,255,125,250,142,213,85,66,20,42,0,4,80,162,1,36,0,128,1,
-0,128,63,191,127,255,175,255,237,126,251,253,190,251,253,255,127,181,127,255,247,255,250,191,127,223,111,239,255,191,191,251,123,239,251,11,109,170,168,129,0,170,161,4,8,72,146,170,42,168,
-2,0,189,223,239,191,95,223,183,123,222,255,239,110,255,127,255,253,235,255,223,254,165,125,237,251,255,253,247,255,247,95,223,255,237,205,181,85,34,40,170,0,72,82,161,21,32,0,128,2,
-16,8,63,255,222,254,235,251,239,159,191,190,251,223,255,253,119,190,255,127,255,170,148,27,255,127,187,191,190,255,127,251,127,255,251,75,85,84,136,2,0,170,18,0,8,68,138,170,36,136,
-0,1,117,255,239,253,250,255,191,239,251,251,239,251,223,171,253,239,255,253,84,81,66,143,91,238,254,246,255,255,239,255,255,255,245,173,170,170,162,144,170,1,68,170,165,40,80,0,0,0,
-0,32,246,175,235,255,253,255,217,242,254,247,254,239,255,255,239,255,170,165,82,138,40,47,254,255,239,255,251,251,189,183,247,127,249,22,214,164,144,4,1,72,17,17,17,69,5,81,16,32,
-17,2,251,255,255,251,222,126,182,191,223,247,255,191,255,235,250,164,84,72,136,32,129,5,219,187,255,111,255,255,255,254,255,255,250,75,90,149,68,161,84,18,136,74,74,32,160,0,2,0,
-0,1,237,247,250,247,183,158,255,251,119,223,253,239,111,255,85,82,130,146,34,136,16,39,126,239,123,250,223,223,255,251,255,255,249,37,101,82,34,8,2,128,82,161,64,148,8,132,64,8,
-0,9,254,251,254,191,255,235,215,95,253,255,247,245,255,81,74,72,40,0,128,34,68,129,247,127,238,223,253,253,219,223,255,223,252,139,170,74,144,34,168,85,4,21,42,2,130,16,8,128,
-18,35,253,253,183,174,181,215,223,239,255,191,223,255,245,76,33,2,130,74,20,128,0,2,253,218,255,255,247,183,255,255,221,255,218,37,85,82,73,0,18,0,169,168,132,168,32,1,32,34,
-0,7,239,190,255,239,255,123,245,125,126,223,255,105,9,34,136,32,16,0,64,4,144,17,215,239,187,182,223,255,247,255,127,255,253,66,169,73,36,74,164,170,20,69,40,0,8,132,4,128,
-0,15,253,251,253,247,181,246,255,255,191,239,126,170,168,144,34,8,66,82,2,32,2,64,254,187,239,255,254,254,223,119,255,255,254,147,85,42,144,128,18,68,163,40,66,146,66,32,128,8,
-16,155,119,246,238,239,255,239,94,245,253,250,250,208,146,4,128,130,0,0,32,0,0,0,111,238,254,239,119,219,255,255,255,255,14,1,84,164,68,41,73,41,72,133,16,0,8,8,42,66,
-0,47,253,239,255,218,215,223,245,255,247,127,202,138,64,160,4,16,18,1,4,137,36,0,123,187,187,253,255,255,251,253,247,191,87,169,82,146,146,4,164,146,37,40,137,36,129,34,128,16,
-2,63,255,223,125,223,255,255,254,189,255,222,85,32,20,4,32,0,128,72,0,0,0,18,46,254,255,183,182,255,255,223,255,254,146,65,74,73,36,82,18,169,72,132,64,0,36,64,18,64,
-0,255,247,255,219,191,255,95,239,223,251,245,80,10,129,16,128,130,1,0,64,32,0,128,31,215,238,254,255,238,239,255,255,254,123,4,169,42,73,9,85,36,36,82,37,85,17,8,64,4,
-32,255,253,255,255,255,223,127,255,239,223,168,138,160,72,64,8,16,16,2,9,2,72,0,31,125,191,219,255,255,255,255,191,255,113,209,36,145,32,68,146,66,146,8,128,0,64,34,0,0,
-2,219,247,255,223,127,254,255,189,251,250,146,80,21,34,4,33,0,0,16,0,0,0,0,23,254,251,255,237,191,127,127,255,254,117,66,170,72,149,17,36,148,73,82,20,68,20,128,2,32,
-3,255,255,127,254,255,253,253,255,254,234,74,138,202,136,65,0,4,132,64,0,16,1,8,141,239,223,119,127,255,251,253,255,255,1,144,146,165,64,128,65,2,32,0,65,17,64,0,32,2,
-7,251,239,223,245,255,247,255,247,127,85,82,82,36,34,16,0,64,16,0,144,128,64,0,7,123,123,255,254,247,255,239,255,255,84,202,84,72,42,85,20,84,138,169,4,0,1,9,4,8,
-19,191,254,255,255,255,254,255,255,233,82,170,170,169,72,132,73,0,0,2,0,2,4,0,3,255,223,221,219,255,191,255,255,239,66,81,73,37,65,2,73,33,32,0,32,74,16,32,32,128,
-7,254,255,254,237,253,255,255,111,86,170,170,164,146,34,16,0,4,1,8,2,0,0,32,1,221,251,255,255,255,239,191,247,127,168,164,165,82,20,84,144,138,21,82,9,0,130,4,128,0,
-15,255,110,255,255,127,251,87,250,170,149,16,73,8,128,64,0,0,132,0,0,16,16,2,18,255,94,183,118,221,255,255,255,251,146,82,146,9,65,8,69,36,160,0,128,32,0,32,18,32,
-31,239,255,223,223,191,255,251,234,169,72,165,16,64,18,1,16,144,16,32,32,0,128,0,0,239,247,255,255,255,191,255,255,245,192,73,85,82,40,162,146,81,10,136,34,9,36,137,0,4,
-15,251,189,255,255,239,255,253,42,68,34,0,68,18,64,4,2,0,0,0,128,130,1,16,0,253,219,253,237,219,253,191,223,226,169,36,145,41,4,17,36,132,64,34,8,64,0,32,72,128,
-27,255,255,191,125,245,239,234,164,146,136,148,1,0,1,32,0,1,0,2,2,8,0,0,128,119,253,183,191,127,255,253,255,234,208,34,74,132,169,74,18,41,18,0,128,4,34,132,0,16,
-62,223,239,255,255,255,254,148,145,36,34,1,32,68,16,0,64,4,2,64,8,0,4,0,8,95,183,255,247,239,239,255,255,206,226,18,169,82,34,33,73,2,64,68,2,64,136,33,34,2,
-31,251,190,255,247,191,122,82,4,65,8,64,4,0,128,4,8,64,32,0,0,0,16,34,1,59,255,221,109,125,127,255,255,222,80,165,36,73,72,148,68,168,9,16,32,18,2,136,0,64,
-63,255,255,255,255,255,165,33,81,16,64,8,0,16,4,144,1,0,0,18,32,32,64,0,0,47,118,239,255,223,254,255,255,198,106,8,170,164,18,66,146,5,32,0,132,128,41,0,8,0,
-55,247,223,119,251,253,80,136,4,4,1,1,33,0,0,0,144,9,9,0,0,130,0,128,32,31,223,187,87,255,251,255,255,233,48,66,146,82,161,20,73,80,4,66,0,8,132,34,65,8,
-29,255,255,223,255,164,138,34,160,145,16,32,4,2,64,0,0,32,32,32,130,0,0,4,4,77,122,239,253,219,255,255,255,210,82,42,169,36,74,73,36,4,145,8,18,64,18,136,0,0,
-79,255,191,255,254,170,32,136,8,0,0,0,0,16,9,34,34,0,128,130,8,8,4,16,0,15,239,218,223,255,191,255,255,232,152,130,165,73,16,146,81,80,0,0,128,9,42,0,16,32,
-39,239,254,124,234,145,10,33,2,32,4,4,128,64,0,0,0,138,8,8,0,1,32,64,145,6,253,127,254,254,255,255,255,242,26,85,84,164,165,36,136,5,72,146,18,64,9,1,2,2,
-159,255,126,24,41,36,64,132,32,4,144,128,16,0,128,9,36,32,34,32,65,32,1,0,0,39,175,214,255,255,255,255,255,233,42,138,170,82,72,73,37,80,2,0,64,2,84,164,32,64,
-86,255,156,90,84,129,18,0,0,128,0,0,1,2,18,64,1,4,128,130,20,4,8,4,4,11,253,191,239,247,255,255,255,244,4,74,146,137,34,146,16,0,32,73,4,144,42,0,1,0,
-255,255,12,8,34,40,64,34,72,16,0,16,64,8,0,9,40,80,40,16,128,16,128,16,144,130,223,251,189,191,255,255,126,250,149,37,85,82,137,36,165,74,4,4,16,1,21,0,136,8,
-239,255,5,40,136,130,8,136,0,1,33,2,8,32,33,32,69,5,66,138,34,64,36,128,0,37,255,126,247,255,255,253,255,248,2,146,170,72,82,17,0,32,128,144,130,72,84,146,0,32,
-253,254,72,138,34,16,34,0,2,64,4,32,2,1,4,10,144,168,148,64,136,4,128,36,138,2,237,239,255,255,255,247,231,253,82,75,85,37,72,164,85,0,18,2,40,1,82,0,1,2,
-255,254,5,36,144,65,0,1,32,8,0,4,160,148,72,160,74,146,33,42,69,80,18,0,32,146,255,255,187,119,111,191,131,252,9,4,169,85,37,18,0,74,0,32,1,4,80,136,68,0,
-223,221,16,8,4,8,16,72,4,2,81,32,10,33,18,77,170,73,74,146,40,5,0,165,2,9,191,255,255,255,253,255,185,250,164,66,170,162,64,164,170,0,64,138,164,32,138,33,0,16,
-251,122,10,165,73,33,2,0,0,128,4,10,161,74,73,42,169,36,32,73,69,80,170,8,80,68,247,187,254,237,223,255,107,253,16,144,170,149,42,18,1,36,8,0,0,128,160,0,16,66,
-255,170,68,80,0,0,64,17,32,41,16,161,20,169,109,181,36,146,150,164,169,37,16,162,10,42,191,255,255,191,123,255,184,230,164,68,85,80,146,168,168,0,0,16,146,10,74,148,1,0,
-234,84,19,21,84,68,8,128,4,0,66,20,170,170,164,164,149,85,73,18,84,148,165,17,65,65,111,223,237,251,255,255,82,242,146,129,42,170,168,66,4,146,66,66,8,33,32,1,32,0,
-169,16,20,84,0,0,32,4,17,18,17,69,37,74,171,91,106,170,170,170,138,170,72,164,84,149,255,126,255,183,255,255,128,165,72,16,85,85,5,41,80,0,8,0,65,0,128,64,4,8,
-18,90,146,17,18,34,2,32,128,64,136,40,170,170,255,255,255,255,255,255,117,82,165,18,146,74,191,255,253,255,255,255,212,82,82,132,21,82,168,132,5,72,0,1,20,74,85,9,16,64,
-65,36,42,168,64,129,64,2,4,4,37,70,170,85,255,157,255,127,255,255,255,253,90,213,74,171,251,239,175,255,191,255,210,33,36,16,133,84,165,41,80,1,32,16,1,1,0,0,64,2,
-20,48,10,21,8,8,17,16,33,33,17,42,165,91,255,187,255,255,255,255,255,255,255,255,255,255,239,189,255,254,255,255,228,148,66,64,18,170,146,132,4,68,1,2,72,84,68,16,1,8,
-2,146,84,148,36,69,68,0,132,8,164,170,149,127,239,127,111,255,255,255,253,239,255,222,255,255,127,255,254,239,247,255,240,1,20,4,69,85,73,41,81,0,8,0,2,82,16,66,4,32,
-72,8,36,81,2,2,0,74,16,165,21,84,170,255,255,253,255,255,255,255,239,255,254,251,246,223,254,255,255,255,255,255,250,168,33,17,1,84,170,66,0,16,128,32,32,153,66,0,32,0,
-10,32,74,154,72,42,18,0,2,18,85,85,93,215,254,255,223,127,255,247,191,223,219,255,255,253,255,253,255,251,93,239,250,4,136,0,20,182,164,148,84,130,1,4,132,72,8,0,0,0,
-40,16,32,16,2,5,0,136,169,73,85,82,254,223,127,246,255,255,255,255,255,253,127,223,123,255,247,239,239,223,255,191,253,81,34,72,1,85,82,65,0,8,36,0,1,53,32,146,1,18,
-16,68,84,75,32,148,74,34,4,170,170,175,189,127,157,123,126,255,255,255,255,239,254,247,223,183,191,127,126,255,247,255,246,136,16,2,64,85,85,42,73,32,0,16,0,144,0,0,72,0,
-82,32,65,20,10,38,1,8,170,170,165,93,255,86,247,253,171,255,255,238,239,189,215,253,253,254,253,251,255,255,255,255,250,164,128,32,20,171,85,72,128,1,0,64,72,84,132,72,0,64,
-72,82,84,8,128,138,0,165,85,85,86,254,247,221,111,253,255,255,255,255,255,247,254,223,183,175,255,223,223,255,126,239,213,82,74,8,64,21,170,146,41,8,17,2,2,161,32,1,0,4,
-80,72,64,42,129,21,36,18,170,74,191,255,255,230,255,123,127,255,255,255,222,254,219,251,255,251,239,254,251,183,223,255,234,73,0,65,2,78,213,72,128,64,64,0,1,84,1,0,17,0,
-160,64,82,10,72,74,128,10,82,171,255,247,215,251,191,251,175,255,255,251,251,219,255,254,221,111,189,239,255,255,255,223,85,36,32,0,8,2,186,164,36,2,0,8,36,32,136,16,64,16,
-64,168,72,9,154,146,0,149,74,191,251,251,190,252,189,246,255,255,255,255,127,255,219,183,247,255,255,125,182,254,253,255,180,145,2,68,0,42,213,82,137,16,4,32,130,136,0,2,0,64,
-160,161,32,140,192,149,144,5,91,239,247,253,223,189,191,191,223,255,255,255,239,110,255,253,191,187,239,247,255,239,247,255,169,36,8,0,129,2,218,144,64,0,16,128,5,66,66,32,9,2,
-130,144,82,9,40,74,128,74,255,255,239,251,126,251,215,245,255,255,255,255,253,255,222,219,237,255,123,127,239,127,223,255,162,0,64,0,16,2,182,202,148,137,0,0,17,32,8,0,32,0,
-};
-*/
-
-/*
-//set pixel value at x and y coordinate
-void setPixel(int x, int y, int on){
-    int height = 300;
-    int width = 400;
-
-    //index in lab11 array
-    int index = (y * 50) + ((50 * x)/400);
-    int bitsIntoByte = 7 - (x % 8);
-
-    //turns the nth bit on or off
-    lab11[index] ^= (-on ^ lab11[index]) & (1 << bitsIntoByte);
-}
-
-
-void clearScreen(){
-    memset(lab11, 0, 15000 * sizeof(uint8_t));
-}
-
-//inserts a grid of pixels into the image - NOTE - coordinate is @ uper left
-void insertPixelGrid(int width, int height, int grid[height][width], int xcoord, int ycoord)
-{
-    for(int y = 0; y < height; y++)
-    {
-        for(int x = 0; x < width; x++)
-        {
-            if(grid[y][x] == 1)
-            {
-                setPixel(x + xcoord, y + ycoord, 1);
-            }
-            else
-            {
-                setPixel(x + xcoord, y + ycoord, 0);
-            }
-        }
-    }
-}
-
-//reverse the bits in the char
-unsigned char reverse(unsigned char b){
-    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
-    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
-    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
-    return b;
-}
-
-void writeText(char text[])
-{
-    int numberOfCharacters = strlen(text);
-
-    //loop over each character to be written
-    for(int i = 0; i < numberOfCharacters; i++)
-    {
-        char find = text[i];
-        char *bitmap = font8x8_basic[find];
-        uint8_t line =  (i / 50);
-
-        //write each row of the character pixels into the picture
-        for(int j = 0; j < 8; j++)
-        {
-            int index = (i) + (50 * j) + (line * 50 * 8);
-            lab11[index] = reverse(bitmap[j]);
-        }
-        
-    }
-}
-
-int main(void) 
-{
-    // Initialize.
-    led_init(LED0);
-    led_on(LED0);
-
-    clearScreen();
-    uint8_t iterate = 0;
-    while(1)
-    {
-        char buffer[200];
-        buffer[200] = 0;
-
-        sprintf(buffer, "%d", iterate);
-
-        writeText(buffer);
-
-        
-        //ledinit
-        //ledoff
-
-        // Setup input for busy
-        nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
-
-        // Assert ENABLE
-        nrf_gpio_cfg_output(nTC_EN);
-        nrf_gpio_pin_clear(nTC_EN);
-
-        // Need to wait 6.5 ms per datasheet (section 5.5)
-        // Up that a little to be safe and who cares about a couple ms
-        nrf_delay_ms(10);
-
-        // Setup SPI
-        spi_init();
-
-        uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
-        uint8_t rx[256] = {0};
-
-        // Get device id to check that we can comm with this display
-        // Send the command
-        nrf_drv_spi_transfer(&_spi, tx, 4, NULL, 0);
-
-        // Wait until no longer busy
-        wait_for_not_busy();
-
-        // Receive response
-        nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 28);
-
-        // Not sure, sometimes busy signal, sometimes not?
-        // Just wait for a hot sec for now
-        nrf_delay_ms(1);
-
-
-        uint8_t pic[255];
-
-        // Setup spi comm header
-        pic[0] = 0x20;
-        pic[1] = 0x01;
-        pic[2] = 0x00;
-
-        // How many bytes we want to send.
-        pic[3] = 16;
-
-        // Pic header
-        pic[4] = 0x33; // 4.41"
-        pic[5] = 0x01; // 400px
-        pic[6] = 0x90;
-        pic[7] = 0x01; // 300px
-        pic[8] = 0x2c;
-        pic[9] = 0x01; // 1 bit
-        // pic[10] = 0x02; // image pixel data format type 2
-        pic[10] = 0x00; // image pixel data format type 0
-        pic[11] = 0; // reserved
-        pic[12] = 0;
-        pic[13] = 0;
-        pic[14] = 0;
-        pic[15] = 0;
-        pic[16] = 0;
-        pic[17] = 0;
-        pic[18] = 0;
-        pic[19] = 0;
-
-        // Send header
-        //THESE 2 LINES SCREW EVERYTHING UP AND IT FREEZES
-        nrf_drv_spi_transfer(&_spi, pic, 20, NULL, 0);
-        wait_for_not_busy();
-
-        led_off(LED0);//debug
-
-        nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
-        wait_for_not_busy();
-
-        uint8_t i;
-
-        // // display a pattern
-        // pic[3] = 250;
-        // // pic[3] = 150;
-        // for (i=4; i<254; i++) {
-        //     if (i % 2 == 0) {
-        //         pic[i] = 0x80;
-        //     } else {
-        //         pic[i] = 0x0C;
-        //     }
-        //     // pic[i] = i;
-        // }
-        //
-        // // Display a lot more
-        // for (i=0; i<30; i++) {
-        //     nrf_drv_spi_transfer(&_spi, pic, 254, NULL, 0);
-        //     wait_for_not_busy();
-        //     nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
-        //     wait_for_not_busy();
-        // }
-
-
-        // display an image
-        pic[3] = 250;
-        for (i=0; i<60; i++) {
-            memcpy(pic+4, lab11+(i*250), 250); // Lab11 logo
-            //memset(pic+4, 0xFF, 250); // Black screen
-            //memset(pic+4, 0x00, 250); // White screen
-
-            nrf_drv_spi_transfer(&_spi, pic, 254, NULL, 0);
-            wait_for_not_busy();
-            nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
-            wait_for_not_busy();
-        }
-
-        // Actually render the image
-        tx[0] = 0x24;
-        tx[1] = 0x01;
-        tx[2] = 0x00;
-
-        nrf_drv_spi_transfer(&_spi, tx, 3, NULL, 0);
-        wait_for_not_busy();
-        nrf_drv_spi_transfer(&_spi, NULL, 0, rx, 2);
-        wait_for_not_busy();
-
-
-        nrf_gpio_pin_set(nTC_EN);
-
-
-        led_on(LED0);
-
-        // led_on(LED0);
-
-*/
-        /*
-        // Enter main loop.
-        while (1) {
-            sd_app_evt_wait();
-        }
-        */
-/*
-        iterate++;
-    }
-    
-}
-*/
\ No newline at end of file
diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 50158a4f9645093607b84c18c7460ef182ddadbf..cfc6d35e7652f38c63a3f67e0459973a44e30665 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -28,10 +28,12 @@
 #include "device_info_service.h"
 
 // Define constants about this beacon.
-#define DEVICE_NAME "QRcodedisp"
+#define DEVICE_NAME "E-Ink disp"
 
 // LED pin number
 #define LED0 18
+#define LED1 19
+#define LED2 20
 
 // Intervals for advertising and connections
 static simple_ble_config_t ble_config = {
@@ -51,20 +53,61 @@ static simple_ble_service_t led_service = {
                  0x89, 0x30, 0x4f, 0xff, 0xa4, 0x4a, 0x28, 0xe5}}
 };
 
-static simple_ble_char_t test_string_char = {.uuid16 = 0xa410};
-static char test_string_value[256] = {0};
+//text x coordinate
+static simple_ble_char_t text_x_coordinate_char = {.uuid16 = 0xa411};
+static uint16_t text_x_coordinate_value = 0;
+
+//text y coordinate
+static simple_ble_char_t text_y_coordinate_char = {.uuid16 = 0xa412};
+static uint16_t text_y_coordinate_value = 0;
+
+//text scale
+static simple_ble_char_t text_scale_char = {.uuid16 = 0xa413};
+static uint8_t text_scale_value = 1;//default to 1
+
+//text
+static simple_ble_char_t text_char = {.uuid16 = 0xa410};
+static char text_value[30] = {0};
+
+//qr code
+static simple_ble_char_t qrcode_char = {.uuid16 = 0xa414};
+static char qrcode_value[52] = {0};
+
+static volatile uint8_t second=0;
 
-static uint8_t led_on_value = 0;
+void ble_error(uint32_t err_code) {
+    led_on(LED0);
+}
 
 // called automatically by simple_ble_init
 void services_init (void) {
     // add led service
     simple_ble_add_service(&led_service);
 
+    //add text x coordinate
+    simple_ble_add_characteristic(0, 1, 0, 0,
+            2, (uint16_t*)&text_x_coordinate_value,
+            &led_service, &text_x_coordinate_char);
+
+    //add text y coordinate
+    simple_ble_add_characteristic(0, 1, 0, 0,
+            2, (uint16_t*)&text_y_coordinate_value,
+            &led_service, &text_y_coordinate_char);
+
+    //add text scale
+    simple_ble_add_characteristic(0, 1, 0, 0,
+            1, (uint8_t*)&text_scale_value,
+            &led_service, &text_scale_char);
+
     //add string
     simple_ble_add_characteristic(0, 1, 0, 0,
-            256, (char*)&test_string_value,
-            &led_service, &test_string_char);
+            30, (char*)&text_value,
+            &led_service, &text_char);
+
+    //add qr code
+    simple_ble_add_characteristic(0, 1, 0, 0,
+            52, (char*)&qrcode_value,
+            &led_service, &qrcode_char);
 }
 
 
@@ -98,12 +141,22 @@ static void spi_init () {
 
 static void wait_for_not_busy () {
     uint8_t found_busy_low = 0;
-    int count = 0;
+    volatile int count = 0;
     while (1) {
         uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
+
+        if (pin) led_on(LED1);
+        if (found_busy_low) led_on(LED2);
+
         if (found_busy_low && pin) {
             break;
+        } else {
+            uint8_t buf = {0xFF, 0xFF, 0xFF, 0xFF};
+            for(int i; i < 100; i++)
+                nrf_drv_spi_transfer(&_spi, buf, 4, NULL, 0);
         }
+
+
         if (pin == 0) {
             found_busy_low = 1;
         }
@@ -111,15 +164,21 @@ static void wait_for_not_busy () {
         if(!found_busy_low)
         {
             count++;
-            if(count > 10)
+            if(count > 1000)
             {
                 break;
             }
         }
+
+        led_off(LED1);
+        led_off(LED2);
     }
+    led_off(LED1);
+    led_off(LED2);
 
     // Then wait a little longer so we don't violate the T_NS time.
     nrf_delay_us(5);
+
 }
 
 uint8_t screen[15000] = {
@@ -649,6 +708,7 @@ void updateDisplay()
 
 
     nrf_gpio_pin_set(nTC_EN);
+    second = 1;
 }
 
 //set up led and spi
@@ -658,6 +718,10 @@ void init()
 
     led_init(LED0);
     led_off(LED0);
+    led_init(LED1);
+    led_off(LED1);
+    led_init(LED2);
+    led_off(LED2);
 
     // Setup input for busy
     nrf_gpio_cfg_input(nTC_BUSY, NRF_GPIO_PIN_NOPULL);
@@ -694,9 +758,19 @@ void init()
 
 void ble_evt_write(ble_evt_t* p_ble_evt) {
 
-    if (simple_ble_is_char_event(p_ble_evt, &test_string_char)) {
+    if (simple_ble_is_char_event(p_ble_evt, &text_char)) {
+
+        //writeStringAtLocation(text_value, text_x_coordinate_value, 
+        //    text_y_coordinate_value, text_scale_value);
+
+        writeStringAtLocation(text_value, 0, 0, text_scale_value);
+
+        updateDisplay();
+    }
+    else if(simple_ble_is_char_event(p_ble_evt, &qrcode_char))
+    {
+        writeQRcode(qrcode_value);
 
-        writeStringAtLocation(test_string_value, 0, 0, 2);
         updateDisplay();
     }
 }
diff --git a/apps/eink-advanced/qrcode.c b/apps/eink-advanced/qrcode.c
deleted file mode 100644
index bd8d2884fa8522348486e07c3bbf1e0705465e16..0000000000000000000000000000000000000000
--- a/apps/eink-advanced/qrcode.c
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
-    //sets a block of 8x8 pixels on or off. x < 50 & y < 38
-    void setBlock(int x, int y, int on)
-    {
-        for(int i = 0; i < 8; i++)
-        {
-            if(on == 1){
-                screen[x + (50 * i) + (50 * y * 8)] = 255;
-            }else{
-                screen[x + (50 * i) + (50 * y * 8)] = 0;
-            }
-            
-        }
-    }
-
-    //inserts a grid of pixels, but much larger
-    void insertBigPixelGrid(int width, int height, uint8_t grid[height][width], int xcoord, int ycoord)
-    {
-        for(int y = 0; y < height; y++)
-        {
-            for(int x = 0; x <width; x++)
-            {
-                if(grid[y][x] == 1)
-                {
-                    setBlock(x, y, 1);
-                }
-                else
-                {
-                    setBlock(x, y, 0);
-                }
-            }
-        }
-    }
-
-
-    writeStringAtLocation("<- umich.edu", 185, 60);
-
-    writeStringAtLocation("YAY IT WORKS!", 130, 200);
-
-    uint8_t qrCode[21][21] = {
-        {1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1},
-        {1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1},
-        {1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1},
-        {1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1},
-        {1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1},
-        {1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1},
-        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
-        {0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
-        {1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0},
-        {0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0},
-        {1,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0},
-        {1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,0},
-        {1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0},
-        {0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,1},
-        {1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0},
-        {1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1},
-        {1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0},
-        {1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0},
-        {1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1},
-        {1,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0},
-        {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0}
-    };
-    
-    insertBigPixelGrid(21, 21, qrCode, 14, 8);
-    */
\ No newline at end of file
diff --git a/apps/eink-advanced/send_ble_data.js b/apps/eink-advanced/send_ble_data.js
new file mode 100644
index 0000000000000000000000000000000000000000..2f200f0b2fa4936882888bdcdbe860801d30c8de
--- /dev/null
+++ b/apps/eink-advanced/send_ble_data.js
@@ -0,0 +1,50 @@
+var noble = require('noble');
+
+var text = process.argv[2];
+var buf = Buffer.from(text);
+
+var text_value = "e528a410ff4f3089d44f7cb505aba641";
+var scale =      "e528a413ff4f3089d44f7cb505aba641";
+var x =          "e528a411ff4f3089d44f7cb505aba641";
+var y =          "e528a412ff4f3089d44f7cb505aba641";
+var qrcode =     "e528a414ff4f3089d44f7cb505aba641";
+
+noble.on('stateChange', function(state) {
+	if(state === 'poweredOn'){
+		noble.startScanning();
+	}else{
+		noble.stopScanning();
+	}
+});
+
+noble.on('discover', function(peripheral){
+	if(peripheral.address === "c0:98:e5:00:f8:02" && peripheral.connectable)
+	{
+		peripheral.connect(function(error){
+			if(error)
+			{
+				console.log("Peripheral connection error: " + error);
+			}
+			else
+			{
+				peripheral.discoverAllServicesAndCharacteristics(function(error, services, characteristics){
+					//characteristics[0] = X COORDINATE
+					//characteristics[1] = Y COORDINATE
+					//characteristics[2] = SCALE
+					//characteristics[3] = TEXT
+					//characteristics[4] = QR CODE
+					for(var i = 0; i < characteristics.length; i++)
+					{
+						if(characteristics[i].uuid == text_value)
+						{
+							characteristics[i].write(buf, false, function(error){
+								//console.log("Characteristics error: " + error);
+							});
+						}
+					}
+				});
+			}
+
+		});
+	}
+});

From 45f8232c7e2ef9e8987c18718d57c64725eed76b Mon Sep 17 00:00:00 2001
From: Josh Adkins <adkinsjd@umich.edu>
Date: Tue, 28 Jun 2016 21:34:49 -0400
Subject: [PATCH] removed a special folder causing problems

---
 apps/eink-advanced/font/font8x8 | 1 -
 1 file changed, 1 deletion(-)

diff --git a/apps/eink-advanced/font/font8x8 b/apps/eink-advanced/font/font8x8
deleted file mode 160000
index 55dc0b2f870d6892bb91177c32d7397fc6fc9050..0000000000000000000000000000000000000000
--- a/apps/eink-advanced/font/font8x8
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 55dc0b2f870d6892bb91177c32d7397fc6fc9050

From 3fb642add293f71dd327df81a1d63ab088dcfcaa Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Tue, 12 Jul 2016 18:00:24 -0400
Subject: [PATCH] hopefully fixed nrf_gpio_pin_clear(nTC_EN) issue

---
 apps/eink-advanced/Makefile     |  2 ++
 apps/eink-advanced/font/font8x8 |  1 +
 apps/eink-advanced/main.c       | 45 ++++++++++++++++++++---------------------
 3 files changed, 25 insertions(+), 23 deletions(-)

diff --git a/apps/eink-advanced/Makefile b/apps/eink-advanced/Makefile
index 49743904feee4e7cda8b3092265314e963a5b05e..05eb22b123fe6f523745720eedbc33acc94413a4 100644
--- a/apps/eink-advanced/Makefile
+++ b/apps/eink-advanced/Makefile
@@ -18,6 +18,8 @@ APPLICATION_SRCS += nrf_drv_common.c
 APPLICATION_SRCS += nrf_drv_gpiote.c
 APPLICATION_SRCS += nrf_delay.c
 
+APPLICATION_SRCS += eddystone.c
+
 # APPLICATION_SRCS += adxl362.c
 
 NRF_BASE_PATH ?= ../..
diff --git a/apps/eink-advanced/font/font8x8 b/apps/eink-advanced/font/font8x8
new file mode 160000
index 0000000000000000000000000000000000000000..55dc0b2f870d6892bb91177c32d7397fc6fc9050
--- /dev/null
+++ b/apps/eink-advanced/font/font8x8
@@ -0,0 +1 @@
+Subproject commit 55dc0b2f870d6892bb91177c32d7397fc6fc9050
diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index cfc6d35e7652f38c63a3f67e0459973a44e30665..499a7ab03bd0da5124d778a1048e620d39772015 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -27,8 +27,11 @@
 #include "led.h"
 #include "device_info_service.h"
 
+#include "eddystone.h"
+
 // Define constants about this beacon.
 #define DEVICE_NAME "E-Ink disp"
+#define PHYSWEB_URL "goo.gl/pKiLW5"
 
 // LED pin number
 #define LED0 18
@@ -75,10 +78,6 @@ static char qrcode_value[52] = {0};
 
 static volatile uint8_t second=0;
 
-void ble_error(uint32_t err_code) {
-    led_on(LED0);
-}
-
 // called automatically by simple_ble_init
 void services_init (void) {
     // add led service
@@ -145,22 +144,15 @@ static void wait_for_not_busy () {
     while (1) {
         uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
 
-        if (pin) led_on(LED1);
-        if (found_busy_low) led_on(LED2);
-
         if (found_busy_low && pin) {
             break;
-        } else {
-            uint8_t buf = {0xFF, 0xFF, 0xFF, 0xFF};
-            for(int i; i < 100; i++)
-                nrf_drv_spi_transfer(&_spi, buf, 4, NULL, 0);
         }
 
-
         if (pin == 0) {
             found_busy_low = 1;
         }
 
+        /*
         if(!found_busy_low)
         {
             count++;
@@ -169,12 +161,8 @@ static void wait_for_not_busy () {
                 break;
             }
         }
-
-        led_off(LED1);
-        led_off(LED2);
+        */
     }
-    led_off(LED1);
-    led_off(LED2);
 
     // Then wait a little longer so we don't violate the T_NS time.
     nrf_delay_us(5);
@@ -637,6 +625,13 @@ uint8_t tx[6] = {0x30, 0x01, 0x01, 0x00, 0x00, 0x00};
 uint8_t rx[256] = {0};
 void updateDisplay()
 {   
+    nrf_gpio_pin_clear(nTC_EN);
+
+    // Need to wait 6.5 ms per datasheet (section 5.5)
+    // Up that a little to be safe and who cares about a couple ms
+    nrf_delay_ms(10);
+
+
     memset(rx, 0, 256 * sizeof(uint8_t));
     tx[0] = 0x30;
     tx[1] = 0x01;
@@ -728,11 +723,7 @@ void init()
 
     // Assert ENABLE
     nrf_gpio_cfg_output(nTC_EN);
-    nrf_gpio_pin_clear(nTC_EN);
-
-    // Need to wait 6.5 ms per datasheet (section 5.5)
-    // Up that a little to be safe and who cares about a couple ms
-    nrf_delay_ms(10);
+    
 
     // Setup SPI
     spi_init();
@@ -753,6 +744,11 @@ void init()
     // Not sure, sometimes busy signal, sometimes not?
     // Just wait for a hot sec for now
     nrf_delay_ms(1);
+
+    //initial values
+    text_x_coordinate_value = 0;
+    text_y_coordinate_value = 0;
+    text_scale_value = 1;
 }
 
 
@@ -763,7 +759,7 @@ void ble_evt_write(ble_evt_t* p_ble_evt) {
         //writeStringAtLocation(text_value, text_x_coordinate_value, 
         //    text_y_coordinate_value, text_scale_value);
 
-        writeStringAtLocation(text_value, 0, 0, text_scale_value);
+        writeStringAtLocation(text_value, text_x_coordinate_value, text_y_coordinate_value, text_scale_value);
 
         updateDisplay();
     }
@@ -787,6 +783,9 @@ int main(void)
     simple_ble_init(&ble_config);
     simple_adv_only_name();
 
+    //advertise url
+    eddystone_adv(PHYSWEB_URL, NULL);
+
     //writeStringAtLocation("Booted up", 0, 0, 2);
     //updateDisplay();
 

From 9f6e930de02cd7af4c74a2d31fd40ddc0d5505b5 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Wed, 13 Jul 2016 12:13:30 -0700
Subject: [PATCH] Deleted .ds_store

---
 apps/eink-advanced/.DS_Store | Bin 6148 -> 0 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/apps/eink-advanced/.DS_Store b/apps/eink-advanced/.DS_Store
deleted file mode 100644
index a4e9cf6e5de8cbe7c21cc238b9dbfbf5c8644dc6..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6148
zcmeHKOHKko5PgM2AZ~Eya+a(}yunDogasQo0LsTt9EA`xaW}`{P#(bB;H&BmnE~0V
zF;z+Ro9TH~UHy78Jq<uQud_>_37}3_tTfnsWBOeEz$&q)Mik32!Ws*#Fz;svZ14Ds
z3h3H3&_)*{jOn}eTTCa}V#23<HDpNKY|U&EHB7k9w_NENV;}lik&SC|S_Sqwrewe1
z4Rc1UIgXAp=H1fbmw4aH@UfTS6we&(kvZC!mbq42i+tH`t+qM_<UTR`9V0S*7mL-&
z=U(n6v#!V;vz8TW9LH)k`u@o5idr-<L=RU~a6oLc(ph;#=xjFhO03Yz^u`r%1zdq&
zRDgT7TKz1bx2}LI;0o*%(C<S+S4<=30qxVl#*P5QD!a{it!D|1Ng}2Z^MHIplMqS_
zp%RZ662jS^L|z&(4;aEB@$eyWWQivfvC)}7F*+m-=&dW@3X~N%3Aat%|9i*J|K%XR
za|K+1f2Dv_yQ6N0Q;K`*!Q^zWP3SjtHRa_2cOks6t(aWhiZAG9>`(N9m`2P4vWMnB
N0w#kuuE38f@C5^MX72z1


From 821a49e4d558ee63143357ce7d38e850c8d3d67a Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Wed, 13 Jul 2016 18:05:36 -0400
Subject: [PATCH] fixed font8x8 submodule issue

---
 apps/eink-advanced/Makefile             |   1 +
 apps/eink-advanced/font/README.md       |  47 ++++++++++
 apps/eink-advanced/font/font8x8         |   1 -
 apps/eink-advanced/font/font8x8_basic.h | 152 ++++++++++++++++++++++++++++++++
 apps/eink-advanced/main.c               |  38 ++++----
 5 files changed, 217 insertions(+), 22 deletions(-)

diff --git a/apps/eink-advanced/Makefile b/apps/eink-advanced/Makefile
index 05eb22b123fe6f523745720eedbc33acc94413a4..7b30eb14a9a0f5780ec7b96b161b1326befa12fa 100644
--- a/apps/eink-advanced/Makefile
+++ b/apps/eink-advanced/Makefile
@@ -25,6 +25,7 @@ APPLICATION_SRCS += eddystone.c
 NRF_BASE_PATH ?= ../..
 LIBRARY_PATHS += . $(NRF_BASE_PATH)/devices ../../include
 LIBRARY_PATHS += ./libqrencode
+LIBRARY_PATHS += ./font
 SOURCE_PATHS += $(NRF_BASE_PATH)/devices ../../src
 
 SOFTDEVICE_MODEL = s130
diff --git a/apps/eink-advanced/font/README.md b/apps/eink-advanced/font/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..f5b7fdfaf6318dc86b3c2b21579d3ee0dbaa2b94
--- /dev/null
+++ b/apps/eink-advanced/font/README.md
@@ -0,0 +1,47 @@
+8x8 monochrome bitmap font for rendering
+=========================================
+
+[https://github.com/dhepper/font8x8](https://github.com/dhepper/font8x8)
+
+A collection of header files containing a 8x8 bitmap font.
+
+font8x8.h contains all available characters
+font8x8_basic.h contains unicode points U+0000 - U+007F
+font8x8_latin.h contains unicode points U+0000 - U+00FF
+
+Author: Daniel Hepper <daniel@hepper.net>
+License: Public Domain
+
+Renderer
+========
+To visualize the font, a simple renderer is included in render.c
+
+    $ gcc render.c -o render
+    $ ./render 65
+      XX    
+     XXXX   
+    XX  XX  
+    XX  XX  
+    XXXXXX  
+    XX  XX  
+    XX  XX
+
+Credits
+=======
+These header files are directly derived from an assembler file fetched from:
+http://dimensionalrift.homelinux.net/combuster/mos3/?p=viewsource&file=/modules/gfx/font8_8.asm
+
+Original header:
+
+; Summary: font8_8.asm
+; 8x8 monochrome bitmap fonts for rendering
+;
+; Author:
+;     Marcel Sondaar
+;     International Business Machines (public domain VGA fonts)
+;
+; License:
+;     Public Domain
+;
+
+
diff --git a/apps/eink-advanced/font/font8x8 b/apps/eink-advanced/font/font8x8
deleted file mode 160000
index 55dc0b2f870d6892bb91177c32d7397fc6fc9050..0000000000000000000000000000000000000000
--- a/apps/eink-advanced/font/font8x8
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 55dc0b2f870d6892bb91177c32d7397fc6fc9050
diff --git a/apps/eink-advanced/font/font8x8_basic.h b/apps/eink-advanced/font/font8x8_basic.h
new file mode 100644
index 0000000000000000000000000000000000000000..43ec3479b6416136aaed24ea1401e554340d6596
--- /dev/null
+++ b/apps/eink-advanced/font/font8x8_basic.h
@@ -0,0 +1,152 @@
+/** 
+ * 8x8 monochrome bitmap fonts for rendering
+ * Author: Daniel Hepper <daniel@hepper.net>
+ * 
+ * License: Public Domain
+ * 
+ * Based on:
+ * // Summary: font8x8.h
+ * // 8x8 monochrome bitmap fonts for rendering
+ * //
+ * // Author:
+ * //     Marcel Sondaar
+ * //     International Business Machines (public domain VGA fonts)
+ * //
+ * // License:
+ * //     Public Domain
+ * 
+ * Fetched from: http://dimensionalrift.homelinux.net/combuster/mos3/?p=viewsource&file=/modules/gfx/font8_8.asm
+ **/
+
+// Constant: font8x8_basic
+// Contains an 8x8 font map for unicode points U+0000 - U+007F (basic latin)
+char font8x8_basic[128][8] = {
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0000 (nul)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0001
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0002
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0003
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0004
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0005
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0006
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0007
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0008
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0009
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000A
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000B
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000C
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000D
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000E
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000F
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0010
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0011
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0012
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0013
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0014
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0015
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0016
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0017
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0018
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0019
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001A
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001B
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001C
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001D
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001E
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001F
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0020 (space)
+    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
+    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
+    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
+    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
+    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
+    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
+    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
+    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
+    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
+    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
+    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
+    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
+    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
+    { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0030 (0)
+    { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
+    { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
+    { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
+    { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0034 (4)
+    { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
+    { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
+    { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
+    { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
+    { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
+    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
+    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (//)
+    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
+    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
+    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
+    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
+    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
+    { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
+    { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0042 (B)
+    { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
+    { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0044 (D)
+    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
+    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
+    { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
+    { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
+    { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
+    { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
+    { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+004B (K)
+    { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
+    { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
+    { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
+    { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
+    { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
+    { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
+    { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0052 (R)
+    { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
+    { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
+    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
+    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
+    { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
+    { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
+    { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
+    { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+005A (Z)
+    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
+    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
+    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
+    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
+    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`)
+    { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0061 (a)
+    { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0062 (b)
+    { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0063 (c)
+    { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0064 (d)
+    { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0065 (e)
+    { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0066 (f)
+    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0067 (g)
+    { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0068 (h)
+    { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0069 (i)
+    { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+006A (j)
+    { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+006B (k)
+    { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+006C (l)
+    { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+006D (m)
+    { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+006E (n)
+    { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+006F (o)
+    { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0070 (p)
+    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0071 (q)
+    { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0072 (r)
+    { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0073 (s)
+    { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0074 (t)
+    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0075 (u)
+    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0076 (v)
+    { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0077 (w)
+    { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0078 (x)
+    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0079 (y)
+    { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+007A (z)
+    { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({)
+    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+007C (|)
+    { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (})
+    { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007E (~)
+    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}    // U+007F
+};
diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 499a7ab03bd0da5124d778a1048e620d39772015..3966e510cd72f46cf2ddbd9333e600cbef1b875f 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -140,33 +140,18 @@ static void spi_init () {
 
 static void wait_for_not_busy () {
     uint8_t found_busy_low = 0;
-    volatile int count = 0;
     while (1) {
         uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
-
         if (found_busy_low && pin) {
             break;
         }
-
         if (pin == 0) {
             found_busy_low = 1;
         }
-
-        /*
-        if(!found_busy_low)
-        {
-            count++;
-            if(count > 1000)
-            {
-                break;
-            }
-        }
-        */
     }
 
     // Then wait a little longer so we don't violate the T_NS time.
     nrf_delay_us(5);
-
 }
 
 uint8_t screen[15000] = {
@@ -752,12 +737,10 @@ void init()
 }
 
 
-void ble_evt_write(ble_evt_t* p_ble_evt) {
-
-    if (simple_ble_is_char_event(p_ble_evt, &text_char)) {
-
-        //writeStringAtLocation(text_value, text_x_coordinate_value, 
-        //    text_y_coordinate_value, text_scale_value);
+void ble_evt_write(ble_evt_t* p_ble_evt) 
+{
+    if (simple_ble_is_char_event(p_ble_evt, &text_char)) 
+    {
 
         writeStringAtLocation(text_value, text_x_coordinate_value, text_y_coordinate_value, text_scale_value);
 
@@ -771,6 +754,16 @@ void ble_evt_write(ble_evt_t* p_ble_evt) {
     }
 }
 
+void ble_evt_connected(ble_evt_t* p_ble_evt)
+{
+    led_on(LED0);
+}
+
+void ble_evt_disconnected(ble_evt_t* p_ble_evt)
+{
+    led_off(LED0);
+}
+
 int main(void) 
 {
     //set up the led, spi, and bluetooth
@@ -791,6 +784,9 @@ int main(void)
 
     //led_on(LED0);
 
+    clearScreen();
+    updateDisplay();
+
     // Enter main loop.
     while (1) {
         sd_app_evt_wait();

From f71181d5994796514296e030407a520d4906559a Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Wed, 13 Jul 2016 18:06:17 -0400
Subject: [PATCH] Merge branch 'master' of https://github.com/lab11/nrf5x-base


From 866c0875339b6b99f9a072aee426aa4a39b6a496 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Thu, 14 Jul 2016 18:24:53 -0400
Subject: [PATCH] added timeout on wait_for_not_busy

---
 apps/eink-advanced/main.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 3966e510cd72f46cf2ddbd9333e600cbef1b875f..da3fb6006bc7f198aa2af2f1cf5506918953f827 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -140,6 +140,10 @@ static void spi_init () {
 
 static void wait_for_not_busy () {
     uint8_t found_busy_low = 0;
+    led_on(LED2);
+
+    volatile uint32_t count = 0;
+
     while (1) {
         uint8_t pin = nrf_gpio_pin_read(nTC_BUSY);
         if (found_busy_low && pin) {
@@ -148,7 +152,14 @@ static void wait_for_not_busy () {
         if (pin == 0) {
             found_busy_low = 1;
         }
+
+        if(count > 1000000)
+        {
+            break;
+        }
+        count++;
     }
+    led_off(LED2);
 
     // Then wait a little longer so we don't violate the T_NS time.
     nrf_delay_us(5);
@@ -741,6 +752,16 @@ void ble_evt_write(ble_evt_t* p_ble_evt)
 {
     if (simple_ble_is_char_event(p_ble_evt, &text_char)) 
     {
+        led_on(LED1);
+        nrf_delay_ms(2000);
+        led_off(LED1);
+
+        if(strcmp(text_value, "clearScreen") == 0)
+        {
+            clearScreen();
+            updateDisplay();
+            return;
+        }
 
         writeStringAtLocation(text_value, text_x_coordinate_value, text_y_coordinate_value, text_scale_value);
 
@@ -750,6 +771,8 @@ void ble_evt_write(ble_evt_t* p_ble_evt)
     {
         writeQRcode(qrcode_value);
 
+        //writeStringAtLocation(qrcode_value, 0, 0, 1);
+
         updateDisplay();
     }
 }
@@ -764,6 +787,10 @@ void ble_evt_disconnected(ble_evt_t* p_ble_evt)
     led_off(LED0);
 }
 
+void ble_error(uint32_t error_code) {
+    led_on(LED2);
+}
+
 int main(void) 
 {
     //set up the led, spi, and bluetooth

From 6b8f30a03098646bab776f29521247735434ce37 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Thu, 14 Jul 2016 21:01:05 -0400
Subject: [PATCH] added characteristic for clear/update display

---
 apps/eink-advanced/main.c | 45 ++++++++++++++++++++++++++++-----------------
 1 file changed, 28 insertions(+), 17 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index da3fb6006bc7f198aa2af2f1cf5506918953f827..0c350f4095cff2e431b97b8cdee7b560c2216732 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -51,7 +51,7 @@ static simple_ble_config_t ble_config = {
 // service and characteristic handles
 //  UUID created by `uuidgen -r`
 //  16-bit short uuid is 0x890f (bytes 12 and 13 of 128-bit UUID)
-static simple_ble_service_t led_service = {
+static simple_ble_service_t eink_service = {
     .uuid128 = {{0x41, 0xa6, 0xab, 0x05, 0xb5, 0x7c, 0x4f, 0xd4,
                  0x89, 0x30, 0x4f, 0xff, 0xa4, 0x4a, 0x28, 0xe5}}
 };
@@ -76,37 +76,47 @@ static char text_value[30] = {0};
 static simple_ble_char_t qrcode_char = {.uuid16 = 0xa414};
 static char qrcode_value[52] = {0};
 
+//control characteristic 
+static simple_ble_char_t control_char = {.uuid16 = 0xa415};
+static uint8_t control_value = 0;//0 = nothing, 1 = refresh, 2 = clear
+
 static volatile uint8_t second=0;
 
 // called automatically by simple_ble_init
 void services_init (void) {
     // add led service
-    simple_ble_add_service(&led_service);
+    simple_ble_add_service(&eink_service);
 
     //add text x coordinate
     simple_ble_add_characteristic(0, 1, 0, 0,
             2, (uint16_t*)&text_x_coordinate_value,
-            &led_service, &text_x_coordinate_char);
+            &eink_service, &text_x_coordinate_char);
 
     //add text y coordinate
     simple_ble_add_characteristic(0, 1, 0, 0,
             2, (uint16_t*)&text_y_coordinate_value,
-            &led_service, &text_y_coordinate_char);
+            &eink_service, &text_y_coordinate_char);
 
     //add text scale
     simple_ble_add_characteristic(0, 1, 0, 0,
             1, (uint8_t*)&text_scale_value,
-            &led_service, &text_scale_char);
+            &eink_service, &text_scale_char);
 
     //add string
     simple_ble_add_characteristic(0, 1, 0, 0,
             30, (char*)&text_value,
-            &led_service, &text_char);
+            &eink_service, &text_char);
 
     //add qr code
     simple_ble_add_characteristic(0, 1, 0, 0,
             52, (char*)&qrcode_value,
-            &led_service, &qrcode_char);
+            &eink_service, &qrcode_char);
+            
+
+    //add control char
+    simple_ble_add_characteristic(0, 1, 0, 0,
+            1, (uint8_t*)&control_value,
+            &eink_service, &control_char);
 }
 
 
@@ -756,24 +766,25 @@ void ble_evt_write(ble_evt_t* p_ble_evt)
         nrf_delay_ms(2000);
         led_off(LED1);
 
-        if(strcmp(text_value, "clearScreen") == 0)
+        writeStringAtLocation(text_value, text_x_coordinate_value, text_y_coordinate_value, text_scale_value);
+    }
+    else if(simple_ble_is_char_event(p_ble_evt, &control_char))
+    {
+        if(control_value == 1)
+        {
+            //refresh
+            updateDisplay();
+        }
+        else if(control_value == 2)
         {
+            //clear
             clearScreen();
             updateDisplay();
-            return;
         }
-
-        writeStringAtLocation(text_value, text_x_coordinate_value, text_y_coordinate_value, text_scale_value);
-
-        updateDisplay();
     }
     else if(simple_ble_is_char_event(p_ble_evt, &qrcode_char))
     {
         writeQRcode(qrcode_value);
-
-        //writeStringAtLocation(qrcode_value, 0, 0, 1);
-
-        updateDisplay();
     }
 }
 

From 9263bb9df704ae70e9b26c55fec05214b1759d53 Mon Sep 17 00:00:00 2001
From: Cole Hudson <cmhudson11@gmail.com>
Date: Fri, 15 Jul 2016 20:36:37 -0400
Subject: [PATCH] removed 2 second LED delay on bluetooth write

---
 apps/eink-advanced/main.c | 26 +++++++++++++++++++++++---
 1 file changed, 23 insertions(+), 3 deletions(-)

diff --git a/apps/eink-advanced/main.c b/apps/eink-advanced/main.c
index 0c350f4095cff2e431b97b8cdee7b560c2216732..48807715d371bc13d496b295bf0be2cbe4b163a3 100644
--- a/apps/eink-advanced/main.c
+++ b/apps/eink-advanced/main.c
@@ -70,7 +70,8 @@ static uint8_t text_scale_value = 1;//default to 1
 
 //text
 static simple_ble_char_t text_char = {.uuid16 = 0xa410};
-static char text_value[30] = {0};
+static char text_value[20] = {0};
+static char text[60] = {0};
 
 //qr code
 static simple_ble_char_t qrcode_char = {.uuid16 = 0xa414};
@@ -104,7 +105,7 @@ void services_init (void) {
 
     //add string
     simple_ble_add_characteristic(0, 1, 0, 0,
-            30, (char*)&text_value,
+            60, (char*)&text_value,
             &eink_service, &text_char);
 
     //add qr code
@@ -757,16 +758,35 @@ void init()
     text_scale_value = 1;
 }
 
+void appendCharToText()
+{
+    uint8_t index = text_value[0];
+
+    uint8_t chunkIndex = 1;
+    for(int i = 18 * index; i < 60; i++)
+    {
+        if(chunkIndex < 18)
+        {
+            text[i] = text_value[chunkIndex];
+            chunkIndex++;
+        }
+    }
+    text[59] = '\0';
+}
 
 void ble_evt_write(ble_evt_t* p_ble_evt) 
 {
     if (simple_ble_is_char_event(p_ble_evt, &text_char)) 
     {
+        /*
         led_on(LED1);
         nrf_delay_ms(2000);
         led_off(LED1);
+        */
+
+        appendCharToText();
 
-        writeStringAtLocation(text_value, text_x_coordinate_value, text_y_coordinate_value, text_scale_value);
+        writeStringAtLocation(text, text_x_coordinate_value, text_y_coordinate_value, text_scale_value);
     }
     else if(simple_ble_is_char_event(p_ble_evt, &control_char))
     {
